var searchIndex = {};
searchIndex["rq"] = {"doc":"","items":[[3,"Args","rq","",null,null],[12,"arg_query","","",0,null],[12,"arg_schema","","",0,null],[12,"cmd_add","","",0,null],[12,"cmd_protobuf","","",0,null],[12,"flag__","","",0,null],[12,"flag_base","","",0,null],[12,"flag_format","","",0,null],[12,"flag_help","","",0,null],[12,"flag_input_avro","","",0,null],[12,"flag_input_cbor","","",0,null],[12,"flag_input_hjson","","",0,null],[12,"flag_input_json","","",0,null],[12,"flag_input_message_pack","","",0,null],[12,"flag_input_protobuf","","",0,null],[12,"flag_input_yaml","","",0,null],[12,"flag_log","","",0,null],[12,"flag_output_avro","","",0,null],[12,"flag_output_cbor","","",0,null],[12,"flag_output_hjson","","",0,null],[12,"flag_output_json","","",0,null],[12,"flag_output_message_pack","","",0,null],[12,"flag_output_protobuf","","",0,null],[12,"flag_output_yaml","","",0,null],[12,"flag_quiet","","",0,null],[12,"flag_trace","","",0,null],[12,"flag_version","","",0,null],[4,"Format","","",null,null],[13,"Compact","","",1,null],[13,"Readable","","",1,null],[17,"DOCOPT","","",null,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",1,null],[11,"eq","","",1,null],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null]],"paths":[[3,"Args"],[4,"Format"]]};
searchIndex["record_query"] = {"doc":"","items":[[5,"run_query","record_query","",null,{"inputs":[{"name":"query"},{"name":"i"},{"name":"o"}],"output":{"name":"result"}}],[0,"config","","",null,null],[3,"Paths","record_query::config","",null,null],[11,"fmt","","",0,null],[11,"new","","",0,{"inputs":[],"output":{"name":"result"}}],[11,"preferred_config","","",0,null],[11,"preferred_cache","","",0,null],[11,"preferred_data","","",0,null],[11,"find_config","","",0,null],[11,"find_data","","",0,null],[0,"error","record_query","",null,null],[3,"Error","record_query::error","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"ErrorKind","","",null,null],[13,"Msg","","",2,null],[13,"Duk","","",2,null],[13,"Avro","","",2,null],[13,"IO","","",2,null],[13,"Utf8","","",2,null],[13,"NativeProtobuf","","",2,null],[13,"MessagePackDecode","","",2,null],[13,"MessagePackEncode","","",2,null],[13,"Cbor","","",2,null],[13,"Hjson","","",2,null],[13,"Json","","",2,null],[13,"Protobuf","","",2,null],[13,"Yaml","","",2,null],[13,"YamlDecode","","",2,null],[13,"XdgBasedir","","",2,null],[13,"Glob","","",2,null],[13,"GlobPattern","","",2,null],[13,"Unimplemented","","",2,null],[13,"IllegalState","","",2,null],[13,"SyntaxError","","",2,null],[13,"ProcessNotFound","","",2,null],[6,"Result","","",null,null],[8,"ChainErr","","",null,null],[10,"chain_err","","",3,null],[11,"fmt","","",1,null],[11,"kind","","",1,null],[11,"into_kind","","",1,null],[11,"iter","","",1,null],[11,"backtrace","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"protobuferror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"scanerror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"globerror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"patternerror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"from","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"chain_err","core::result","",4,null],[11,"unimplemented","record_query::error","",1,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[11,"illegal_state","","",1,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[0,"proto_index","record_query","",null,null],[5,"add_file","record_query::proto_index","",null,{"inputs":[{"name":"paths"},{"name":"path"},{"name":"path"}],"output":{"name":"result"}}],[5,"compile_descriptor_set","","",null,{"inputs":[{"name":"paths"}],"output":{"name":"result"}}],[0,"query","record_query","",null,null],[3,"Context","record_query::query","",null,null],[3,"Query","","",null,null],[3,"Process","","",null,null],[3,"Output","","",null,null],[4,"Expression","","",null,null],[13,"Value","","",5,null],[13,"Function","","",5,null],[11,"fmt","","",6,null],[11,"new","","",6,{"inputs":[],"output":{"name":"context"}}],[11,"process","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",9,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"empty","","",7,{"inputs":[],"output":{"name":"query"}}],[11,"parse","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"evaluate","","",7,null],[11,"read","","",9,null],[0,"value","record_query","",null,null],[4,"Value","record_query::value","",null,null],[13,"Unit","","",10,null],[13,"Bool","","",10,null],[13,"ISize","","",10,null],[13,"I8","","",10,null],[13,"I16","","",10,null],[13,"I32","","",10,null],[13,"I64","","",10,null],[13,"USize","","",10,null],[13,"U8","","",10,null],[13,"U16","","",10,null],[13,"U32","","",10,null],[13,"U64","","",10,null],[13,"F32","","",10,null],[13,"F64","","",10,null],[13,"Char","","",10,null],[13,"String","","",10,null],[13,"Bytes","","",10,null],[13,"Sequence","","",10,null],[13,"Map","","",10,null],[0,"avro","","",null,null],[3,"AvroSource","record_query::value::avro","",null,null],[5,"source","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"read","","",11,null],[0,"cbor","record_query::value","",null,null],[3,"CborSource","record_query::value::cbor","",null,null],[3,"CborSink","","",null,null],[5,"source","","",null,{"inputs":[{"name":"r"}],"output":{"name":"cborsource"}}],[5,"sink","","",null,{"inputs":[{"name":"w"}],"output":{"name":"cborsink"}}],[11,"read","","",12,null],[11,"write","","",13,null],[0,"hjson","record_query::value","",null,null],[3,"HjsonSource","record_query::value::hjson","",null,null],[3,"HjsonSink","","",null,null],[5,"source","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"sink","","",null,{"inputs":[{"name":"w"}],"output":{"name":"hjsonsink"}}],[11,"read","","",14,null],[11,"write","","",15,null],[0,"json","record_query::value","",null,null],[3,"JsonSource","record_query::value::json","",null,null],[3,"JsonSink","","",null,null],[3,"ReadableFormatter","","",null,null],[5,"source","","",null,{"inputs":[{"name":"r"}],"output":{"name":"jsonsource"}}],[5,"sink_compact","","",null,{"inputs":[{"name":"w"}],"output":{"name":"jsonsink"}}],[5,"sink_readable","","",null,{"inputs":[{"name":"w"}],"output":{"name":"jsonsink"}}],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"read","","",17,null],[11,"write","","",18,null],[11,"write_null","","Writes a `null` value to the specified writer.",16,null],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",16,null],[11,"write_integer","","Writes an integer value like `-123` to the specified writer.",16,null],[11,"write_floating","","Writes a floating point value like `-31.26e+12` to the\nspecified writer.",16,null],[11,"begin_string","","Called before each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",16,null],[11,"end_string","","Called after each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",16,null],[11,"write_string_fragment","","Writes a string fragment that doesn&#39;t need any escaping to the\nspecified writer.",16,null],[11,"write_char_escape","","Writes a character escape code to the specified writer.",16,null],[11,"begin_array","","Called before every array.  Writes a `[` to the specified\nwriter.",16,null],[11,"end_array","","Called after every array.  Writes a `]` to the specified\nwriter.",16,null],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to\nthe specified writer.",16,null],[11,"end_array_value","","Called after every array value.",16,null],[11,"begin_object","","Called before every object.  Writes a `{` to the specified\nwriter.",16,null],[11,"end_object","","Called after every object.  Writes a `}` to the specified\nwriter.",16,null],[11,"begin_object_key","","Called before every object key.",16,null],[11,"end_object_key","","Called after every object key.  A `:` should be written to the\nspecified writer by either this method or\n`begin_object_value`.",16,null],[11,"begin_object_value","","Called before every object value.  A `:` should be written to\nthe specified writer by either this method or\n`end_object_key`.",16,null],[11,"end_object_value","","Called after every object value.",16,null],[0,"messagepack","record_query::value","",null,null],[3,"MessagePackSource","record_query::value::messagepack","",null,null],[3,"MessagePackSink","","",null,null],[5,"source","","",null,{"inputs":[{"name":"r"}],"output":{"name":"messagepacksource"}}],[5,"sink","","",null,{"inputs":[{"name":"w"}],"output":{"name":"messagepacksink"}}],[11,"read","","",19,null],[11,"write","","",20,null],[0,"protobuf","record_query::value","",null,null],[3,"ProtobufSource","record_query::value::protobuf","",null,null],[5,"source","","",null,{"inputs":[{"name":"descriptors"},{"name":"str"},{"name":"codedinputstream"}],"output":{"name":"result"}}],[11,"read","","",21,null],[0,"yaml","record_query::value","",null,null],[3,"YamlSource","record_query::value::yaml","",null,null],[3,"YamlSink","","",null,null],[5,"source","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"sink","","",null,{"inputs":[{"name":"w"}],"output":{"name":"yamlsink"}}],[11,"read","","",22,null],[11,"write","","",23,null],[8,"Source","record_query::value","",null,null],[10,"read","","",24,null],[8,"Sink","","",null,null],[10,"write","","",25,null],[11,"partial_cmp","","",10,null],[11,"lt","","",10,null],[11,"le","","",10,null],[11,"gt","","",10,null],[11,"ge","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"cmp","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"to_json","","",10,null],[11,"from_f32","","",10,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from_f64","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"fmt","","",10,null],[11,"serialize","","",10,null],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[3,"Paths"],[3,"Error"],[4,"ErrorKind"],[8,"ChainErr"],[4,"Result"],[4,"Expression"],[3,"Context"],[3,"Query"],[3,"Process"],[3,"Output"],[4,"Value"],[3,"AvroSource"],[3,"CborSource"],[3,"CborSink"],[3,"HjsonSource"],[3,"HjsonSink"],[3,"ReadableFormatter"],[3,"JsonSource"],[3,"JsonSink"],[3,"MessagePackSource"],[3,"MessagePackSink"],[3,"ProtobufSource"],[3,"YamlSource"],[3,"YamlSink"],[8,"Source"],[8,"Sink"]]};
searchIndex["serde_protobuf"] = {"doc":"Support for [Google protocol buffers][1] in combination with `serde`.","items":[[0,"de","serde_protobuf","Deserialization of binary protocol buffer encoded data.",null,null],[3,"Deserializer","serde_protobuf::de","A deserializer that can deserialize a single message type.",null,null],[11,"new","","Constructs a new protocol buffer deserializer for the specified message type.",0,{"inputs":[{"name":"descriptors"},{"name":"messagedescriptor"},{"name":"codedinputstream"}],"output":{"name":"deserializer"}}],[11,"for_named_message","","Constructs a new protocol buffer deserializer for the specified named message type.",0,{"inputs":[{"name":"descriptors"},{"name":"str"},{"name":"codedinputstream"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,null],[11,"deserialize_f64","","",0,null],[11,"deserialize_f32","","",0,null],[11,"deserialize_u8","","",0,null],[11,"deserialize_u16","","",0,null],[11,"deserialize_u32","","",0,null],[11,"deserialize_u64","","",0,null],[11,"deserialize_usize","","",0,null],[11,"deserialize_i8","","",0,null],[11,"deserialize_i16","","",0,null],[11,"deserialize_i32","","",0,null],[11,"deserialize_i64","","",0,null],[11,"deserialize_isize","","",0,null],[11,"deserialize_char","","",0,null],[11,"deserialize_str","","",0,null],[11,"deserialize_string","","",0,null],[11,"deserialize_ignored_any","","",0,null],[11,"deserialize_bytes","","",0,null],[11,"deserialize_unit_struct","","",0,null],[11,"deserialize_unit","","",0,null],[11,"deserialize_seq","","",0,null],[11,"deserialize_seq_fixed_size","","",0,null],[11,"deserialize_map","","",0,null],[11,"deserialize_newtype_struct","","",0,null],[11,"deserialize_struct_field","","",0,null],[11,"deserialize_tuple","","",0,null],[11,"deserialize_enum","","",0,null],[11,"deserialize_struct","","",0,null],[11,"deserialize_tuple_struct","","",0,null],[11,"deserialize_option","","",0,null],[11,"deserialize","","",0,null],[0,"descriptor","serde_protobuf","Dynamic descriptors for protocol buffer schemata.",null,null],[3,"MessageId","serde_protobuf::descriptor","An ID used for internal tracking of resolved message descriptors.",null,null],[3,"EnumId","","An ID used for internal tracking of resolved enum descriptors.",null,null],[3,"Descriptors","","A registry for any number of protocol buffer descriptors.",null,null],[3,"MessageDescriptor","","A descriptor for a single protocol buffer message type.",null,null],[3,"EnumDescriptor","","A descriptor for a single protocol buffer enum type.",null,null],[3,"EnumValueDescriptor","","A descriptor for a single protocol buffer enum value.",null,null],[3,"FieldDescriptor","","A descriptor for a single protocol buffer message field.",null,null],[4,"FieldLabel","","A label that a field can be given to indicate its cardinality.",null,null],[13,"Optional","","There can be zero or one value.",1,null],[13,"Required","","There must be exactly one value.",1,null],[13,"Repeated","","There can be any number of values.",1,null],[4,"FieldType","","The externally visible type of a field.",null,null],[13,"UnresolvedMessage","","",2,null],[13,"UnresolvedEnum","","",2,null],[13,"Double","","",2,null],[13,"Float","","",2,null],[13,"Int64","","",2,null],[13,"UInt64","","",2,null],[13,"Int32","","",2,null],[13,"Fixed64","","",2,null],[13,"Fixed32","","",2,null],[13,"Bool","","",2,null],[13,"String","","",2,null],[13,"Group","","",2,null],[13,"Message","","",2,null],[13,"Bytes","","",2,null],[13,"UInt32","","",2,null],[13,"Enum","","",2,null],[13,"SFixed32","","",2,null],[13,"SFixed64","","",2,null],[13,"SInt32","","",2,null],[13,"SInt64","","",2,null],[4,"InternalFieldType","","The internally tracked type of a field.",null,null],[13,"UnresolvedMessage","","",3,null],[13,"UnresolvedEnum","","",3,null],[13,"Double","","",3,null],[13,"Float","","",3,null],[13,"Int64","","",3,null],[13,"UInt64","","",3,null],[13,"Int32","","",3,null],[13,"Fixed64","","",3,null],[13,"Fixed32","","",3,null],[13,"Bool","","",3,null],[13,"String","","",3,null],[13,"Group","","",3,null],[13,"Message","","",3,null],[13,"Bytes","","",3,null],[13,"UInt32","","",3,null],[13,"Enum","","",3,null],[13,"SFixed32","","",3,null],[13,"SFixed64","","",3,null],[13,"SInt32","","",3,null],[13,"SInt64","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",10,null],[11,"new","","Creates a new empty descriptor set.",6,{"inputs":[],"output":{"name":"descriptors"}}],[11,"from_proto","","Builds a descriptor set from the specified protocol buffer file descriptor set.",6,{"inputs":[{"name":"filedescriptorset"}],"output":{"name":"descriptors"}}],[11,"message_by_name","","Looks up a message by its fully qualified name (i.e. `.foo.package.Message`).",6,null],[11,"enum_by_name","","Looks up an enum by its fully qualified name (i.e. `.foo.package.Enum`).",6,null],[11,"add_file_set_proto","","Adds all types defined in the specified protocol buffer file descriptor set to this\nregistry.",6,null],[11,"add_file_proto","","Adds all types defined in the specified protocol buffer file descriptor to this registry.",6,null],[11,"add_message_proto","","Adds a message and all nested types within that message from the specified protocol buffer\ndescriptor.",6,null],[11,"add_message","","Adds a single custom built message descriptor.",6,null],[11,"add_enum","","Adds a single custom built enum descriptor.",6,null],[11,"resolve_refs","","Resolves all internal descriptor type references, making them cheaper to follow.",6,null],[11,"new","","",7,{"inputs":[{"name":"s"}],"output":{"name":"messagedescriptor"}}],[11,"from_proto","","",7,{"inputs":[{"name":"str"},{"name":"descriptorproto"}],"output":{"name":"messagedescriptor"}}],[11,"fields","","",7,null],[11,"name","","",7,null],[11,"field_by_name","","",7,null],[11,"field_by_number","","",7,null],[11,"add_field","","",7,null],[11,"new","","",8,{"inputs":[{"name":"s"}],"output":{"name":"enumdescriptor"}}],[11,"from_proto","","",8,{"inputs":[{"name":"str"},{"name":"enumdescriptorproto"}],"output":{"name":"enumdescriptor"}}],[11,"name","","",8,null],[11,"add_value","","",8,null],[11,"value_by_name","","",8,null],[11,"value_by_number","","",8,null],[11,"new","","",9,{"inputs":[{"name":"s"},{"name":"i32"}],"output":{"name":"enumvaluedescriptor"}}],[11,"from_proto","","",9,{"inputs":[{"name":"enumvaluedescriptorproto"}],"output":{"name":"enumvaluedescriptor"}}],[11,"name","","",9,null],[11,"number","","",9,null],[11,"from_proto","","",1,{"inputs":[{"name":"fielddescriptorproto_label"}],"output":{"name":"fieldlabel"}}],[11,"is_repeated","","",1,null],[11,"from_proto","","",3,{"inputs":[{"name":"fielddescriptorproto_type"},{"name":"str"}],"output":{"name":"internalfieldtype"}}],[11,"new","","",10,{"inputs":[{"name":"s"},{"name":"i32"},{"name":"fieldlabel"},{"name":"internalfieldtype"},{"name":"option"}],"output":{"name":"fielddescriptor"}}],[11,"from_proto","","",10,{"inputs":[{"name":"fielddescriptorproto"}],"output":{"name":"fielddescriptor"}}],[11,"name","","",10,null],[11,"number","","",10,null],[11,"field_label","","",10,null],[11,"is_repeated","","",10,null],[11,"field_type","","",10,null],[11,"default_value","","",10,null],[0,"error","serde_protobuf","",null,null],[4,"Error","serde_protobuf::error","",null,null],[13,"EndOfStream","","",11,null],[13,"Protobuf","","",11,null],[13,"UnknownEnum","","",11,null],[13,"UnknownEnumValue","","",11,null],[13,"UnknownMessage","","",11,null],[13,"BadWireType","","",11,null],[13,"BadDefaultValue","","",11,null],[13,"Custom","","",11,null],[6,"Result","","",null,null],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[11,"description","","",11,null],[11,"custom","","",11,{"inputs":[{"name":"s"}],"output":{"name":"error"}}],[11,"end_of_stream","","",11,{"inputs":[],"output":{"name":"error"}}],[11,"from","","",11,{"inputs":[{"name":"protobuferror"}],"output":{"name":"error"}}],[0,"value","serde_protobuf","",null,null],[3,"Message","serde_protobuf::value","",null,null],[12,"fields","","",12,null],[12,"unknown","","",12,null],[4,"Value","","",null,null],[13,"Bool","","",13,null],[13,"I32","","",13,null],[13,"I64","","",13,null],[13,"U32","","",13,null],[13,"U64","","",13,null],[13,"F32","","",13,null],[13,"F64","","",13,null],[13,"Bytes","","",13,null],[13,"String","","",13,null],[13,"Enum","","",13,null],[13,"Message","","",13,null],[4,"Field","","",null,null],[13,"Singular","","",14,null],[13,"Repeated","","",14,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"new","","",12,{"inputs":[{"name":"messagedescriptor"}],"output":{"name":"message"}}],[11,"merge_from","","",12,null],[11,"new","","",14,{"inputs":[{"name":"fielddescriptor"}],"output":{"name":"field"}}],[11,"merge_from","","",14,null]],"paths":[[3,"Deserializer"],[4,"FieldLabel"],[4,"FieldType"],[4,"InternalFieldType"],[3,"MessageId"],[3,"EnumId"],[3,"Descriptors"],[3,"MessageDescriptor"],[3,"EnumDescriptor"],[3,"EnumValueDescriptor"],[3,"FieldDescriptor"],[4,"Error"],[3,"Message"],[4,"Value"],[4,"Field"]]};
searchIndex["duk"] = {"doc":"A high-level wrapper around the [Duktape][1] Javascript/EcmaScript\ninterpreter.","items":[[3,"Context","duk","A context corresponding to a thread of script execution.",null,null],[3,"ContextBuilder","","",null,null],[3,"Reference","","A reference to a value that lives within a `Context`.",null,null],[3,"Error","","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"JsError","","An error that originates from executing Javascript/Ecmascript.",null,null],[12,"kind","","The kind of error.",1,null],[12,"message","","A descriptive user-controlled error message.",1,null],[12,"file_name","","",1,null],[12,"line_number","","",1,null],[12,"stack","","",1,null],[4,"Value","","A Javascript/Ecmascript value that exists in the Rust world.",null,null],[13,"Undefined","","The `undefined` value.",2,null],[13,"Null","","The `null` value.",2,null],[13,"Boolean","","A boolean like `true` or `false`.",2,null],[13,"Number","","Any number (both integral like `5` and fractional like `2.3`).",2,null],[13,"String","","Any string like `&#39;abc&#39;`.",2,null],[13,"Array","","Any array of values like `[&#39;a&#39;, 2, false]`.",2,null],[13,"Object","","A JSON-like object like `{a: &#39;a&#39;, b: 2, c: false}`.",2,null],[13,"Bytes","","A Duktape byte buffer like `Duktape.Buffer(&#39;abc&#39;)`.",2,null],[13,"Foreign","","A Duktape value that cannot be represented in Rust (yet).",2,null],[4,"ErrorKind","","",null,null],[13,"Msg","","",3,null],[13,"Js","","",3,null],[4,"JsErrorKind","","Kinds of Javascript/Ecmascript errors",null,null],[13,"Generic","","A thrown error that doesn&#39;t inherit from `Error`, like when\nthe user does `throw 3.14;`.",4,null],[13,"Error","","An error that&#39;s an instance of `Error`.",4,null],[13,"Eval","","An error that&#39;s an instance of `EvalError`.",4,null],[13,"Range","","An error that&#39;s an instance of `RangeError`.",4,null],[13,"Reference","","An error that&#39;s an instance of `ReferenceError`.",4,null],[13,"Syntax","","An error that&#39;s an instance of `SyntaxError`.",4,null],[13,"Type","","An error that&#39;s an instance of `TypeError`.",4,null],[13,"Uri","","An error that&#39;s an instance of `UriError`.",4,null],[6,"ModuleResolver","","",null,null],[6,"ModuleLoader","","",null,null],[6,"Result","","",null,null],[8,"Argument","","Something that can be used as an argument when calling into Javascript code.",null,null],[10,"push_to_context","","Pushes this argument to the stack of the specified context.  This requires interaction with\nthe internals of the context, and is therefore an unsafe operation.",5,null],[8,"ChainErr","","",null,null],[10,"chain_err","","",6,null],[11,"default","","",7,{"inputs":[],"output":{"name":"contextbuilder"}}],[11,"fmt","","",8,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",0,null],[11,"kind","","",0,null],[11,"into_kind","","",0,null],[11,"iter","","",0,null],[11,"backtrace","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"chain_err","core::result","",9,null],[11,"eq","duk","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"new","","Creates a new context.",10,{"inputs":[],"output":{"name":"context"}}],[11,"builder","","",10,{"inputs":[],"output":{"name":"contextbuilder"}}],[11,"eval_string","","Evaluates the specified script string within the current\ncontext.",10,null],[11,"eval_string_with_filename","","Like `eval_string`, but sets the file name for all of the evaluated functions to the\nspecified string.",10,null],[11,"eval_file","","Loads and evaluates the specified file within the current\ncontext.",10,null],[11,"global_object","","Retrieves a reference to the global object.",10,null],[11,"call_global","","Calls the specified global script function with the supplied\narguments.",10,null],[11,"fmt","","",10,null],[11,"drop","","",10,null],[11,"with_module_resolver","","",7,null],[11,"with_module_loader","","",7,null],[11,"build","","",7,null],[11,"to_value","","Converts this reference to a `Value` which can be used for further processing by Rust code.",8,null],[11,"get","","Gets the property with the specified key, provided that this reference points to something\nthat is object coercible.",8,null],[11,"call","","Calls the function that this reference points to without a `this` binding, using the\nspecified arguments.",8,null],[11,"call_with_this","","Calls the function that this reference points to with an explicit `this` binding.",8,null],[11,"call_method","","Calls a method on the object that this reference points to.",8,null],[11,"new","","Calls the function that this reference points to as a constructor, with the specified\narguments.",8,null],[11,"push_to_context","","",8,null],[11,"eq","","",8,null],[11,"drop","","",8,null],[11,"to_reference","","Copies this value into a `Context`, and returns the reference to the value within the\ncontext.",2,null],[11,"push_to_context","","",2,null]],"paths":[[3,"Error"],[3,"JsError"],[4,"Value"],[4,"ErrorKind"],[4,"JsErrorKind"],[8,"Argument"],[8,"ChainErr"],[3,"ContextBuilder"],[3,"Reference"],[4,"Result"],[3,"Context"]]};
searchIndex["duktape_sys"] = {"doc":"An auto-generated wrapper around the [Duktape][1] library.","items":[[3,"duk_memory_functions","duktape_sys","",null,null],[12,"alloc_func","","",0,null],[12,"realloc_func","","",0,null],[12,"free_func","","",0,null],[12,"udata","","",0,null],[3,"duk_function_list_entry","","",null,null],[12,"key","","",1,null],[12,"value","","",1,null],[12,"nargs","","",1,null],[3,"duk_number_list_entry","","",null,null],[12,"key","","",2,null],[12,"value","","",2,null],[3,"duk_time_components","","",null,null],[12,"year","","",3,null],[12,"month","","",3,null],[12,"day","","",3,null],[12,"hour","","",3,null],[12,"minute","","",3,null],[12,"second","","",3,null],[12,"weekday","","",3,null],[12,"millisecond","","",3,null],[3,"duk_double_union","","",null,null],[12,"_bindgen_data_","","",4,null],[4,"duk_hthread","","",null,null],[5,"__duktape_sys_debug_write","","",null,null],[7,"DUK_VERSION","","",null,null],[7,"DUK_GIT_COMMIT","","",null,null],[7,"DUK_GIT_DESCRIBE","","",null,null],[7,"DUK_GIT_BRANCH","","",null,null],[7,"DUK_DEBUG_PROTOCOL_VERSION","","",null,null],[7,"DUK_INVALID_INDEX","","",null,null],[7,"DUK_VARARGS","","",null,null],[7,"DUK_API_ENTRY_STACK","","",null,null],[7,"DUK_TYPE_MIN","","",null,null],[7,"DUK_TYPE_NONE","","",null,null],[7,"DUK_TYPE_UNDEFINED","","",null,null],[7,"DUK_TYPE_NULL","","",null,null],[7,"DUK_TYPE_BOOLEAN","","",null,null],[7,"DUK_TYPE_NUMBER","","",null,null],[7,"DUK_TYPE_STRING","","",null,null],[7,"DUK_TYPE_OBJECT","","",null,null],[7,"DUK_TYPE_BUFFER","","",null,null],[7,"DUK_TYPE_POINTER","","",null,null],[7,"DUK_TYPE_LIGHTFUNC","","",null,null],[7,"DUK_TYPE_MAX","","",null,null],[7,"DUK_TYPE_MASK_NONE","","",null,null],[7,"DUK_TYPE_MASK_UNDEFINED","","",null,null],[7,"DUK_TYPE_MASK_NULL","","",null,null],[7,"DUK_TYPE_MASK_BOOLEAN","","",null,null],[7,"DUK_TYPE_MASK_NUMBER","","",null,null],[7,"DUK_TYPE_MASK_STRING","","",null,null],[7,"DUK_TYPE_MASK_OBJECT","","",null,null],[7,"DUK_TYPE_MASK_BUFFER","","",null,null],[7,"DUK_TYPE_MASK_POINTER","","",null,null],[7,"DUK_TYPE_MASK_LIGHTFUNC","","",null,null],[7,"DUK_TYPE_MASK_THROW","","",null,null],[7,"DUK_HINT_NONE","","",null,null],[7,"DUK_HINT_STRING","","",null,null],[7,"DUK_HINT_NUMBER","","",null,null],[7,"DUK_ENUM_INCLUDE_NONENUMERABLE","","",null,null],[7,"DUK_ENUM_INCLUDE_INTERNAL","","",null,null],[7,"DUK_ENUM_OWN_PROPERTIES_ONLY","","",null,null],[7,"DUK_ENUM_ARRAY_INDICES_ONLY","","",null,null],[7,"DUK_ENUM_SORT_ARRAY_INDICES","","",null,null],[7,"DUK_ENUM_NO_PROXY_BEHAVIOR","","",null,null],[7,"DUK_COMPILE_EVAL","","",null,null],[7,"DUK_COMPILE_FUNCTION","","",null,null],[7,"DUK_COMPILE_STRICT","","",null,null],[7,"DUK_COMPILE_SAFE","","",null,null],[7,"DUK_COMPILE_NORESULT","","",null,null],[7,"DUK_COMPILE_NOSOURCE","","",null,null],[7,"DUK_COMPILE_STRLEN","","",null,null],[7,"DUK_COMPILE_NOFILENAME","","",null,null],[7,"DUK_DEFPROP_WRITABLE","","",null,null],[7,"DUK_DEFPROP_ENUMERABLE","","",null,null],[7,"DUK_DEFPROP_CONFIGURABLE","","",null,null],[7,"DUK_DEFPROP_HAVE_WRITABLE","","",null,null],[7,"DUK_DEFPROP_HAVE_ENUMERABLE","","",null,null],[7,"DUK_DEFPROP_HAVE_CONFIGURABLE","","",null,null],[7,"DUK_DEFPROP_HAVE_VALUE","","",null,null],[7,"DUK_DEFPROP_HAVE_GETTER","","",null,null],[7,"DUK_DEFPROP_HAVE_SETTER","","",null,null],[7,"DUK_DEFPROP_FORCE","","",null,null],[7,"DUK_DEFPROP_SET_WRITABLE","","",null,null],[7,"DUK_DEFPROP_CLEAR_WRITABLE","","",null,null],[7,"DUK_DEFPROP_SET_ENUMERABLE","","",null,null],[7,"DUK_DEFPROP_CLEAR_ENUMERABLE","","",null,null],[7,"DUK_DEFPROP_SET_CONFIGURABLE","","",null,null],[7,"DUK_DEFPROP_CLEAR_CONFIGURABLE","","",null,null],[7,"DUK_THREAD_NEW_GLOBAL_ENV","","",null,null],[7,"DUK_ERR_NONE","","",null,null],[7,"DUK_ERR_ERROR","","",null,null],[7,"DUK_ERR_EVAL_ERROR","","",null,null],[7,"DUK_ERR_RANGE_ERROR","","",null,null],[7,"DUK_ERR_REFERENCE_ERROR","","",null,null],[7,"DUK_ERR_SYNTAX_ERROR","","",null,null],[7,"DUK_ERR_TYPE_ERROR","","",null,null],[7,"DUK_ERR_URI_ERROR","","",null,null],[7,"DUK_RET_ERROR","","",null,null],[7,"DUK_RET_EVAL_ERROR","","",null,null],[7,"DUK_RET_RANGE_ERROR","","",null,null],[7,"DUK_RET_REFERENCE_ERROR","","",null,null],[7,"DUK_RET_SYNTAX_ERROR","","",null,null],[7,"DUK_RET_TYPE_ERROR","","",null,null],[7,"DUK_RET_URI_ERROR","","",null,null],[7,"DUK_EXEC_SUCCESS","","",null,null],[7,"DUK_EXEC_ERROR","","",null,null],[7,"DUK_LEVEL_DEBUG","","",null,null],[7,"DUK_LEVEL_DDEBUG","","",null,null],[7,"DUK_LEVEL_DDDEBUG","","",null,null],[7,"DUK_LOG_TRACE","","",null,null],[7,"DUK_LOG_DEBUG","","",null,null],[7,"DUK_LOG_INFO","","",null,null],[7,"DUK_LOG_WARN","","",null,null],[7,"DUK_LOG_ERROR","","",null,null],[7,"DUK_LOG_FATAL","","",null,null],[5,"duk_create_heap","","",null,null],[5,"duk_destroy_heap","","",null,null],[5,"duk_alloc_raw","","",null,null],[5,"duk_free_raw","","",null,null],[5,"duk_realloc_raw","","",null,null],[5,"duk_alloc","","",null,null],[5,"duk_free","","",null,null],[5,"duk_realloc","","",null,null],[5,"duk_get_memory_functions","","",null,null],[5,"duk_gc","","",null,null],[5,"duk_throw","","",null,null],[5,"duk_fatal","","",null,null],[5,"duk_error_raw","","",null,null],[5,"duk_error_va_raw","","",null,null],[5,"duk_is_strict_call","","",null,null],[5,"duk_is_constructor_call","","",null,null],[5,"duk_normalize_index","","",null,null],[5,"duk_require_normalize_index","","",null,null],[5,"duk_is_valid_index","","",null,null],[5,"duk_require_valid_index","","",null,null],[5,"duk_get_top","","",null,null],[5,"duk_set_top","","",null,null],[5,"duk_get_top_index","","",null,null],[5,"duk_require_top_index","","",null,null],[5,"duk_check_stack","","",null,null],[5,"duk_require_stack","","",null,null],[5,"duk_check_stack_top","","",null,null],[5,"duk_require_stack_top","","",null,null],[5,"duk_swap","","",null,null],[5,"duk_swap_top","","",null,null],[5,"duk_dup","","",null,null],[5,"duk_dup_top","","",null,null],[5,"duk_insert","","",null,null],[5,"duk_replace","","",null,null],[5,"duk_copy","","",null,null],[5,"duk_remove","","",null,null],[5,"duk_xcopymove_raw","","",null,null],[5,"duk_push_undefined","","",null,null],[5,"duk_push_null","","",null,null],[5,"duk_push_boolean","","",null,null],[5,"duk_push_true","","",null,null],[5,"duk_push_false","","",null,null],[5,"duk_push_number","","",null,null],[5,"duk_push_nan","","",null,null],[5,"duk_push_int","","",null,null],[5,"duk_push_uint","","",null,null],[5,"duk_push_string","","",null,null],[5,"duk_push_lstring","","",null,null],[5,"duk_push_pointer","","",null,null],[5,"duk_push_sprintf","","",null,null],[5,"duk_push_vsprintf","","",null,null],[5,"duk_push_this","","",null,null],[5,"duk_push_current_function","","",null,null],[5,"duk_push_current_thread","","",null,null],[5,"duk_push_global_object","","",null,null],[5,"duk_push_heap_stash","","",null,null],[5,"duk_push_global_stash","","",null,null],[5,"duk_push_thread_stash","","",null,null],[5,"duk_push_object","","",null,null],[5,"duk_push_array","","",null,null],[5,"duk_push_c_function","","",null,null],[5,"duk_push_c_lightfunc","","",null,null],[5,"duk_push_thread_raw","","",null,null],[5,"duk_push_error_object_raw","","",null,null],[5,"duk_push_error_object_va_raw","","",null,null],[5,"duk_push_buffer_raw","","",null,null],[5,"duk_push_buffer_object","","",null,null],[5,"duk_push_heapptr","","",null,null],[5,"duk_pop","","",null,null],[5,"duk_pop_n","","",null,null],[5,"duk_pop_2","","",null,null],[5,"duk_pop_3","","",null,null],[5,"duk_get_type","","",null,null],[5,"duk_check_type","","",null,null],[5,"duk_get_type_mask","","",null,null],[5,"duk_check_type_mask","","",null,null],[5,"duk_is_undefined","","",null,null],[5,"duk_is_null","","",null,null],[5,"duk_is_null_or_undefined","","",null,null],[5,"duk_is_boolean","","",null,null],[5,"duk_is_number","","",null,null],[5,"duk_is_nan","","",null,null],[5,"duk_is_string","","",null,null],[5,"duk_is_object","","",null,null],[5,"duk_is_buffer","","",null,null],[5,"duk_is_pointer","","",null,null],[5,"duk_is_lightfunc","","",null,null],[5,"duk_is_array","","",null,null],[5,"duk_is_function","","",null,null],[5,"duk_is_c_function","","",null,null],[5,"duk_is_ecmascript_function","","",null,null],[5,"duk_is_bound_function","","",null,null],[5,"duk_is_thread","","",null,null],[5,"duk_is_dynamic_buffer","","",null,null],[5,"duk_is_fixed_buffer","","",null,null],[5,"duk_is_external_buffer","","",null,null],[5,"duk_get_error_code","","",null,null],[5,"duk_get_boolean","","",null,null],[5,"duk_get_number","","",null,null],[5,"duk_get_int","","",null,null],[5,"duk_get_uint","","",null,null],[5,"duk_get_string","","",null,null],[5,"duk_get_lstring","","",null,null],[5,"duk_get_buffer","","",null,null],[5,"duk_get_buffer_data","","",null,null],[5,"duk_get_pointer","","",null,null],[5,"duk_get_c_function","","",null,null],[5,"duk_get_context","","",null,null],[5,"duk_get_heapptr","","",null,null],[5,"duk_get_length","","",null,null],[5,"duk_require_undefined","","",null,null],[5,"duk_require_null","","",null,null],[5,"duk_require_boolean","","",null,null],[5,"duk_require_number","","",null,null],[5,"duk_require_int","","",null,null],[5,"duk_require_uint","","",null,null],[5,"duk_require_string","","",null,null],[5,"duk_require_lstring","","",null,null],[5,"duk_require_buffer","","",null,null],[5,"duk_require_buffer_data","","",null,null],[5,"duk_require_pointer","","",null,null],[5,"duk_require_c_function","","",null,null],[5,"duk_require_context","","",null,null],[5,"duk_require_function","","",null,null],[5,"duk_require_heapptr","","",null,null],[5,"duk_to_undefined","","",null,null],[5,"duk_to_null","","",null,null],[5,"duk_to_boolean","","",null,null],[5,"duk_to_number","","",null,null],[5,"duk_to_int","","",null,null],[5,"duk_to_uint","","",null,null],[5,"duk_to_int32","","",null,null],[5,"duk_to_uint32","","",null,null],[5,"duk_to_uint16","","",null,null],[5,"duk_to_string","","",null,null],[5,"duk_to_lstring","","",null,null],[5,"duk_to_buffer_raw","","",null,null],[5,"duk_to_pointer","","",null,null],[5,"duk_to_object","","",null,null],[5,"duk_to_defaultvalue","","",null,null],[5,"duk_to_primitive","","",null,null],[5,"duk_safe_to_lstring","","",null,null],[5,"duk_base64_encode","","",null,null],[5,"duk_base64_decode","","",null,null],[5,"duk_hex_encode","","",null,null],[5,"duk_hex_decode","","",null,null],[5,"duk_json_encode","","",null,null],[5,"duk_json_decode","","",null,null],[5,"duk_resize_buffer","","",null,null],[5,"duk_steal_buffer","","",null,null],[5,"duk_config_buffer","","",null,null],[5,"duk_get_prop","","",null,null],[5,"duk_get_prop_string","","",null,null],[5,"duk_get_prop_index","","",null,null],[5,"duk_put_prop","","",null,null],[5,"duk_put_prop_string","","",null,null],[5,"duk_put_prop_index","","",null,null],[5,"duk_del_prop","","",null,null],[5,"duk_del_prop_string","","",null,null],[5,"duk_del_prop_index","","",null,null],[5,"duk_has_prop","","",null,null],[5,"duk_has_prop_string","","",null,null],[5,"duk_has_prop_index","","",null,null],[5,"duk_def_prop","","",null,null],[5,"duk_get_global_string","","",null,null],[5,"duk_put_global_string","","",null,null],[5,"duk_get_prototype","","",null,null],[5,"duk_set_prototype","","",null,null],[5,"duk_get_finalizer","","",null,null],[5,"duk_set_finalizer","","",null,null],[5,"duk_set_global_object","","",null,null],[5,"duk_get_magic","","",null,null],[5,"duk_set_magic","","",null,null],[5,"duk_get_current_magic","","",null,null],[5,"duk_put_function_list","","",null,null],[5,"duk_put_number_list","","",null,null],[5,"duk_compact","","",null,null],[5,"duk_enum","","",null,null],[5,"duk_next","","",null,null],[5,"duk_concat","","",null,null],[5,"duk_join","","",null,null],[5,"duk_decode_string","","",null,null],[5,"duk_map_string","","",null,null],[5,"duk_substring","","",null,null],[5,"duk_trim","","",null,null],[5,"duk_char_code_at","","",null,null],[5,"duk_equals","","",null,null],[5,"duk_strict_equals","","",null,null],[5,"duk_instanceof","","",null,null],[5,"duk_call","","",null,null],[5,"duk_call_method","","",null,null],[5,"duk_call_prop","","",null,null],[5,"duk_pcall","","",null,null],[5,"duk_pcall_method","","",null,null],[5,"duk_pcall_prop","","",null,null],[5,"duk_new","","",null,null],[5,"duk_pnew","","",null,null],[5,"duk_safe_call","","",null,null],[5,"duk_eval_raw","","",null,null],[5,"duk_compile_raw","","",null,null],[5,"duk_dump_function","","",null,null],[5,"duk_load_function","","",null,null],[5,"duk_push_context_dump","","",null,null],[5,"duk_debugger_attach","","",null,null],[5,"duk_debugger_detach","","",null,null],[5,"duk_debugger_cooperate","","",null,null],[5,"duk_debugger_notify","","",null,null],[5,"duk_debugger_pause","","",null,null],[5,"duk_get_now","","",null,null],[5,"duk_time_to_components","","",null,null],[5,"duk_components_to_time","","",null,null],[5,"duk_logging_init","","",null,null],[5,"duk_log_va","","",null,null],[5,"duk_log","","",null,null],[5,"duk_module_node_peval_main","","",null,null],[5,"duk_module_node_init","","",null,null],[5,"duk_create_heap_default","","",null,null],[5,"duk_xmove_top","","",null,null],[5,"duk_xcopy_top","","",null,null],[5,"duk_push_string_file","","",null,null],[5,"duk_push_thread","","",null,null],[5,"duk_push_thread_new_globalenv","","",null,null],[5,"duk_push_error_object","","",null,null],[5,"duk_push_buffer","","",null,null],[5,"duk_push_fixed_buffer","","",null,null],[5,"duk_push_dynamic_buffer","","",null,null],[5,"duk_push_external_buffer","","",null,null],[5,"duk_is_callable","","",null,null],[5,"duk_is_primitive","","",null,null],[5,"duk_is_object_coercible","","",null,null],[5,"duk_is_error","","",null,null],[5,"duk_is_eval_error","","",null,null],[5,"duk_is_range_error","","",null,null],[5,"duk_is_reference_error","","",null,null],[5,"duk_is_syntax_error","","",null,null],[5,"duk_is_type_error","","",null,null],[5,"duk_is_uri_error","","",null,null],[5,"duk_require_type_mask","","",null,null],[5,"duk_require_callable","","",null,null],[5,"duk_require_object_coercible","","",null,null],[5,"duk_to_buffer","","",null,null],[5,"duk_to_fixed_buffer","","",null,null],[5,"duk_to_dynamic_buffer","","",null,null],[5,"duk_safe_to_string","","",null,null],[5,"duk_eval","","",null,null],[5,"duk_eval_noresult","","",null,null],[5,"duk_peval","","",null,null],[5,"duk_peval_noresult","","",null,null],[5,"duk_compile","","",null,null],[5,"duk_pcompile","","",null,null],[5,"duk_eval_string","","",null,null],[5,"duk_eval_string_noresult","","",null,null],[5,"duk_peval_string","","",null,null],[5,"duk_peval_string_noresult","","",null,null],[5,"duk_compile_string","","",null,null],[5,"duk_compile_string_filename","","",null,null],[5,"duk_pcompile_string","","",null,null],[5,"duk_pcompile_string_filename","","",null,null],[5,"duk_eval_lstring","","",null,null],[5,"duk_eval_lstring_noresult","","",null,null],[5,"duk_peval_lstring","","",null,null],[5,"duk_peval_lstring_noresult","","",null,null],[5,"duk_compile_lstring","","",null,null],[5,"duk_compile_lstring_filename","","",null,null],[5,"duk_pcompile_lstring","","",null,null],[5,"duk_pcompile_lstring_filename","","",null,null],[5,"duk_eval_file","","",null,null],[5,"duk_eval_file_noresult","","",null,null],[5,"duk_peval_file","","",null,null],[5,"duk_peval_file_noresult","","",null,null],[5,"duk_compile_file","","",null,null],[5,"duk_pcompile_file","","",null,null],[5,"duk_dump_context_stdout","","",null,null],[5,"duk_dump_context_stderr","","",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"d","","",4,null],[11,"f","","",4,null],[11,"ull","","",4,null],[11,"ui","","",4,null],[11,"us","","",4,null],[11,"uc","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[6,"int_least8_t","","",null,null],[6,"int_least16_t","","",null,null],[6,"int_least32_t","","",null,null],[6,"int_least64_t","","",null,null],[6,"uint_least8_t","","",null,null],[6,"uint_least16_t","","",null,null],[6,"uint_least32_t","","",null,null],[6,"uint_least64_t","","",null,null],[6,"int_fast8_t","","",null,null],[6,"int_fast16_t","","",null,null],[6,"int_fast32_t","","",null,null],[6,"int_fast64_t","","",null,null],[6,"uint_fast8_t","","",null,null],[6,"uint_fast16_t","","",null,null],[6,"uint_fast32_t","","",null,null],[6,"uint_fast64_t","","",null,null],[6,"va_list","","",null,null],[6,"duk_uint8_t","","",null,null],[6,"duk_int8_t","","",null,null],[6,"duk_uint16_t","","",null,null],[6,"duk_int16_t","","",null,null],[6,"duk_uint32_t","","",null,null],[6,"duk_int32_t","","",null,null],[6,"duk_uint64_t","","",null,null],[6,"duk_int64_t","","",null,null],[6,"duk_uint_least8_t","","",null,null],[6,"duk_int_least8_t","","",null,null],[6,"duk_uint_least16_t","","",null,null],[6,"duk_int_least16_t","","",null,null],[6,"duk_uint_least32_t","","",null,null],[6,"duk_int_least32_t","","",null,null],[6,"duk_uint_least64_t","","",null,null],[6,"duk_int_least64_t","","",null,null],[6,"duk_uint_fast8_t","","",null,null],[6,"duk_int_fast8_t","","",null,null],[6,"duk_uint_fast16_t","","",null,null],[6,"duk_int_fast16_t","","",null,null],[6,"duk_uint_fast32_t","","",null,null],[6,"duk_int_fast32_t","","",null,null],[6,"duk_uint_fast64_t","","",null,null],[6,"duk_int_fast64_t","","",null,null],[6,"duk_uintptr_t","","",null,null],[6,"duk_intptr_t","","",null,null],[6,"duk_uintmax_t","","",null,null],[6,"duk_intmax_t","","",null,null],[6,"duk_size_t","","",null,null],[6,"duk_ptrdiff_t","","",null,null],[6,"duk_int_t","","",null,null],[6,"duk_uint_t","","",null,null],[6,"duk_int_fast_t","","",null,null],[6,"duk_uint_fast_t","","",null,null],[6,"duk_small_int_t","","",null,null],[6,"duk_small_uint_t","","",null,null],[6,"duk_small_int_fast_t","","",null,null],[6,"duk_small_uint_fast_t","","",null,null],[6,"duk_bool_t","","",null,null],[6,"duk_idx_t","","",null,null],[6,"duk_uidx_t","","",null,null],[6,"duk_uarridx_t","","",null,null],[6,"duk_ret_t","","",null,null],[6,"duk_errcode_t","","",null,null],[6,"duk_codepoint_t","","",null,null],[6,"duk_ucodepoint_t","","",null,null],[6,"duk_float_t","","",null,null],[6,"duk_double_t","","",null,null],[6,"duk_context","","",null,null],[6,"duk_c_function","","",null,null],[6,"duk_alloc_function","","",null,null],[6,"duk_realloc_function","","",null,null],[6,"duk_free_function","","",null,null],[6,"duk_fatal_function","","",null,null],[6,"duk_decode_char_function","","",null,null],[6,"duk_map_char_function","","",null,null],[6,"duk_safe_call_function","","",null,null],[6,"duk_debug_read_function","","",null,null],[6,"duk_debug_write_function","","",null,null],[6,"duk_debug_peek_function","","",null,null],[6,"duk_debug_read_flush_function","","",null,null],[6,"duk_debug_write_flush_function","","",null,null],[6,"duk_debug_request_function","","",null,null],[6,"duk_debug_detached_function","","",null,null]],"paths":[[3,"duk_memory_functions"],[3,"duk_function_list_entry"],[3,"duk_number_list_entry"],[3,"duk_time_components"],[3,"duk_double_union"]]};
searchIndex["serde_avro"] = {"doc":"","items":[[0,"de","serde_avro","",null,null],[3,"Deserializer","serde_avro::de","",null,null],[0,"read","","",null,null],[3,"Direct","serde_avro::de::read","",null,null],[3,"Blocks","","",null,null],[4,"Codec","","",null,null],[13,"Null","","",0,null],[13,"Deflate","","",0,null],[13,"Snappy","","",0,null],[8,"Limit","","",null,null],[10,"take_limit","","",1,null],[11,"parse","","",0,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"direct"}}],[11,"read","","",2,null],[11,"take_limit","","",2,null],[11,"new","","",3,{"inputs":[{"name":"r"},{"name":"codec"},{"name":"vec"}],"output":{"name":"blocks"}}],[11,"read","","",3,null],[11,"take_limit","","",3,null],[11,"new","serde_avro::de","",4,{"inputs":[{"name":"r"},{"name":"schemaregistry"},{"name":"schema"}],"output":{"name":"deserializer"}}],[11,"from_container","","",4,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",4,null],[11,"deserialize_f64","","",4,null],[11,"deserialize_f32","","",4,null],[11,"deserialize_u8","","",4,null],[11,"deserialize_u16","","",4,null],[11,"deserialize_u32","","",4,null],[11,"deserialize_u64","","",4,null],[11,"deserialize_usize","","",4,null],[11,"deserialize_i8","","",4,null],[11,"deserialize_i16","","",4,null],[11,"deserialize_i32","","",4,null],[11,"deserialize_i64","","",4,null],[11,"deserialize_isize","","",4,null],[11,"deserialize_char","","",4,null],[11,"deserialize_str","","",4,null],[11,"deserialize_string","","",4,null],[11,"deserialize_ignored_any","","",4,null],[11,"deserialize_bytes","","",4,null],[11,"deserialize_unit_struct","","",4,null],[11,"deserialize_unit","","",4,null],[11,"deserialize_seq","","",4,null],[11,"deserialize_seq_fixed_size","","",4,null],[11,"deserialize_map","","",4,null],[11,"deserialize_newtype_struct","","",4,null],[11,"deserialize_struct_field","","",4,null],[11,"deserialize_tuple","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_struct","","",4,null],[11,"deserialize_tuple_struct","","",4,null],[11,"deserialize_option","","",4,null],[11,"deserialize","","",4,null],[0,"error","serde_avro","",null,null],[3,"Error","serde_avro::error","",null,null],[12,"0","","",5,null],[12,"1","","",5,null],[4,"ErrorKind","","",null,null],[13,"Msg","","",6,null],[13,"IO","","",6,null],[13,"Utf8","","",6,null],[13,"JsonDecode","","",6,null],[13,"NoSuchType","","",6,null],[13,"InvalidSchema","","",6,null],[13,"BadFileMagic","","",6,null],[13,"NoSchema","","",6,null],[13,"NoRootType","","",6,null],[13,"UnsupportedCodec","","",6,null],[13,"FieldTypeMismatch","","",6,null],[13,"RequiredFieldMissing","","",6,null],[13,"DuplicateSchema","","",6,null],[13,"EndOfStream","","",6,null],[13,"IntegerOverflow","","",6,null],[13,"NegativeLength","","",6,null],[6,"Result","","",null,null],[8,"ChainErr","","",null,null],[10,"chain_err","","",7,null],[11,"fmt","","",5,null],[11,"kind","","",5,null],[11,"into_kind","","",5,null],[11,"iter","","",5,null],[11,"backtrace","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"chain_err","core::result","",8,null],[11,"custom","serde_avro::error","",5,{"inputs":[{"name":"s"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[0,"schema","serde_avro","",null,null],[3,"SchemaId","serde_avro::schema","",null,null],[3,"SchemaRegistry","","",null,null],[3,"RecordFields","","",null,null],[3,"RecordSchema","","",null,null],[3,"FieldSchema","","",null,null],[3,"EnumSchema","","",null,null],[3,"FixedSchema","","",null,null],[3,"EMPTY_REGISTRY","","",null,null],[3,"FILE_HEADER","","",null,null],[4,"SchemaRef","","",null,null],[13,"Direct","","",9,null],[13,"Indirect","","",9,null],[4,"Schema","","",null,null],[13,"Null","","",10,null],[13,"Boolean","","",10,null],[13,"Int","","",10,null],[13,"Long","","",10,null],[13,"Float","","",10,null],[13,"Double","","",10,null],[13,"Bytes","","",10,null],[13,"String","","",10,null],[13,"Record","","",10,null],[13,"Enum","","",10,null],[13,"Array","","",10,null],[13,"Map","","",10,null],[13,"Union","","",10,null],[13,"Fixed","","",10,null],[11,"partial_cmp","","",11,null],[11,"lt","","",11,null],[11,"le","","",11,null],[11,"gt","","",11,null],[11,"ge","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"cmp","","",11,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"deref","","",17,null],[11,"deref","","",18,null],[11,"resolve","","",9,null],[11,"into_resolved","","",9,null],[11,"new","","",12,{"inputs":[],"output":{"name":"schemaregistry"}}],[11,"from_json","","",12,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"add_json","","",12,null],[11,"schema_by_name","","",12,null],[11,"next","","",19,null],[11,"len","","",19,null],[11,"name","","",13,null],[11,"doc","","",13,null],[11,"fields","","",13,null],[11,"field_by_name","","",13,null],[11,"name","","",14,null],[11,"doc","","",14,null],[11,"field_type","","",14,null],[11,"default","","",14,null],[11,"name","","",15,null],[11,"doc","","",15,null],[11,"symbols","","",15,null],[11,"name","","",16,null],[11,"doc","","",16,null],[11,"size","","",16,null]],"paths":[[4,"Codec"],[8,"Limit"],[3,"Direct"],[3,"Blocks"],[3,"Deserializer"],[3,"Error"],[4,"ErrorKind"],[8,"ChainErr"],[4,"Result"],[4,"SchemaRef"],[4,"Schema"],[3,"SchemaId"],[3,"SchemaRegistry"],[3,"RecordSchema"],[3,"FieldSchema"],[3,"EnumSchema"],[3,"FixedSchema"],[3,"EMPTY_REGISTRY"],[3,"FILE_HEADER"],[3,"RecordFields"]]};
searchIndex["serde_json"] = {"doc":"JSON and serialization","items":[[0,"builder","serde_json","JSON Builders",null,null],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"build","","Return the constructed `Value`.",0,null],[11,"push","","Insert a value into the array.",0,null],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\nthis array.",0,null],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\nthis array.",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"build","","Return the constructed `Value`.",1,null],[11,"insert","","Insert a key-value pair into the object.",1,null],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\nthis object.",1,null],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\nthis object.",1,null],[0,"de","serde_json","JSON Deserialization",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Decodes a json value from an iterator over an iterator\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a json value from a byte slice `&amp;[u8]`.",null,null],[5,"from_str","","Decodes a json value from a `&amp;str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",2,null],[11,"deserialize","","",2,null],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,null],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,null],[11,"deserialize_enum","","Parses an enum as an object like `{&quot;$KEY&quot;:$VALUE}`, where $VALUE is either a straight\nvalue, a `[..]`, or a `{..}`.",2,null],[11,"deserialize_bool","","",2,null],[11,"deserialize_usize","","",2,null],[11,"deserialize_u8","","",2,null],[11,"deserialize_u16","","",2,null],[11,"deserialize_u32","","",2,null],[11,"deserialize_u64","","",2,null],[11,"deserialize_isize","","",2,null],[11,"deserialize_i8","","",2,null],[11,"deserialize_i16","","",2,null],[11,"deserialize_i32","","",2,null],[11,"deserialize_i64","","",2,null],[11,"deserialize_f32","","",2,null],[11,"deserialize_f64","","",2,null],[11,"deserialize_char","","",2,null],[11,"deserialize_str","","",2,null],[11,"deserialize_string","","",2,null],[11,"deserialize_unit","","",2,null],[11,"deserialize_seq","","",2,null],[11,"deserialize_seq_fixed_size","","",2,null],[11,"deserialize_bytes","","",2,null],[11,"deserialize_map","","",2,null],[11,"deserialize_unit_struct","","",2,null],[11,"deserialize_tuple_struct","","",2,null],[11,"deserialize_struct","","",2,null],[11,"deserialize_struct_field","","",2,null],[11,"deserialize_tuple","","",2,null],[11,"deserialize_ignored_any","","",2,null],[11,"new","","Returns an `Iterator` of decoded JSON values from an iterator over\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,null],[0,"error","serde_json","JSON Errors",null,null],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `&#39;:&#39;`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"NumberOutOfRange","","Number is bigger than the maximum value of its type.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a\nvalue into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_json","JSON Serialization",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `&quot;`",6,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",6,null],[13,"Solidus","","An escaped solidus `/`",6,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",6,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",6,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",6,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",6,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",6,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as\n`\\u00XX` where `XX` are two hex characters)",6,null],[5,"escape_str","","Serializes and escapes a `&amp;str` into a JSON string.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",7,null],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",7,null],[11,"write_integer","","Writes an integer value like `-123` to the specified writer.",7,null],[11,"write_floating","","Writes a floating point value like `-31.26e+12` to the\nspecified writer.",7,null],[11,"begin_string","","Called before each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",7,null],[11,"end_string","","Called after each series of `write_string_fragment` and\n`write_char_escape`.  Writes a `&quot;` to the specified writer.",7,null],[11,"write_string_fragment","","Writes a string fragment that doesn&#39;t need any escaping to the\nspecified writer.",7,null],[11,"write_char_escape","","Writes a character escape code to the specified writer.",7,null],[11,"begin_array","","Called before every array.  Writes a `[` to the specified\nwriter.",7,null],[11,"end_array","","Called after every array.  Writes a `]` to the specified\nwriter.",7,null],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to\nthe specified writer.",7,null],[11,"end_array_value","","Called after every array value.",7,null],[11,"begin_object","","Called before every object.  Writes a `{` to the specified\nwriter.",7,null],[11,"end_object","","Called after every object.  Writes a `}` to the specified\nwriter.",7,null],[11,"begin_object_key","","Called before every object key.",7,null],[11,"end_object_key","","Called after every object key.  A `:` should be written to the\nspecified writer by either this method or\n`begin_object_value`.",7,null],[11,"begin_object_value","","Called before every object value.  A `:` should be written to\nthe specified writer by either this method or\n`end_object_key`.",7,null],[11,"end_object_value","","Called after every object value.",7,null],[11,"new","","Creates a new JSON serializer.",8,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",8,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",8,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",8,null],[11,"serialize_bool","","",8,null],[11,"serialize_isize","","",8,null],[11,"serialize_i8","","",8,null],[11,"serialize_i16","","",8,null],[11,"serialize_i32","","",8,null],[11,"serialize_i64","","",8,null],[11,"serialize_usize","","",8,null],[11,"serialize_u8","","",8,null],[11,"serialize_u16","","",8,null],[11,"serialize_u32","","",8,null],[11,"serialize_u64","","",8,null],[11,"serialize_f32","","",8,null],[11,"serialize_f64","","",8,null],[11,"serialize_char","","",8,null],[11,"serialize_str","","",8,null],[11,"serialize_bytes","","",8,null],[11,"serialize_unit","","",8,null],[11,"serialize_unit_struct","","",8,null],[11,"serialize_unit_variant","","",8,null],[11,"serialize_newtype_struct","","Serialize newtypes without an object wrapper.",8,null],[11,"serialize_newtype_variant","","",8,null],[11,"serialize_none","","",8,null],[11,"serialize_some","","",8,null],[11,"serialize_seq","","",8,null],[11,"serialize_seq_elt","","",8,null],[11,"serialize_seq_end","","",8,null],[11,"serialize_seq_fixed_size","","",8,null],[11,"serialize_tuple","","",8,null],[11,"serialize_tuple_elt","","",8,null],[11,"serialize_tuple_end","","",8,null],[11,"serialize_tuple_struct","","",8,null],[11,"serialize_tuple_struct_elt","","",8,null],[11,"serialize_tuple_struct_end","","",8,null],[11,"serialize_tuple_variant","","",8,null],[11,"serialize_tuple_variant_elt","","",8,null],[11,"serialize_tuple_variant_end","","",8,null],[11,"serialize_map","","",8,null],[11,"serialize_map_key","","",8,null],[11,"serialize_map_value","","",8,null],[11,"serialize_map_end","","",8,null],[11,"serialize_struct","","",8,null],[11,"serialize_struct_elt","","",8,null],[11,"serialize_struct_end","","",8,null],[11,"serialize_struct_variant","","",8,null],[11,"serialize_struct_variant_elt","","",8,null],[11,"serialize_struct_variant_end","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",10,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",10,null],[11,"end_array","","",10,null],[11,"begin_array_value","","",10,null],[11,"end_array_value","","",10,null],[11,"begin_object","","",10,null],[11,"end_object","","",10,null],[11,"begin_object_key","","",10,null],[11,"begin_object_value","","",10,null],[11,"end_object_value","","",10,null],[0,"value","serde_json","JSON Value",null,null],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",11,null],[13,"Bool","","Represents a JSON Boolean",11,null],[13,"I64","","Represents a JSON signed integer",11,null],[13,"U64","","Represents a JSON unsigned integer",11,null],[13,"F64","","Represents a JSON floating point number",11,null],[13,"String","","Represents a JSON string",11,null],[13,"Array","","Represents a JSON array",11,null],[13,"Object","","Represents a JSON object",11,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[6,"Map","","Represents a key/value type.",null,null],[6,"MapIntoIter","","Represents the `IntoIter` type.",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",12,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",11,null],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",11,null],[11,"lookup","","**Deprecated**: Use `Value.pointer()` and pointer syntax instead.",11,null],[11,"pointer","","Looks up a value by a JSON Pointer.",11,null],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",11,null],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",11,null],[11,"as_object","","If the `Value` is an Object, returns the associated Map.\nReturns None otherwise.",11,null],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map.\nReturns None otherwise.",11,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",11,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",11,null],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",11,null],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",11,null],[11,"as_str","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",11,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",11,null],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",11,null],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",11,null],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",11,null],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",11,null],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",11,null],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",11,null],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",11,null],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",11,null],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",11,null],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",11,null],[11,"serialize","","",11,null],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",11,null],[11,"fmt","","Serializes a json value into a string",11,null],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",13,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"serialize_bool","","",13,null],[11,"serialize_isize","","",13,null],[11,"serialize_i8","","",13,null],[11,"serialize_i16","","",13,null],[11,"serialize_i32","","",13,null],[11,"serialize_i64","","",13,null],[11,"serialize_usize","","",13,null],[11,"serialize_u8","","",13,null],[11,"serialize_u16","","",13,null],[11,"serialize_u32","","",13,null],[11,"serialize_u64","","",13,null],[11,"serialize_f32","","",13,null],[11,"serialize_f64","","",13,null],[11,"serialize_char","","",13,null],[11,"serialize_str","","",13,null],[11,"serialize_bytes","","",13,null],[11,"serialize_unit","","",13,null],[11,"serialize_unit_struct","","",13,null],[11,"serialize_unit_variant","","",13,null],[11,"serialize_newtype_struct","","",13,null],[11,"serialize_newtype_variant","","",13,null],[11,"serialize_none","","",13,null],[11,"serialize_some","","",13,null],[11,"serialize_seq","","",13,null],[11,"serialize_seq_elt","","",13,null],[11,"serialize_seq_end","","",13,null],[11,"serialize_seq_fixed_size","","",13,null],[11,"serialize_tuple","","",13,null],[11,"serialize_tuple_elt","","",13,null],[11,"serialize_tuple_end","","",13,null],[11,"serialize_tuple_struct","","",13,null],[11,"serialize_tuple_struct_elt","","",13,null],[11,"serialize_tuple_struct_end","","",13,null],[11,"serialize_tuple_variant","","",13,null],[11,"serialize_tuple_variant_elt","","",13,null],[11,"serialize_tuple_variant_end","","",13,null],[11,"serialize_map","","",13,null],[11,"serialize_map_key","","",13,null],[11,"serialize_map_value","","",13,null],[11,"serialize_map_end","","",13,null],[11,"serialize_struct","","",13,null],[11,"serialize_struct_elt","","",13,null],[11,"serialize_struct_end","","",13,null],[11,"serialize_struct_variant","","",13,null],[11,"serialize_struct_variant_elt","","",13,null],[11,"serialize_struct_variant_end","","",13,null],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",14,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",14,null],[11,"deserialize_option","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_newtype_struct","","",14,null],[11,"deserialize_bool","","",14,null],[11,"deserialize_usize","","",14,null],[11,"deserialize_u8","","",14,null],[11,"deserialize_u16","","",14,null],[11,"deserialize_u32","","",14,null],[11,"deserialize_u64","","",14,null],[11,"deserialize_isize","","",14,null],[11,"deserialize_i8","","",14,null],[11,"deserialize_i16","","",14,null],[11,"deserialize_i32","","",14,null],[11,"deserialize_i64","","",14,null],[11,"deserialize_f32","","",14,null],[11,"deserialize_f64","","",14,null],[11,"deserialize_char","","",14,null],[11,"deserialize_str","","",14,null],[11,"deserialize_string","","",14,null],[11,"deserialize_unit","","",14,null],[11,"deserialize_seq","","",14,null],[11,"deserialize_seq_fixed_size","","",14,null],[11,"deserialize_bytes","","",14,null],[11,"deserialize_map","","",14,null],[11,"deserialize_unit_struct","","",14,null],[11,"deserialize_tuple_struct","","",14,null],[11,"deserialize_struct","","",14,null],[11,"deserialize_struct_field","","",14,null],[11,"deserialize_tuple","","",14,null],[11,"deserialize_ignored_any","","",14,null],[14,"forward_to_deserialize!","serde_json","",null,null]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,null],[14,"diyfp!","","",null,null],[14,"dtoa!","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["serde_hjson"] = {"doc":"JSON and serialization - TODO/hjson","items":[[0,"builder","serde_hjson","JSON Builders",null,null],[3,"ArrayBuilder","serde_hjson::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"unwrap","","Return the constructed `Value`.",0,null],[11,"push","","Insert a value into the array.",0,null],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\nthis array.",0,null],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\nthis array.",0,null],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"unwrap","","Return the constructed `Value`.",1,null],[11,"insert","","Insert a key-value pair into the object.",1,null],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\nthis object.",1,null],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\nthis object.",1,null],[0,"de","serde_hjson","Hjson Deserialization",null,null],[3,"Deserializer","serde_hjson::de","A structure that deserializes Hjson into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple Hjson values.",null,null],[5,"from_iter","","Decodes a Hjson value from an iterator over an iterator\n`Iterator&lt;Item=u8&gt;`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a Hjson value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a Hjson value from a byte slice `&amp;[u8]`.",null,null],[5,"from_str","","Decodes a Hjson value from a `&amp;str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the Hjson parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"new_for_root","","Creates the Hjson parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",2,null],[11,"deserialize","","",2,null],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,null],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,null],[11,"deserialize_enum","","Parses an enum as an object like `{&quot;$KEY&quot;:$VALUE}`, where $VALUE is either a straight\nvalue, a `[..]`, or a `{..}`.",2,null],[11,"deserialize_bool","","",2,null],[11,"deserialize_usize","","",2,null],[11,"deserialize_u8","","",2,null],[11,"deserialize_u16","","",2,null],[11,"deserialize_u32","","",2,null],[11,"deserialize_u64","","",2,null],[11,"deserialize_isize","","",2,null],[11,"deserialize_i8","","",2,null],[11,"deserialize_i16","","",2,null],[11,"deserialize_i32","","",2,null],[11,"deserialize_i64","","",2,null],[11,"deserialize_f32","","",2,null],[11,"deserialize_f64","","",2,null],[11,"deserialize_char","","",2,null],[11,"deserialize_str","","",2,null],[11,"deserialize_string","","",2,null],[11,"deserialize_unit","","",2,null],[11,"deserialize_seq","","",2,null],[11,"deserialize_seq_fixed_size","","",2,null],[11,"deserialize_bytes","","",2,null],[11,"deserialize_map","","",2,null],[11,"deserialize_unit_struct","","",2,null],[11,"deserialize_tuple_struct","","",2,null],[11,"deserialize_struct","","",2,null],[11,"deserialize_struct_field","","",2,null],[11,"deserialize_tuple","","",2,null],[11,"deserialize_ignored_any","","",2,null],[11,"visit_variant","","",2,null],[11,"visit_unit","","",2,null],[11,"visit_newtype","","",2,null],[11,"visit_tuple","","",2,null],[11,"visit_struct","","",2,null],[11,"new","","Returns an `Iterator` of decoded Hjson values from an iterator over\n`Iterator&lt;Item=u8&gt;`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,null],[0,"error","serde_hjson","JSON Errors",null,null],[4,"ErrorCode","serde_hjson::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `&#39;:&#39;`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[13,"PunctuatorInQlString","","Found a punctuator character when excpecting a quoteless string.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a\nvalue into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[13,"FromUtf8","","Some UTF8 error occurred while serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_hjson","Hjson Serialization",null,null],[3,"Serializer","serde_hjson::ser","A structure for serializing Rust values into Hjson.",null,null],[5,"escape_bytes","","Serializes and escapes a `&amp;[u8]` into a Hjson string.",null,null],[5,"quote_str","","Serializes and escapes a `&amp;str` into a Hjson string.",null,{"inputs":[{"name":"w"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[5,"ml_str","","Serializes and escapes a `&amp;str` into a multiline Hjson string.",null,{"inputs":[{"name":"w"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[5,"escape_key","","Serializes and escapes a `&amp;str` into a Hjson key.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a Hjson `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a Hjson `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a Hjson `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters",null,null],[10,"open","","Called when serializing a &#39;{&#39; or &#39;[&#39;.",6,null],[10,"comma","","Called when serializing a &#39;,&#39;.",6,null],[10,"colon","","Called when serializing a &#39;:&#39;.",6,null],[10,"close","","Called when serializing a &#39;}&#39; or &#39;]&#39;.",6,null],[10,"newline","","Newline with indent.",6,null],[10,"start_value","","Start a value.",6,null],[11,"new","","Creates a new Hjson serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new Hjson visitor whose output will be written to the writer\nspecified.",7,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,null],[11,"serialize_bool","","",7,null],[11,"serialize_isize","","",7,null],[11,"serialize_i8","","",7,null],[11,"serialize_i16","","",7,null],[11,"serialize_i32","","",7,null],[11,"serialize_i64","","",7,null],[11,"serialize_usize","","",7,null],[11,"serialize_u8","","",7,null],[11,"serialize_u16","","",7,null],[11,"serialize_u32","","",7,null],[11,"serialize_u64","","",7,null],[11,"serialize_f32","","",7,null],[11,"serialize_f64","","",7,null],[11,"serialize_char","","",7,null],[11,"serialize_str","","",7,null],[11,"serialize_bytes","","",7,null],[11,"serialize_unit","","",7,null],[11,"serialize_unit_struct","","",7,null],[11,"serialize_unit_variant","","",7,null],[11,"serialize_newtype_struct","","Serialize newtypes without an object wrapper.",7,null],[11,"serialize_newtype_variant","","",7,null],[11,"serialize_none","","",7,null],[11,"serialize_some","","",7,null],[11,"serialize_seq","","",7,null],[11,"serialize_seq_elt","","",7,null],[11,"serialize_seq_end","","",7,null],[11,"serialize_seq_fixed_size","","",7,null],[11,"serialize_tuple","","",7,null],[11,"serialize_tuple_elt","","",7,null],[11,"serialize_tuple_end","","",7,null],[11,"serialize_tuple_struct","","",7,null],[11,"serialize_tuple_struct_elt","","",7,null],[11,"serialize_tuple_struct_end","","",7,null],[11,"serialize_tuple_variant","","",7,null],[11,"serialize_tuple_variant_elt","","",7,null],[11,"serialize_tuple_variant_end","","",7,null],[11,"serialize_map","","",7,null],[11,"serialize_map_key","","",7,null],[11,"serialize_map_value","","",7,null],[11,"serialize_map_end","","",7,null],[11,"serialize_struct","","",7,null],[11,"serialize_struct_elt","","",7,null],[11,"serialize_struct_end","","",7,null],[11,"serialize_struct_variant","","",7,null],[11,"serialize_struct_variant_elt","","",7,null],[11,"serialize_struct_variant_end","","",7,null],[0,"value","serde_hjson","JSON Value",null,null],[3,"Serializer","serde_hjson::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",8,null],[13,"Bool","","Represents a JSON Boolean",8,null],[13,"I64","","Represents a JSON signed integer",8,null],[13,"U64","","Represents a JSON unsigned integer",8,null],[13,"F64","","Represents a JSON floating point number",8,null],[13,"String","","Represents a JSON string",8,null],[13,"Array","","Represents a JSON array",8,null],[13,"Object","","Represents a JSON object",8,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[6,"Map","","Represents a key/value type.",null,null],[6,"MapIntoIter","","Represents the IntoIter type.",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",9,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",8,null],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",8,null],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",8,null],[11,"lookup","","**Deprecated**: Use `Value.pointer()` and pointer syntax instead.",8,null],[11,"pointer","","Looks up a value by a JSON Pointer.",8,null],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",8,null],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",8,null],[11,"as_object","","If the `Value` is an Object, returns the associated Map.\nReturns None otherwise.",8,null],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map.\nReturns None otherwise.",8,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",8,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",8,null],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",8,null],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",8,null],[11,"as_str","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",8,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",8,null],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",8,null],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",8,null],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",8,null],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",8,null],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",8,null],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",8,null],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",8,null],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",8,null],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",8,null],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",8,null],[11,"serialize","","",8,null],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",8,null],[11,"fmt","","Serializes a json value into a string",8,null],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",10,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"serialize_bool","","",10,null],[11,"serialize_isize","","",10,null],[11,"serialize_i8","","",10,null],[11,"serialize_i16","","",10,null],[11,"serialize_i32","","",10,null],[11,"serialize_i64","","",10,null],[11,"serialize_usize","","",10,null],[11,"serialize_u8","","",10,null],[11,"serialize_u16","","",10,null],[11,"serialize_u32","","",10,null],[11,"serialize_u64","","",10,null],[11,"serialize_f32","","",10,null],[11,"serialize_f64","","",10,null],[11,"serialize_char","","",10,null],[11,"serialize_str","","",10,null],[11,"serialize_bytes","","",10,null],[11,"serialize_unit","","",10,null],[11,"serialize_unit_struct","","",10,null],[11,"serialize_unit_variant","","",10,null],[11,"serialize_newtype_struct","","",10,null],[11,"serialize_newtype_variant","","",10,null],[11,"serialize_none","","",10,null],[11,"serialize_some","","",10,null],[11,"serialize_seq","","",10,null],[11,"serialize_seq_elt","","",10,null],[11,"serialize_seq_end","","",10,null],[11,"serialize_seq_fixed_size","","",10,null],[11,"serialize_tuple","","",10,null],[11,"serialize_tuple_elt","","",10,null],[11,"serialize_tuple_end","","",10,null],[11,"serialize_tuple_struct","","",10,null],[11,"serialize_tuple_struct_elt","","",10,null],[11,"serialize_tuple_struct_end","","",10,null],[11,"serialize_tuple_variant","","",10,null],[11,"serialize_tuple_variant_elt","","",10,null],[11,"serialize_tuple_variant_end","","",10,null],[11,"serialize_map","","",10,null],[11,"serialize_map_key","","",10,null],[11,"serialize_map_value","","",10,null],[11,"serialize_map_end","","",10,null],[11,"serialize_struct","","",10,null],[11,"serialize_struct_elt","","",10,null],[11,"serialize_struct_end","","",10,null],[11,"serialize_struct_variant","","",10,null],[11,"serialize_struct_variant_elt","","",10,null],[11,"serialize_struct_variant_end","","",10,null],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",11,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",11,null],[11,"deserialize_option","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_newtype_struct","","",11,null],[11,"deserialize_bool","","",11,null],[11,"deserialize_usize","","",11,null],[11,"deserialize_u8","","",11,null],[11,"deserialize_u16","","",11,null],[11,"deserialize_u32","","",11,null],[11,"deserialize_u64","","",11,null],[11,"deserialize_isize","","",11,null],[11,"deserialize_i8","","",11,null],[11,"deserialize_i16","","",11,null],[11,"deserialize_i32","","",11,null],[11,"deserialize_i64","","",11,null],[11,"deserialize_f32","","",11,null],[11,"deserialize_f64","","",11,null],[11,"deserialize_char","","",11,null],[11,"deserialize_str","","",11,null],[11,"deserialize_string","","",11,null],[11,"deserialize_unit","","",11,null],[11,"deserialize_seq","","",11,null],[11,"deserialize_seq_fixed_size","","",11,null],[11,"deserialize_bytes","","",11,null],[11,"deserialize_map","","",11,null],[11,"deserialize_unit_struct","","",11,null],[11,"deserialize_tuple_struct","","",11,null],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,null],[11,"deserialize_tuple","","",11,null],[11,"deserialize_ignored_any","","",11,null],[14,"forward_to_deserialize!","serde_hjson","",null,null]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`&#39;s entries, with immutable references to the\nvalues.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`&#39;s entries, with mutable references to the\nvalues.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`&#39;s entries.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`&#39;s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`&#39;s values.",null,null],[0,"serde","","An optional implementation of serialization/deserialization. Reference\nimplementations used:",null,null],[3,"LinkedHashMapVisitor","linked_hash_map::serde","`serde::de::Visitor` for a linked hash map.",null,null],[11,"serialize","linked_hash_map","",0,null],[11,"new","linked_hash_map::serde","Creates a new visitor for a linked hash map.",1,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",1,null],[11,"visit_map","","",1,null],[11,"deserialize","linked_hash_map","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a linked hash map.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The\nmap may reserve more space to avoid frequent allocations.",0,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible\nwhile maintaining the internal rules and possibly leaving some space in accordance with the\nresize policy.",0,null],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is\nreturned.",0,null],[11,"contains_key","","Checks if the map contains the given key.",0,null],[11,"get","","Returns the value corresponding to the key in the map.",0,null],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",0,null],[11,"get_refresh","","Returns the value corresponding to the key in the map.",0,null],[11,"remove","","Removes and returns the value corresponding to the key from the map.",0,null],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",0,null],[11,"pop_front","","Removes the first entry.",0,null],[11,"front","","Gets the first entry.",0,null],[11,"pop_back","","Removes the last entry.",0,null],[11,"back","","Gets the last entry.",0,null],[11,"len","","Returns the number of key-value pairs in the map.",0,null],[11,"is_empty","","Returns whether the map is currently empty.",0,null],[11,"hasher","","Returns a reference to the map&#39;s hasher.",0,null],[11,"clear","","Clears the map of all key-value pairs.",0,null],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`",0,null],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`\n# Examples\n```\nuse linked_hash_map::LinkedHashMap;",0,null],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",0,null],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",0,null],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",0,null],[11,"extend","","",0,null],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"ge","","",0,null],[11,"gt","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"drop","","",0,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next_back","","",2,null],[11,"next_back","","",4,null],[11,"next_back","","",3,null],[11,"len","","",2,null],[11,"len","","",4,null],[11,"len","","",3,null],[11,"drop","","",3,null],[11,"clone","","",5,null],[11,"next","","",5,null],[11,"size_hint","","",5,null],[11,"next_back","","",5,null],[11,"len","","",5,null],[11,"clone","","",6,null],[11,"next","","",6,null],[11,"size_hint","","",6,null],[11,"next_back","","",6,null],[11,"len","","",6,null],[11,"into_iter","","",0,null]],"paths":[[3,"LinkedHashMap"],[3,"LinkedHashMapVisitor"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex["serde_test"] = {"doc":"","items":[[3,"Serializer","serde_test","",null,null],[3,"Deserializer","","",null,null],[4,"Token","","",null,null],[13,"Bool","","",0,null],[13,"Isize","","",0,null],[13,"I8","","",0,null],[13,"I16","","",0,null],[13,"I32","","",0,null],[13,"I64","","",0,null],[13,"Usize","","",0,null],[13,"U8","","",0,null],[13,"U16","","",0,null],[13,"U32","","",0,null],[13,"U64","","",0,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[13,"Char","","",0,null],[13,"Str","","",0,null],[13,"String","","",0,null],[13,"Bytes","","",0,null],[13,"Option","","",0,null],[13,"Unit","","",0,null],[13,"UnitStruct","","",0,null],[13,"StructNewType","","",0,null],[13,"EnumStart","","",0,null],[13,"EnumUnit","","",0,null],[13,"EnumNewType","","",0,null],[13,"SeqStart","","",0,null],[13,"SeqArrayStart","","",0,null],[13,"SeqSep","","",0,null],[13,"SeqEnd","","",0,null],[13,"TupleStart","","",0,null],[13,"TupleSep","","",0,null],[13,"TupleEnd","","",0,null],[13,"TupleStructStart","","",0,null],[13,"TupleStructSep","","",0,null],[13,"TupleStructEnd","","",0,null],[13,"MapStart","","",0,null],[13,"MapSep","","",0,null],[13,"MapEnd","","",0,null],[13,"StructStart","","",0,null],[13,"StructSep","","",0,null],[13,"StructEnd","","",0,null],[13,"EnumSeqStart","","",0,null],[13,"EnumSeqSep","","",0,null],[13,"EnumSeqEnd","","",0,null],[13,"EnumMapStart","","",0,null],[13,"EnumMapSep","","",0,null],[13,"EnumMapEnd","","",0,null],[4,"Error","","",null,null],[13,"Custom","","",1,null],[13,"InvalidValue","","",1,null],[13,"EndOfStream","","",1,null],[13,"InvalidType","","",1,null],[13,"InvalidLength","","",1,null],[13,"UnknownVariant","","",1,null],[13,"UnknownField","","",1,null],[13,"MissingField","","",1,null],[13,"DuplicateField","","",1,null],[13,"InvalidName","","",1,null],[13,"UnexpectedToken","","",1,null],[5,"assert_tokens","","",null,null],[5,"assert_ser_tokens","","",null,null],[5,"assert_ser_tokens_error","","Expect an error serializing `T`.",null,null],[5,"assert_de_tokens","","",null,null],[5,"assert_de_tokens_error","","Expect an error deserializing tokens into a `T`.",null,null],[11,"new","","",2,{"inputs":[{"name":"i"}],"output":{"name":"serializer"}}],[11,"next_token","","",2,null],[11,"serialize_unit","","",2,null],[11,"serialize_newtype_variant","","",2,null],[11,"serialize_unit_struct","","",2,null],[11,"serialize_unit_variant","","",2,null],[11,"serialize_bool","","",2,null],[11,"serialize_isize","","",2,null],[11,"serialize_i8","","",2,null],[11,"serialize_i16","","",2,null],[11,"serialize_i32","","",2,null],[11,"serialize_i64","","",2,null],[11,"serialize_usize","","",2,null],[11,"serialize_u8","","",2,null],[11,"serialize_u16","","",2,null],[11,"serialize_u32","","",2,null],[11,"serialize_u64","","",2,null],[11,"serialize_f32","","",2,null],[11,"serialize_f64","","",2,null],[11,"serialize_char","","",2,null],[11,"serialize_str","","",2,null],[11,"serialize_none","","",2,null],[11,"serialize_some","","",2,null],[11,"serialize_seq","","",2,null],[11,"serialize_seq_elt","","",2,null],[11,"serialize_seq_end","","",2,null],[11,"serialize_seq_fixed_size","","",2,null],[11,"serialize_tuple","","",2,null],[11,"serialize_tuple_elt","","",2,null],[11,"serialize_tuple_end","","",2,null],[11,"serialize_newtype_struct","","",2,null],[11,"serialize_tuple_struct","","",2,null],[11,"serialize_tuple_struct_elt","","",2,null],[11,"serialize_tuple_struct_end","","",2,null],[11,"serialize_tuple_variant","","",2,null],[11,"serialize_tuple_variant_elt","","",2,null],[11,"serialize_tuple_variant_end","","",2,null],[11,"serialize_map","","",2,null],[11,"serialize_map_key","","",2,null],[11,"serialize_map_value","","",2,null],[11,"serialize_map_end","","",2,null],[11,"serialize_struct","","",2,null],[11,"serialize_struct_elt","","",2,null],[11,"serialize_struct_end","","",2,null],[11,"serialize_struct_variant","","",2,null],[11,"serialize_struct_variant_elt","","",2,null],[11,"serialize_struct_variant_end","","",2,null],[11,"serialize_bytes","","",2,null],[11,"new","","",3,{"inputs":[{"name":"i"}],"output":{"name":"deserializer"}}],[11,"next_token","","",3,null],[11,"deserialize_seq","","",3,null],[11,"deserialize_struct_field","","",3,null],[11,"deserialize_map","","",3,null],[11,"deserialize_unit","","",3,null],[11,"deserialize_bytes","","",3,null],[11,"deserialize_ignored_any","","",3,null],[11,"deserialize_string","","",3,null],[11,"deserialize_str","","",3,null],[11,"deserialize_char","","",3,null],[11,"deserialize_i64","","",3,null],[11,"deserialize_i32","","",3,null],[11,"deserialize_i16","","",3,null],[11,"deserialize_i8","","",3,null],[11,"deserialize_u64","","",3,null],[11,"deserialize_u32","","",3,null],[11,"deserialize_u16","","",3,null],[11,"deserialize_u8","","",3,null],[11,"deserialize_f32","","",3,null],[11,"deserialize_f64","","",3,null],[11,"deserialize_bool","","",3,null],[11,"deserialize_usize","","",3,null],[11,"deserialize_isize","","",3,null],[11,"deserialize","","",3,null],[11,"deserialize_option","","Hook into `Option` deserializing so we can treat `Unit` as a\n`None`, or a regular value as `Some(value)`.",3,null],[11,"deserialize_enum","","",3,null],[11,"deserialize_unit_struct","","",3,null],[11,"deserialize_newtype_struct","","",3,null],[11,"deserialize_seq_fixed_size","","",3,null],[11,"deserialize_tuple","","",3,null],[11,"deserialize_tuple_struct","","",3,null],[11,"deserialize_struct","","",3,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"invalid_value","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",1,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"duplicate_field","","",1,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null]],"paths":[[4,"Token"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[11,"new","backtrace::capture","Captures a backtrace at the callsite of this function, returning an\nowned representation.",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",0,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"new","backtrace::symbolize","Creates a new symbol name from the raw underlying bytes.",3,null],[11,"as_str","","Returns the raw symbol name as `&amp;str` if the symbols is valid utf-8.",3,null],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"clone","backtrace::capture","",0,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"ip","","",4,null],[11,"symbol_address","","",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","",5,null],[11,"addr","","",5,null],[11,"filename","","",5,null],[11,"lineno","","",5,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"backtrace"}}],[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"ErrorChainIter","","",null,null],[12,"0","","",6,null],[5,"make_backtrace","","Returns a backtrace of the current call stack if `RUST_BACKTRACE`\nis set to anything but ``0``, and `None` otherwise.  This is used\nin the generated error implementations.",null,{"inputs":[],"output":{"name":"option"}}],[11,"next","","",6,null],[14,"quick_error!","","",null,null],[14,"error_chain!","","",null,null]],"paths":[[3,"Backtrace"],[8,"Frame"],[8,"Symbol"],[3,"SymbolName"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"],[3,"ErrorChainIter"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"SymbolName","backtrace","A wrapper around a symbol name to provide ergonomic accessors to the\ndemangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure\nprovided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified\nclosure.",null,null],[11,"new","","Creates a new symbol name from the raw underlying bytes.",0,null],[11,"as_str","","Returns the raw symbol name as `&amp;str` if the symbols is valid utf-8.",0,null],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an\nowned representation.",1,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",1,null],[11,"ip","","",2,null],[11,"symbol_address","","",2,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",2,null],[11,"name","","",3,null],[11,"addr","","",3,null],[11,"filename","","",3,null],[11,"lineno","","",3,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"backtrace"}}],[8,"Frame","","A trait representing one frame of a backtrace, yielded to the `trace`\nfunction of this crate.",null,null],[10,"ip","","Returns the current instruction pointer of this frame.",4,null],[10,"symbol_address","","Returns the starting symbol address of the frame of this function.",4,null],[8,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[11,"name","","Returns the name of this function.",5,null],[11,"addr","","Returns the starting address of this function.",5,null],[11,"filename","","Returns the file name where this function was defined.",5,null],[11,"lineno","","Returns the line number for where this symbol is currently executing.",5,null],[11,"fmt","","",4,null],[11,"name","","Returns the name of this function.",5,null],[11,"addr","","Returns the starting address of this function.",5,null],[11,"filename","","Returns the file name where this function was defined.",5,null],[11,"lineno","","Returns the line number for where this symbol is currently executing.",5,null],[11,"fmt","","",5,null]],"paths":[[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"],[8,"Frame"],[8,"Symbol"]]};
searchIndex["serde_cbor"] = {"doc":"CBOR and serialization.","items":[[0,"de","serde_cbor","CBOR deserialization.",null,null],[3,"Deserializer","serde_cbor::de","A structure that deserializes CBOR into Rust values.",null,null],[5,"from_reader","","Decodes a CBOR value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a CBOR value from a `&amp;[u8]` slice.",null,null],[11,"new","","Creates the CBOR parser from an `std::io::Read`.",0,{"inputs":[{"name":"r"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end.",0,null],[11,"deserialize_bool","","",0,null],[11,"deserialize_isize","","",0,null],[11,"deserialize_i8","","",0,null],[11,"deserialize_i16","","",0,null],[11,"deserialize_i32","","",0,null],[11,"deserialize_i64","","",0,null],[11,"deserialize_usize","","",0,null],[11,"deserialize_u8","","",0,null],[11,"deserialize_u16","","",0,null],[11,"deserialize_u32","","",0,null],[11,"deserialize_u64","","",0,null],[11,"deserialize_f32","","",0,null],[11,"deserialize_f64","","",0,null],[11,"deserialize_char","","",0,null],[11,"deserialize_str","","",0,null],[11,"deserialize_string","","",0,null],[11,"deserialize_unit","","",0,null],[11,"deserialize_seq","","",0,null],[11,"deserialize_bytes","","",0,null],[11,"deserialize_map","","",0,null],[11,"deserialize_struct_field","","",0,null],[11,"deserialize_ignored_any","","",0,null],[11,"deserialize","","",0,null],[11,"deserialize_option","","",0,null],[11,"deserialize_newtype_struct","","",0,null],[11,"deserialize_enum","","",0,null],[11,"deserialize_seq_fixed_size","","",0,null],[11,"deserialize_unit_struct","","",0,null],[11,"deserialize_struct","","",0,null],[11,"deserialize_tuple_struct","","",0,null],[11,"deserialize_tuple","","",0,null],[11,"read","","",0,null],[0,"error","serde_cbor","CBOR errors.",null,null],[4,"Error","serde_cbor::error","Represents all possible errors that can occur when serializing or deserializing a value.",null,null],[13,"Syntax","","The CBOR value had a syntactic error.",1,null],[13,"Io","","Some IO error occured when processing a value.",1,null],[13,"FromUtf8","","Some error occured while converting a string.",1,null],[13,"Custom","","A custom error provided by serde occured.",1,null],[13,"Eof","","The data source contains not enough bytes to parse a value.",1,null],[13,"StopCode","","Break stop code encountered.",1,null],[13,"TrailingBytes","","The data source contains trailing bytes after all values were read.",1,null],[6,"Result","","Helper alias for Result objects that return a JSON Error.",null,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_cbor","CBOR serializisation.",null,null],[3,"Serializer","serde_cbor::ser","A structure for serializing Rust values into CBOR.",null,null],[3,"StructState","","Structs are record types. They are serialized as key value pairs.",null,null],[4,"CollectionState","","A collection like an array or map may have a fixed or indefinite length.",null,null],[13,"Fixed","","Fixed collections end after all elements were serialized.",2,null],[13,"Indefinite","","Indefinite collections are terminated by a stop code after the last element.",2,null],[5,"to_writer","","Serializes a value to a writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_sd","","Serializes a value to a writer and add a CBOR self-describe tag.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_packed","","Serializes a value without names to a writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_packed_sd","","Serializes a value without names to a writer and add a CBOR self-describe tag.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serializes a value to a vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_sd","","Serializes a value to a vector and add a CBOR self-describe tag.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_packed","","Serializes a value without names to a vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_packed_sd","","Serializes a value without names to a vector and add a CBOR self-describe tag.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"new","","Creates a new CBOR serializer.",3,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"packed","","Creates a new packed CBOR serializer.",3,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"self_describe","","Writes the CBOR self-describe tag to the stream.",3,null],[11,"serialize_bool","","",3,null],[11,"serialize_isize","","",3,null],[11,"serialize_i8","","",3,null],[11,"serialize_i16","","",3,null],[11,"serialize_i32","","",3,null],[11,"serialize_i64","","",3,null],[11,"serialize_usize","","",3,null],[11,"serialize_u8","","",3,null],[11,"serialize_u16","","",3,null],[11,"serialize_u32","","",3,null],[11,"serialize_u64","","",3,null],[11,"serialize_f32","","",3,null],[11,"serialize_f64","","",3,null],[11,"serialize_char","","",3,null],[11,"serialize_str","","",3,null],[11,"serialize_bytes","","",3,null],[11,"serialize_unit","","",3,null],[11,"serialize_unit_struct","","",3,null],[11,"serialize_unit_variant","","",3,null],[11,"serialize_newtype_struct","","",3,null],[11,"serialize_newtype_variant","","",3,null],[11,"serialize_none","","",3,null],[11,"serialize_some","","",3,null],[11,"serialize_seq","","",3,null],[11,"serialize_seq_elt","","",3,null],[11,"serialize_seq_end","","",3,null],[11,"serialize_seq_fixed_size","","",3,null],[11,"serialize_tuple","","",3,null],[11,"serialize_tuple_elt","","",3,null],[11,"serialize_tuple_end","","",3,null],[11,"serialize_tuple_struct","","",3,null],[11,"serialize_tuple_struct_elt","","",3,null],[11,"serialize_tuple_struct_end","","",3,null],[11,"serialize_tuple_variant","","",3,null],[11,"serialize_tuple_variant_elt","","",3,null],[11,"serialize_tuple_variant_end","","",3,null],[11,"serialize_map","","",3,null],[11,"serialize_map_key","","",3,null],[11,"serialize_map_value","","",3,null],[11,"serialize_map_end","","",3,null],[11,"serialize_struct","","",3,null],[11,"serialize_struct_elt","","",3,null],[11,"serialize_struct_end","","",3,null],[11,"serialize_struct_variant","","",3,null],[11,"serialize_struct_variant_elt","","",3,null],[11,"serialize_struct_variant_end","","",3,null],[0,"value","serde_cbor","CBOR values and keys.",null,null],[4,"Value","serde_cbor::value","An enum over all possible CBOR types.",null,null],[13,"U64","","Represents an unsigned integer.",4,null],[13,"I64","","Represents a signed integer.",4,null],[13,"Bytes","","Represents a byte string.",4,null],[13,"String","","Represents an UTF-8 string.",4,null],[13,"Array","","Represents a list.",4,null],[13,"Object","","Represents a map.",4,null],[13,"F64","","Represents a floating point value.",4,null],[13,"Bool","","Represents a boolean value.",4,null],[13,"Null","","Represents the absence of a value or the value undefined.",4,null],[4,"ObjectKey","","A simplified CBOR value containing only types useful for keys.",null,null],[13,"Integer","","An integer.",5,null],[13,"Bytes","","A byte string.",5,null],[13,"String","","An UTF-8 string.",5,null],[13,"Bool","","A boolean value.",5,null],[13,"Null","","No value.",5,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"is_object","","Returns true if the value is an object.",4,null],[11,"as_object","","If the value is an object, returns the associated BTreeMap. Returns None otherwise.",4,null],[11,"as_object_mut","","If the value is an object, returns the associated mutable BTreeMap. Returns None otherwise.",4,null],[11,"is_array","","Returns true if the value is an array.",4,null],[11,"as_array","","If the value is an array, returns the associated Vec. Returns None otherwise.",4,null],[11,"as_array_mut","","If the value is an array, returns the associated mutable Vec. Returns None otherwise.",4,null],[11,"is_bytes","","Returns true if the value is a byte string.",4,null],[11,"as_bytes","","Returns the associated byte string or `None` if the value has a different type.",4,null],[11,"as_bytes_mut","","Returns the associated mutable byte string or `None` if the value has a different type.",4,null],[11,"is_string","","Returns true if the value is a string.",4,null],[11,"as_string","","Returns the associated string or `None` if the value has a different type.",4,null],[11,"as_string_mut","","Returns the associated mutable string or `None` if the value has a different type.",4,null],[11,"is_number","","Retrns true if the value is a number.",4,null],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",4,null],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",4,null],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",4,null],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64. Returns None otherwise.",4,null],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64. Returns None otherwise.",4,null],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64. Returns None otherwise.",4,null],[11,"is_boolean","","Returns true if the value is a boolean.",4,null],[11,"as_boolean","","If the value is a Boolean, returns the associated bool. Returns None otherwise.",4,null],[11,"is_null","","Returns true if the value is a Null. Returns false otherwise.",4,null],[11,"as_null","","If the value is a Null, returns (). Returns None otherwise.",4,null],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",4,null],[11,"hash","","",5,null],[11,"cmp","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"is_bytes","","Returns true if the ObjectKey is a byte string.",5,null],[11,"as_bytes","","Returns the associated byte string or `None` if the ObjectKey has a different type.",5,null],[11,"as_bytes_mut","","Returns the associated mutable byte string or `None` if the ObjectKey has a different type.",5,null],[11,"is_string","","Returns true if the ObjectKey is a string.",5,null],[11,"as_string","","Returns the associated string or `None` if the *ObjectKey` has a different type.",5,null],[11,"as_string_mut","","Returns the associated mutable string or `None` if the `ObjectKey` has a different type.",5,null],[11,"is_number","","Retrns true if the `ObjectKey` is a number.",5,null],[11,"as_i64","","If the `ObjectKey` is a number, return or cast it to a i64. Returns None otherwise.",5,null],[11,"as_u64","","If the `ObjectKey` is a number, return or cast it to a u64. Returns None otherwise.",5,null],[11,"is_boolean","","Returns true if the ObjectKey is a boolean.",5,null],[11,"as_boolean","","If the ObjectKey is a Boolean, returns the associated bool. Returns None otherwise.",5,null],[11,"is_null","","Returns true if the ObjectKey is a Null. Returns false otherwise.",5,null],[11,"as_null","","If the ObjectKey is a Null, returns (). Returns None otherwise.",5,null],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",5,null],[11,"from","","",4,{"inputs":[{"name":"objectkey"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"value"}],"output":{"name":"objectkey"}}]],"paths":[[3,"Deserializer"],[4,"Error"],[4,"CollectionState"],[3,"Serializer"],[4,"Value"],[4,"ObjectKey"]]};
searchIndex["serde_yaml"] = {"doc":"","items":[[11,"as_bool","yaml_rust::yaml","",0,null],[11,"as_i64","","",0,null],[11,"as_str","","",0,null],[11,"as_hash","","",0,null],[11,"as_vec","","",0,null],[11,"is_null","","",0,null],[11,"is_badvalue","","",0,null],[11,"as_f64","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"hash","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"on_event","","",1,null],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"index","","",0,null],[11,"index","","",0,null],[11,"fmt","yaml_rust::scanner","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","",5,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"fmt","","",8,null],[11,"next","","",8,null],[11,"new","","Creates the YAML tokenizer.",8,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",8,null],[11,"stream_started","","",8,null],[11,"stream_ended","","",8,null],[11,"mark","","",8,null],[11,"fetch_next_token","","",8,null],[11,"next_token","","",8,null],[11,"fetch_more_tokens","","",8,null],[11,"fmt","yaml_rust::parser","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",10,null],[11,"fmt","yaml_rust::emitter","",11,null],[11,"clone","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"emiterror"}}],[11,"new","","",12,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",12,null],[4,"Yaml","serde_yaml","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to\naccess your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand.\nNote that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This\nsimplifies error handling in the calling code. Invalid type conversion also\nreturns `BadValue`.",0,null],[0,"de","","YAML Deserialization",null,null],[3,"Deserializer","serde_yaml::de","A structure for deserializing a YAML value into a Rust value.",null,null],[5,"from_str","","Decodes a YAML value from a `&amp;str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"from_iter","","",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","",null,null],[11,"new","","Creates the YAML deserializer from an in-memory `Yaml`.",13,{"inputs":[{"name":"yaml"}],"output":{"name":"self"}}],[11,"deserialize","","",13,null],[11,"deserialize_option","","Parses `null` as None and any other values as `Some(...)`.",13,null],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",13,null],[11,"deserialize_enum","","Parses an enum as a single key:value pair where the key identifies the\nvariant and the value gives the content. A String will also parse correctly\nto a unit enum value.",13,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_usize","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_isize","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_seq_fixed_size","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_ignored_any","","",13,null],[0,"ser","serde_yaml","YAML Serialization",null,null],[3,"Serializer","serde_yaml::ser","A structure for serializing a Rust value into a YAML value.",null,null],[5,"to_writer","","",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"take","","",14,null],[11,"serialize_bool","","",14,null],[11,"serialize_isize","","",14,null],[11,"serialize_i8","","",14,null],[11,"serialize_i16","","",14,null],[11,"serialize_i32","","",14,null],[11,"serialize_i64","","",14,null],[11,"serialize_usize","","",14,null],[11,"serialize_u8","","",14,null],[11,"serialize_u16","","",14,null],[11,"serialize_u32","","",14,null],[11,"serialize_u64","","",14,null],[11,"serialize_f32","","",14,null],[11,"serialize_f64","","",14,null],[11,"serialize_char","","",14,null],[11,"serialize_str","","",14,null],[11,"serialize_bytes","","",14,null],[11,"serialize_unit","","",14,null],[11,"serialize_unit_struct","","",14,null],[11,"serialize_unit_variant","","",14,null],[11,"serialize_newtype_struct","","",14,null],[11,"serialize_newtype_variant","","",14,null],[11,"serialize_none","","",14,null],[11,"serialize_some","","",14,null],[11,"serialize_seq","","",14,null],[11,"serialize_seq_elt","","",14,null],[11,"serialize_seq_end","","",14,null],[11,"serialize_seq_fixed_size","","",14,null],[11,"serialize_tuple","","",14,null],[11,"serialize_tuple_elt","","",14,null],[11,"serialize_tuple_end","","",14,null],[11,"serialize_tuple_struct","","",14,null],[11,"serialize_tuple_struct_elt","","",14,null],[11,"serialize_tuple_struct_end","","",14,null],[11,"serialize_tuple_variant","","",14,null],[11,"serialize_tuple_variant_elt","","",14,null],[11,"serialize_tuple_variant_end","","",14,null],[11,"serialize_map","","",14,null],[11,"serialize_map_key","","",14,null],[11,"serialize_map_value","","",14,null],[11,"serialize_map_end","","",14,null],[11,"serialize_struct","","",14,null],[11,"serialize_struct_elt","","",14,null],[11,"serialize_struct_end","","",14,null],[11,"serialize_struct_variant","","",14,null],[11,"serialize_struct_variant_elt","","",14,null],[11,"serialize_struct_variant_end","","",14,null],[0,"value","serde_yaml","",null,null],[4,"Value","serde_yaml::value","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to\naccess your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand.\nNote that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This\nsimplifies error handling in the calling code. Invalid type conversion also\nreturns `BadValue`.",0,null],[5,"to_value","","Shortcut function to encode a `T` into a YAML `Value`.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a YAML `Value` into a `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[0,"error","serde_yaml","",null,null],[4,"Error","serde_yaml::error","This type represents all possible errors that can occur when serializing or\ndeserializing a value using YAML.",null,null],[13,"Custom","","",15,null],[13,"EndOfStream","","",15,null],[13,"Emit","","",15,null],[13,"Scan","","",15,null],[13,"Io","","",15,null],[13,"Utf8","","",15,null],[13,"FromUtf8","","",15,null],[13,"AliasUnsupported","","",15,null],[13,"TooManyDocuments","","",15,null],[13,"VariantMapWrongSize","","",15,null],[13,"VariantNotAMapOrString","","",15,null],[6,"Result","","Helper alias for `Result` objects that return a YAML `Error`.",null,null],[11,"fmt","","",15,null],[11,"description","","",15,null],[11,"cause","","",15,null],[11,"fmt","","",15,null],[11,"from","","",15,{"inputs":[{"name":"emiterror"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"scanerror"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"custom","","",15,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",15,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",15,{"inputs":[],"output":{"name":"self"}}],[14,"forward_to_deserialize!","serde_yaml","",null,null]],"paths":[[4,"Value"],[3,"YamlLoader"],[4,"TEncoding"],[4,"TScalarStyle"],[3,"Marker"],[3,"ScanError"],[4,"TokenType"],[3,"Token"],[3,"Scanner"],[4,"Event"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"],[3,"Deserializer"],[3,"Serializer"],[4,"Error"]]};
searchIndex["dbghelp"] = {"doc":"","items":[],"paths":[]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,null],[11,"format","","Sets the format function for formatting the log output.",0,null],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,null],[11,"init","","Initializes the global logger with an env logger.",0,null],[11,"build","","Build an env logger.",0,null],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,null],[11,"enabled","","",1,null],[11,"log","","",1,null]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["docopt"] = {"doc":"Docopt for Rust. This implementation conforms to the\n[official description of Docopt](http://docopt.org/) and\n[passes its test suite](https://github.com/docopt/docopt/pull/201).","items":[[3,"ArgvMap","docopt","A map containing matched values from command line arguments.",null,null],[3,"Decoder","","Decoder for `ArgvMap` into your own `Decodable` types.",null,null],[3,"Docopt","","The main Docopt type, which is constructed with a Docopt usage string.",null,null],[4,"Error","","Represents the different types of Docopt errors.",null,null],[13,"Usage","","Parsing the usage string failed.",0,null],[13,"Argv","","Parsing the argv specified failed.",0,null],[13,"NoMatch","","The given argv parsed successfully, but it did not match any example\nusage of the program.",0,null],[13,"Decode","","This indicates a problem decoding a successful argv match into a\ndecodable value.",0,null],[13,"WithProgramUsage","","Parsing failed, and the program usage should be printed next to the\nfailure message. Typically this wraps `Argv` and `NoMatch` errors.",0,null],[13,"Help","","Decoding or parsing failed because the command line specified that the\nhelp message should be printed.",0,null],[13,"Version","","Decoding or parsing failed because the command line specified that the\nversion should be printed",0,null],[4,"Value","","A matched command line value.",null,null],[13,"Switch","","A boolean value from a flag that has no argument.",1,null],[13,"Counted","","The number of occurrences of a repeated flag.",1,null],[13,"Plain","","A positional or flag argument.",1,null],[13,"List","","A List of positional or flag arguments.",1,null],[11,"fmt","","",0,null],[11,"fatal","","Return whether this was a fatal error or not.",0,null],[11,"exit","","Print this error and immediately exit the program.",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"new","","Parse the Docopt usage string given.",2,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","Parse and decode the given argv.",2,null],[11,"parse","","Parse command line arguments and try to match them against a usage\npattern specified in the Docopt string.",2,null],[11,"argv","","Set the argv to be used for Docopt parsing.",2,null],[11,"options_first","","Enables the &quot;options first&quot; Docopt behavior.",2,null],[11,"help","","Enables automatic handling of `--help`.",2,null],[11,"version","","Enables automatic handling of `--version`.",2,null],[11,"clone","","",3,null],[11,"decode","","Tries to decode the map of values into a struct.",3,null],[11,"get_bool","","Finds the value corresponding to `key` and calls `as_bool()` on it.\nIf the key does not exist, `false` is returned.",3,null],[11,"get_count","","Finds the value corresponding to `key` and calls `as_count()` on it.\nIf the key does not exist, `0` is returned.",3,null],[11,"get_str","","Finds the value corresponding to `key` and calls `as_str()` on it.\nIf the key does not exist, `&quot;&quot;` is returned.",3,null],[11,"get_vec","","Finds the value corresponding to `key` and calls `as_vec()` on it.\nIf the key does not exist, `vec!()` is returned.",3,null],[11,"find","","Return the raw value corresponding to some `key`.",3,null],[11,"len","","Return the number of values, not including synonyms.",3,null],[11,"fmt","","",3,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"as_bool","","Returns the value as a bool.",1,null],[11,"as_count","","Returns the value as a count of the number of times it occurred.",1,null],[11,"as_str","","Returns the value as a string.",1,null],[11,"as_vec","","Returns the value as a list of strings.",1,null],[11,"error","","",4,null],[11,"read_nil","","",4,null],[11,"read_usize","","",4,null],[11,"read_u64","","",4,null],[11,"read_u32","","",4,null],[11,"read_u16","","",4,null],[11,"read_u8","","",4,null],[11,"read_isize","","",4,null],[11,"read_i64","","",4,null],[11,"read_i32","","",4,null],[11,"read_i16","","",4,null],[11,"read_i8","","",4,null],[11,"read_bool","","",4,null],[11,"read_f64","","",4,null],[11,"read_f32","","",4,null],[11,"read_char","","",4,null],[11,"read_str","","",4,null],[11,"read_enum","","",4,null],[11,"read_enum_variant","","",4,null],[11,"read_enum_variant_arg","","",4,null],[11,"read_enum_struct_variant","","",4,null],[11,"read_enum_struct_variant_field","","",4,null],[11,"read_struct","","",4,null],[11,"read_struct_field","","",4,null],[11,"read_tuple","","",4,null],[11,"read_tuple_arg","","",4,null],[11,"read_tuple_struct","","",4,null],[11,"read_tuple_struct_arg","","",4,null],[11,"read_option","","",4,null],[11,"read_seq","","",4,null],[11,"read_seq_elt","","",4,null],[11,"read_map","","",4,null],[11,"read_map_elt_key","","",4,null],[11,"read_map_elt_val","","",4,null]],"paths":[[4,"Error"],[4,"Value"],[3,"Docopt"],[3,"ArgvMap"],[3,"Decoder"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::re_bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","regex::bytes","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"next_back","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"next_back","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"next_back","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"next_back","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of\nbytes was not a valid input stream of bytes.",null,null],[4,"Status","","Possible status results of compressing some data or successfully\ndecompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output\nbuffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have\nbeen written. Decompression/compression should not be called again.",0,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or\ndecompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions,\nthis indicates that the underlying stream to decide how much data to\naccumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is\naligned on a byte boundary so that the decompressor can get all input\ndata available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is\nnot aligned to a byte boundary.",1,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the\noutput is not aligned on a byte boundary and up to seven vits of the\ncurrent block are held to be written as the next byte after the next\ndeflate block is completed.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is\nreset so decompression can restart from this point if previous\ncompressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in\nthis enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data\nslightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"new","","Create a new blank builder with no header by default.",3,{"inputs":[],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",3,null],[11,"extra","","Configure the `extra` field in the gzip header.",3,null],[11,"filename","","Configure the `filename` field in the gzip header.",3,null],[11,"comment","","Configure the `comment` field in the gzip header.",3,null],[11,"write","","Consume this builder, creating a writer encoder in the process.",3,null],[11,"read","","Consume this builder, creating a reader encoder in the process.",3,null],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",3,null],[11,"filename","","Returns the `filename` field of this gzip stream&#39;s header, if present.",4,null],[11,"extra","","Returns the `extra` field of this gzip stream&#39;s header, if present.",4,null],[11,"comment","","Returns the `comment` field of this gzip stream&#39;s header, if present.",4,null],[11,"mtime","","Returns the `mtime` field of this gzip stream&#39;s header, if present.",4,null],[11,"fmt","","",5,null],[11,"new","","Creates a new object ready for compressing data that it&#39;s given.",6,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis compression object.",6,null],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis compression object.",6,null],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",6,null],[11,"compress","","Compresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",6,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming\nonly as much input as needed and writing as much output as possible.",6,null],[11,"new","","Creates a new object ready for decompressing data that it&#39;s given.",7,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis decompression object.",7,null],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis decompression object.",7,null],[11,"decompress","","Decompresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",7,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector\nspecified by `output`.",7,null],[11,"description","","",5,null],[11,"fmt","","",5,null],[0,"read","","Types which operate over `Read` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[0,"write","flate2","Types which operate over `Write` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over `BufRead` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,null],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",8,null],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,null],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",8,null],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,null],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",8,null],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,null],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,null],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",9,null],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,null],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",9,null],[11,"clone","","",2,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",10,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",10,null],[11,"finish","","Consumes this encoder, flushing the output stream.",10,null],[11,"write","","",10,null],[11,"flush","","",10,null],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",11,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",11,null],[11,"get_ref","","Acquires a reference to the underlying reader",11,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",11,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",11,null],[11,"read","","",11,null],[11,"new","flate2::bufread","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",12,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreaderbuf"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",12,null],[11,"get_ref","","Acquires a reference to the underlying reader",12,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,null],[11,"read","","",12,null],[11,"new","flate2::read","Creates a new decoder which will decompress data read from the given\nstream.",13,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",13,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",13,null],[11,"get_ref","","Acquires a reference to the underlying stream",13,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,null],[11,"read","","",13,null],[11,"new","flate2::bufread","Creates a new decoder which will decompress data read from the given\nstream.",14,{"inputs":[{"name":"r"}],"output":{"name":"decoderreaderbuf"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",14,null],[11,"get_ref","","Acquires a reference to the underlying stream",14,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",14,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",14,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",14,null],[11,"read","","",14,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",15,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",15,null],[11,"finish","","Consumes this encoder, flushing the output stream.",15,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",15,null],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",15,null],[11,"write","","",15,null],[11,"flush","","",15,null],[11,"new","","Creates a new encoder which will use the given compression level.",16,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the\nencoding is done.",16,null],[11,"write","","",16,null],[11,"flush","","",16,null],[11,"drop","","",16,null],[11,"new","flate2::read","Creates a new encoder which will use the given compression level.",17,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",17,null],[11,"read","","",17,null],[11,"new","flate2::bufread","Creates a new encoder which will use the given compression level.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreaderbuf"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,null],[11,"read","","",18,null],[11,"new","flate2::read","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",19,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",19,null],[11,"read","","",19,null],[11,"new","flate2::bufread","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",20,null],[11,"read","","",20,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",21,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",21,null],[11,"finish","","Consumes this encoder, flushing the output stream.",21,null],[11,"write","","",21,null],[11,"flush","","",21,null],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",22,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",22,null],[11,"get_ref","","Acquires a reference to the underlying stream",22,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",22,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",22,null],[11,"read","","",22,null],[11,"new","flate2::bufread","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",23,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreaderbuf"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",23,null],[11,"get_ref","","Acquires a reference to the underlying stream",23,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",23,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",23,null],[11,"read","","",23,null],[11,"new","flate2::read","Creates a new decoder which will decompress data read from the given\nstream.",24,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",24,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",24,null],[11,"get_ref","","Acquires a reference to the underlying stream",24,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",24,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",24,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",24,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",24,null],[11,"read","","",24,null],[11,"new","flate2::bufread","Creates a new decoder which will decompress data read from the given\nstream.",25,{"inputs":[{"name":"r"}],"output":{"name":"decoderreaderbuf"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",25,null],[11,"get_ref","","Acquires a reference to the underlying stream",25,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",25,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",25,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",25,null],[11,"read","","",25,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",26,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",26,null],[11,"finish","","Consumes this encoder, flushing the output stream.",26,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",26,null],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",26,null],[11,"write","","",26,null],[11,"flush","","",26,null]],"paths":[[4,"Status"],[4,"Flush"],[4,"Compression"],[3,"GzBuilder"],[3,"GzHeader"],[3,"DataError"],[3,"Compress"],[3,"Decompress"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"]]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["ordered_float"] = {"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[12,"0","","",0,null],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",null,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"orderedfloat"}}],[11,"fmt","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"into_inner","","Get the value out.",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"into","","",0,null],[11,"into","","",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"clone","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"notnan"}}],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"new","","Create a NotNaN value.",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Get the value out.",1,null],[11,"as_ref","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"into","","",1,null],[11,"into","","",1,null],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"add","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"add_assign","","",1,null],[11,"add_assign","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"sub_assign","","",1,null],[11,"sub_assign","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"mul_assign","","",1,null],[11,"mul_assign","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"div_assign","","",1,null],[11,"div_assign","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"rem_assign","","",1,null],[11,"rem_assign","","",1,null],[11,"rem_assign","","",1,null],[11,"neg","","",1,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"description","","",2,null],[11,"fmt","","",2,null],[11,"into","","",2,null]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["rmp"] = {"doc":"# The Rust MessagePack Library","items":[[4,"Marker","rmp","",null,null],[13,"FixPos","","",0,null],[13,"FixNeg","","",0,null],[13,"Null","","",0,null],[13,"True","","",0,null],[13,"False","","",0,null],[13,"U8","","",0,null],[13,"U16","","",0,null],[13,"U32","","",0,null],[13,"U64","","",0,null],[13,"I8","","",0,null],[13,"I16","","",0,null],[13,"I32","","",0,null],[13,"I64","","",0,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[13,"FixStr","","",0,null],[13,"Str8","","",0,null],[13,"Str16","","",0,null],[13,"Str32","","",0,null],[13,"Bin8","","",0,null],[13,"Bin16","","",0,null],[13,"Bin32","","",0,null],[13,"FixArray","","",0,null],[13,"Array16","","",0,null],[13,"Array32","","",0,null],[13,"FixMap","","",0,null],[13,"Map16","","",0,null],[13,"Map32","","",0,null],[13,"FixExt1","","",0,null],[13,"FixExt2","","",0,null],[13,"FixExt4","","",0,null],[13,"FixExt8","","",0,null],[13,"FixExt16","","",0,null],[13,"Ext8","","",0,null],[13,"Ext16","","",0,null],[13,"Ext32","","",0,null],[13,"Reserved","","",0,null],[0,"encode","","Provides various functions and structs for MessagePack encoding.",null,null],[3,"WriteError","rmp::encode","Represents an error that can occur when attempting to write MessagePack&#39;ed value into the write.",null,null],[12,"0","","",1,null],[3,"MarkerWriteError","","Represents an error that can occur when attempting to write marker into the write.",null,null],[3,"FixedValueWriteError","","Represents an error that can occur when attempting to write MessagePack&#39;ed single-byte value.",null,null],[12,"0","","",2,null],[4,"ValueWriteError","","Represents an error that can occur when attempring to write MessagePack&#39;ed complex value into\nthe write.",null,null],[13,"InvalidMarkerWrite","","IO error while writing marker.",3,null],[13,"InvalidDataWrite","","IO error while writing data.",3,null],[5,"write_nil","","Encodes and attempts to write a nil value into the given write.",null,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[5,"write_bool","","Encodes and attempts to write a bool value into the given write.",null,{"inputs":[{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[5,"write_pfix","","Encodes and attempts to write an unsigned small integer value as a positive fixint into the\ngiven write.",null,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[5,"write_nfix","","Encodes and attempts to write a negative small integer value as a negative fixnum into the\ngiven write.",null,{"inputs":[{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[5,"write_u8","","Encodes and attempts to write an `u8` value as a 2-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[5,"write_u16","","Encodes and attempts to write an `u16` value strictly as a 3-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[5,"write_u32","","Encodes and attempts to write an `u32` value strictly as a 5-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_u64","","Encodes and attempts to write an `u64` value strictly as a 9-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[5,"write_i8","","Encodes and attempts to write an `i8` value as a 2-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[5,"write_i16","","Encodes and attempts to write an `i16` value as a 3-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[5,"write_i32","","Encodes and attempts to write an `i32` value as a 5-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[5,"write_i64","","Encodes and attempts to write an `i64` value as a 9-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[5,"write_uint","","Encodes and attempts to write an `u64` value into the given write using the most efficient\nrepresentation, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[5,"write_sint","","Encodes and attempts to write an `i64` value into the given write using the most efficient\nrepresentation, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[5,"write_sint_eff","","Encodes and attempts to write an `i64` value using the most effective representation.",null,{"inputs":[{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[5,"write_f32","","Encodes and attempts to write an `f32` value as a 5-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[5,"write_f64","","Encodes and attempts to write an `f64` value as a 9-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[5,"write_str_len","","Encodes and attempts to write the most efficient string length implementation to the given\nwrite, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_str","","Encodes and attempts to write the most efficient string implementation to the given `Write`.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"write_bin_len","","Encodes and attempts to write the most efficient binary array length implementation to the given\nwrite, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_bin","","Encodes and attempts to write the most efficient binary implementation to the given `Write`.",null,null],[5,"write_array_len","","Encodes and attempts to write the most efficient array length implementation to the given write,\nreturning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_map_len","","Encodes and attempts to write the most efficient map length implementation to the given write,\nreturning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_ext_meta","","Encodes and attempts to write the most efficient ext metadata implementation to the given\nwrite, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"},{"name":"i8"}],"output":{"name":"result"}}],[0,"value_ref","","This module is UNSTABLE, the reason is - recently added.",null,null],[3,"Error","rmp::encode::value_ref","",null,null],[5,"write_value_ref","","Encodes and attempts to write the given non-owning ValueRef into the Write.",null,{"inputs":[{"name":"w"},{"name":"valueref"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"description","","",4,null],[11,"cause","","",4,null],[11,"from","","",4,{"inputs":[{"name":"fixedvaluewriteerror"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"valuewriteerror"}],"output":{"name":"error"}}],[0,"value","rmp::encode","",null,null],[4,"Error","rmp::encode::value","",null,null],[13,"UnstableCommonError","","",5,null],[5,"write_value","","Encodes and attempts to write the most efficient representation of the given Value.",null,{"inputs":[{"name":"w"},{"name":"value"}],"output":{"name":"result"}}],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"fixedvaluewriteerror"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"valuewriteerror"}],"output":{"name":"error"}}],[11,"fmt","rmp::encode","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"writeerror"}}],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"cause","","",6,null],[11,"fmt","","",6,null],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"markerwriteerror"}}],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"cause","","",3,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"markerwriteerror"}],"output":{"name":"valuewriteerror"}}],[11,"from","","",3,{"inputs":[{"name":"fixedvaluewriteerror"}],"output":{"name":"valuewriteerror"}}],[0,"decode","rmp","Provides various functions and structs for MessagePack decoding.",null,null],[3,"ExtMeta","rmp::decode","",null,null],[12,"typeid","","",7,null],[12,"size","","",7,null],[4,"ReadError","","Represents an error that can occur when attempting to read bytes from the reader.",null,null],[13,"UnexpectedEOF","","Unexpected end of file reached while reading bytes.",8,null],[13,"Io","","I/O error occurred while reading bytes.",8,null],[4,"MarkerReadError","","Represents an error that can occur when attempting to read a MessagePack marker from the reader.",null,null],[13,"UnexpectedEOF","","Unexpected end of file reached while reading the marker.",9,null],[13,"Io","","I/O error occurred while reading the marker.",9,null],[4,"FixedValueReadError","","Represents an error that can occur when attempting to read a MessagePack&#39;ed single-byte value\nfrom the reader.",null,null],[13,"UnexpectedEOF","","Unexpected end of file reached while reading the value.",10,null],[13,"Io","","I/O error occurred while reading the value.",10,null],[13,"TypeMismatch","","The type decoded isn&#39;t match with the expected one.",10,null],[4,"ValueReadError","","Represents an error that can occur when attempting to read a MessagePack&#39;ed complex value from\nthe reader.",null,null],[13,"InvalidMarkerRead","","Failed to read the marker.",11,null],[13,"InvalidDataRead","","Failed to read the data.",11,null],[13,"TypeMismatch","","The type decoded isn&#39;t match with the expected one.",11,null],[4,"DecodeStringError","","",null,null],[13,"InvalidMarkerRead","","",12,null],[13,"InvalidDataRead","","",12,null],[13,"TypeMismatch","","",12,null],[13,"BufferSizeTooSmall","","The given buffer is not large enough to accumulate the specified amount of bytes.",12,null],[13,"InvalidDataCopy","","",12,null],[13,"InvalidUtf8","","",12,null],[5,"read_marker","","Attempts to read a single byte from the given reader and decodes it as a MessagePack marker.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_nil","","Attempts to read a single byte from the given reader and to decode it as a nil value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_bool","","Attempts to read a single byte from the given reader and to decode it as a boolean value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_pfix","","Attempts to read a single byte from the given reader and to decode it as a positive fixnum\nvalue.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_nfix","","Attempts to read a single byte from the given reader and to decode it as a negative fixnum\nvalue.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_numeric_data","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u8","","Attempts to read exactly 2 bytes from the given reader and to decode them as `u8` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u16","","Attempts to read exactly 3 bytes from the given reader and to decode them as `u16` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u32","","Attempts to read exactly 5 bytes from the given reader and to decode them as `u32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u64","","Attempts to read exactly 9 bytes from the given reader and to decode them as `u64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i8","","Attempts to read exactly 2 bytes from the given reader and to decode them as `i8` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i16","","Attempts to read exactly 3 bytes from the given reader and to decode them as `i16` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i32","","Attempts to read exactly 5 bytes from the given reader and to decode them as `i32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i64","","Attempts to read exactly 9 bytes from the given reader and to decode them as `i64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u8_loosely","","Attempts to read up to 2 bytes from the given reader and to decode them as `u8` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u16_loosely","","Attempts to read up to 3 bytes from the given reader and to decode them as `u16` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u32_loosely","","Attempts to read up to 5 bytes from the given reader and to decode them as `u32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u64_loosely","","Attempts to read up to 9 bytes from the given reader and to decode them as `u64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i8_loosely","","Attempts to read up to 2 bytes from the given reader and to decode them as `i8` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i16_loosely","","Attempts to read up to 3 bytes from the given reader and to decode them as `i16` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i32_loosely","","Attempts to read up to 5 bytes from the given reader and to decode them as `i32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i64_loosely","","Attempts to read up to 9 bytes from the given reader and to decode them as `i64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i8_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i16_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i32_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i64_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u8_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u16_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u32_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u64_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_f32","","Attempts to read exactly 5 bytes from the given reader and to decode them as `f32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_f64","","Attempts to read exactly 9 bytes from the given reader and to decode them as `f64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_str_len","","Attempts to read up to 9 bytes from the given reader and to decode them as a string `u32` size\nvalue.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_str","","Attempts to read a string data from the given reader and copy it to the buffer provided.",null,null],[5,"read_str_data","","",null,null],[5,"read_str_ref","","Attempts to read and decode a string value from the reader, returning a borrowed slice from it.",null,null],[5,"read_array_size","","Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32\narray size.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_map_size","","Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32\nmap size.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_bin_len","","Attempts to read up to 5 bytes from the given reader and to decode them as Binary array length.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_bin_borrow","","Attempts to read some bytes from the given slice until a complete Binary message is decoded,\nreturning a borrowed slice with the data.",null,null],[5,"read_fixext1","","Attempts to read exactly 3 bytes from the given reader and interpret them as a fixext1 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_fixext2","","Attempts to read exactly 4 bytes from the given reader and interpret them as a fixext2 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_fixext4","","Attempts to read exactly 6 bytes from the given reader and interpret them as a fixext4 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_fixext8","","Attempts to read exactly 10 bytes from the given reader and interpret them as a fixext8 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_fixext16","","Attempts to read exactly 18 bytes from the given reader and interpret them as a fixext16 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_full","","Copies the contents of a reader into a buffer until fully filled.",null,null],[5,"read_ext_meta","","Unstable: docs, errors",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"value_ref","","This module is UNSTABLE, the reason is - recently added.",null,null],[4,"Error","rmp::decode::value_ref","",null,null],[13,"InvalidMarkerRead","","Failed to read the type marker value.",13,null],[13,"InvalidLengthRead","","Failed to read string/array/map size.",13,null],[13,"InvalidDataRead","","Failed to read packed non-marker data.",13,null],[13,"InvalidLengthSize","","Failed to cast the length read to machine size.",13,null],[13,"InvalidUtf8","","Failed to interpret a byte slice as a UTF-8 string.",13,null],[13,"InvalidExtTypeRead","","Failed to read ext type.",13,null],[13,"TypeMismatch","","Using Reserved type found.",13,null],[5,"read_value_ref","","Attempts to read the data from the given reader until either a complete MessagePack value\ndecoded or an error detected.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[8,"BorrowRead","","A BorrowRead is a type of Reader which has an internal buffer.",null,null],[10,"fill_buf","","Returns the buffer contents.",14,null],[10,"consume","","Tells this buffer that len bytes have been consumed from the buffer, so they should no\nlonger be returned in calls to read.",14,null],[11,"fmt","","",13,null],[11,"description","","",13,null],[11,"cause","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"error"}}],[11,"fill_buf","std::io::cursor","",15,null],[11,"consume","","",15,null],[0,"value","rmp::decode","",null,null],[4,"Error","rmp::decode::value","",null,null],[13,"InvalidMarkerRead","","",16,null],[13,"InvalidDataRead","","",16,null],[13,"TypeMismatch","","",16,null],[13,"BufferSizeTooSmall","","",16,null],[13,"InvalidDataCopy","","",16,null],[13,"InvalidUtf8","","",16,null],[13,"InvalidArrayRead","","",16,null],[13,"InvalidMapKeyRead","","",16,null],[13,"InvalidMapValueRead","","",16,null],[5,"read_value","","Attempts to read bytes from the given reader and interpret them as a `Value`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",16,null],[11,"description","","",16,null],[11,"cause","","",16,null],[11,"fmt","","",16,null],[11,"from","","",16,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"valuereaderror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"decodestringerror"}],"output":{"name":"error"}}],[8,"BigEndianRead","rmp::decode","",null,null],[10,"read","","",17,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",8,null],[11,"description","","",8,null],[11,"cause","","",8,null],[11,"fmt","","",8,null],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"readerror"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"readerror"}}],[11,"fmt","","",9,null],[11,"description","","",9,null],[11,"cause","","",9,null],[11,"fmt","","",9,null],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"markerreaderror"}}],[11,"from","","",8,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"readerror"}}],[11,"fmt","","",10,null],[11,"description","","",10,null],[11,"cause","","",10,null],[11,"fmt","","",10,null],[11,"from","","",10,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"fixedvaluereaderror"}}],[11,"fmt","","",11,null],[11,"description","","",11,null],[11,"cause","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"valuereaderror"}}],[11,"fmt","","",12,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"valuereaderror"}],"output":{"name":"decodestringerror"}}],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"fmt","rmp","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"from_u8","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"marker"}}],[11,"to_u8","","",0,null],[0,"value","","Contains Value and ValueRef structs and its conversion traits.",null,null],[4,"Integer","rmp::value","Integer representation.",null,null],[13,"U64","","Every non-negative integer is treated as u64, even if it fits in i64.",18,null],[13,"I64","","Every negative integer is treated as i64.",18,null],[4,"Float","","Floating point numbers representation.",null,null],[13,"F32","","",19,null],[13,"F64","","",19,null],[4,"Value","","",null,null],[13,"Nil","","Nil represents nil.",20,null],[13,"Boolean","","Boolean represents true or false.",20,null],[13,"Integer","","Integer represents an integer.",20,null],[13,"Float","","Float represents a floating point number.",20,null],[13,"String","","String extending Raw type represents a UTF-8 string.",20,null],[13,"Binary","","Binary extending Raw type represents a byte array.",20,null],[13,"Array","","Array represents a sequence of objects.",20,null],[13,"Map","","Map represents key-value pairs of objects.",20,null],[13,"Ext","","Extended implements Extension interface: represents a tuple of type information and a byte\narray where type information is an integer whose meaning is defined by applications.",20,null],[4,"ValueRef","","",null,null],[13,"Nil","","Nil represents nil.",21,null],[13,"Boolean","","Boolean represents true or false.",21,null],[13,"Integer","","Integer represents an integer.",21,null],[13,"Float","","Float represents a floating point number.",21,null],[13,"String","","String extending Raw type represents a UTF-8 string.",21,null],[13,"Binary","","Binary extending Raw type represents a byte array.",21,null],[13,"Array","","Array represents a sequence of objects.",21,null],[13,"Map","","Map represents key-value pairs of objects.",21,null],[13,"Ext","","Extended implements Extension interface: represents a tuple of type information and a byte\narray where type information is an integer whose meaning is defined by applications.",21,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"is_nil","","Returns true if the `Value` is a Null. Returns false otherwise.",20,null],[11,"is_bool","","Returns true if the `Value` is a Boolean. Returns false otherwise.",20,null],[11,"is_i64","","Returns true if (and only if) the `Value` is a i64. Returns false otherwise.",20,null],[11,"is_u64","","Returns true if (and only if) the `Value` is a u64. Returns false otherwise.",20,null],[11,"is_f32","","Returns true if (and only if) the `Value` is a f32. Returns false otherwise.",20,null],[11,"is_f64","","Returns true if (and only if) the `Value` is a f64. Returns false otherwise.",20,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",20,null],[11,"is_str","","Returns true if the `Value` is a String. Returns false otherwise.",20,null],[11,"is_bin","","Returns true if the `Value` is a Binary. Returns false otherwise.",20,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",20,null],[11,"is_map","","Returns true if the `Value` is a Map. Returns false otherwise.",20,null],[11,"is_ext","","Returns true if the `Value` is an Ext. Returns false otherwise.",20,null],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",20,null],[11,"as_i64","","If the `Value` is an integer, return or cast it to a i64.\nReturns None otherwise.",20,null],[11,"as_u64","","If the `Value` is an integer, return or cast it to a u64.\nReturns None otherwise.",20,null],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",20,null],[11,"as_str","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",20,null],[11,"as_slice","","If the `Value` is a Binary, returns the associated slice.\nReturns None otherwise.",20,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",20,null],[11,"as_map","","If the `Value` is a Map, returns the associated vector of key-value tuples.\nReturns None otherwise.",20,null],[11,"as_ext","","If the `Value` is an Ext, returns the associated tuple with a ty and slice.\nReturns None otherwise.",20,null],[11,"index","","",20,null],[11,"from","","",20,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"u16"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"u64"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"i16"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"isize"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from","","",20,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"fmt","","",20,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"to_owned","","Converts the current non-owning value to an owned Value.",21,null],[17,"MSGPACK_VERSION","rmp","",null,null]],"paths":[[4,"Marker"],[3,"WriteError"],[3,"FixedValueWriteError"],[4,"ValueWriteError"],[3,"Error"],[4,"Error"],[3,"MarkerWriteError"],[3,"ExtMeta"],[4,"ReadError"],[4,"MarkerReadError"],[4,"FixedValueReadError"],[4,"ValueReadError"],[4,"DecodeStringError"],[4,"Error"],[8,"BorrowRead"],[3,"Cursor"],[4,"Error"],[8,"BigEndianRead"],[4,"Integer"],[4,"Float"],[4,"Value"],[4,"ValueRef"]]};
searchIndex["snap"] = {"doc":"This crate provides an implementation of the\n[Snappy compression format](https://github.com/google/snappy/blob/master/format_description.txt),\nas well as the\n[framing format](https://github.com/google/snappy/blob/master/framing_format.txt).\nThe goal of Snappy is to provide reasonable compression at high speed. On a\nmodern CPU, Snappy can compress data at about 300 MB/sec or more and can\ndecompress data at about 800 MB/sec or more.","items":[[3,"Encoder","snap","Encoder is a raw encoder for compressing bytes in the Snappy format.",null,null],[3,"Decoder","","Decoder is a raw decoder for decompressing bytes in the Snappy format.",null,null],[3,"IntoInnerError","","`IntoInnerError` occurs when consuming a `Writer` fails.",null,null],[3,"Reader","","A reader for decompressing a Snappy stream.",null,null],[3,"Writer","","A writer for compressing a Snappy stream.",null,null],[4,"Error","","Error describes all the possible errors that may occur during Snappy\ncompression or decompression.",null,null],[13,"TooBig","","This error occurs when the given input is too big. This can happen\nduring compression or decompression.",0,null],[12,"given","snap::Error","The size of the given input.",0,null],[12,"max","","The maximum allowed size of an input buffer.",0,null],[13,"BufferTooSmall","snap","This error occurs when the given buffer is too small to contain the\nmaximum possible compressed bytes or the total number of decompressed\nbytes.",0,null],[12,"given","snap::Error","The size of the given output buffer.",0,null],[12,"min","","The minimum size of the output buffer.",0,null],[13,"Empty","snap","This error occurs when trying to decompress a zero length buffer.",0,null],[13,"Header","","This error occurs when an invalid header is found during decompression.",0,null],[13,"HeaderMismatch","","This error occurs when there is a mismatch between the number of\ndecompressed bytes reported in the header and the number of\nactual decompressed bytes. In this error case, the number of actual\ndecompressed bytes is always less than the number reported in the\nheader.",0,null],[12,"expected_len","snap::Error","The total number of decompressed bytes expected (i.e., the header\nvalue).",0,null],[12,"got_len","","The total number of actual decompressed bytes.",0,null],[13,"Literal","snap","This error occurs during decompression when there was a problem\nreading a literal.",0,null],[12,"len","snap::Error","The expected length of the literal.",0,null],[12,"src_len","","The number of remaining bytes in the compressed bytes.",0,null],[12,"dst_len","","The number of remaining slots in the decompression buffer.",0,null],[13,"CopyRead","snap","This error occurs during decompression when there was a problem\nreading a copy.",0,null],[12,"len","snap::Error","The expected length of the copy (as encoded in the compressed\nbytes).",0,null],[12,"src_len","","The number of remaining bytes in the compressed bytes.",0,null],[13,"CopyWrite","snap","This error occurs during decompression when there was a problem\nwriting a copy to the decompression buffer.",0,null],[12,"len","snap::Error","The length of the copy (i.e., the total number of bytes to be\nproduced by this copy in the decompression buffer).",0,null],[12,"dst_len","","The number of remaining bytes in the decompression buffer.",0,null],[13,"Offset","snap","This error occurs during decompression when an invalid copy offset\nis found. An offset is invalid if it is zero or if it is out of bounds.",0,null],[12,"offset","snap::Error","The offset that was read.",0,null],[12,"dst_pos","","The current position in the decompression buffer. If the offset is\nnon-zero, then the offset must be greater than this position.",0,null],[13,"StreamHeader","snap","This error occurs when a stream header chunk type was expected but got\na different chunk type.\nThis error only occurs when reading a Snappy frame formatted stream.",0,null],[12,"byte","snap::Error","The chunk type byte that was read.",0,null],[13,"StreamHeaderMismatch","snap","This error occurs when the magic stream headers bytes do not match\nwhat is expected.\nThis error only occurs when reading a Snappy frame formatted stream.",0,null],[12,"bytes","snap::Error","The bytes that were read.",0,null],[13,"UnsupportedChunkType","snap","This error occurs when an unsupported chunk type is seen.\nThis error only occurs when reading a Snappy frame formatted stream.",0,null],[12,"byte","snap::Error","The chunk type byte that was read.",0,null],[13,"UnsupportedChunkLength","snap","This error occurs when trying to read a chunk with length greater than\nthat supported by this library when reading a Snappy frame formatted\nstream.\nThis error only occurs when reading a Snappy frame formatted stream.",0,null],[12,"len","snap::Error","The length of the chunk encountered.",0,null],[12,"header","","True when this error occured while reading the stream header.",0,null],[13,"Checksum","snap","This error occurs when a checksum validity check fails.\nThis error only occurs when reading a Snappy frame formatted stream.",0,null],[12,"expected","snap::Error","The expected checksum read from the stream.",0,null],[12,"got","","The computed checksum.",0,null],[5,"max_compress_len","snap","Returns the maximum compressed size given the uncompressed size.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"decompress_len","","Returns the decompressed size (in bytes) of the compressed bytes given.",null,null],[11,"new","","Return a new encoder that can be used for compressing bytes.",1,{"inputs":[],"output":{"name":"encoder"}}],[11,"compress","","Compresses all bytes in `input` into `output`.",1,null],[11,"compress_vec","","Compresses all bytes in `input` into a freshly allocated `Vec`.",1,null],[11,"default","","",2,{"inputs":[],"output":{"name":"decoder"}}],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"new","","Return a new decoder that can be used for decompressing bytes.",2,{"inputs":[],"output":{"name":"decoder"}}],[11,"decompress","","Decompresses all bytes in `input` into `output`.",2,null],[11,"decompress_vec","","Decompresses all bytes in `input` into a freshly allocated `Vec`.",2,null],[11,"error","","Returns the error which caused the call to `into_inner` to fail.",3,null],[11,"into_inner","","Returns the underlying writer which generated the error.",3,null],[11,"description","","",3,null],[11,"cause","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",0,null],[11,"from","std::io::error","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","snap","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new writer for streaming Snappy compression.",5,{"inputs":[{"name":"w"}],"output":{"name":"writer"}}],[11,"into_inner","","Returns the underlying stream, consuming and flushing this writer.",5,null],[11,"drop","","",5,null],[11,"write","","",5,null],[11,"flush","","",5,null],[11,"new","","Create a new reader for streaming Snappy decompression.",6,{"inputs":[{"name":"r"}],"output":{"name":"reader"}}],[11,"read","","",6,null],[6,"Result","","A convenient type alias for `Result&lt;T, snap::Error&gt;`.",null,null]],"paths":[[4,"Error"],[3,"Encoder"],[3,"Decoder"],[3,"IntoInnerError"],[3,"Error"],[3,"Writer"],[3,"Reader"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics. Includes Hamming,\nLevenshtein, Jaro, and Jaro-Winkler.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector.\nReturns a vector of corresponding values between 0.0 and 1.0 (higher value\nmeans more similar).",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a\nvector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[6,"HammingResult","","",null,null],[11,"eq","","",0,null],[11,"fmt","","",0,null]],"paths":[[4,"StrSimError"]]};
searchIndex["crc"] = {"doc":"# crc\nRust implementation of CRC(32, 64)","items":[[0,"crc32","crc","",null,null],[3,"IEEE_TABLE","crc::crc32","",null,null],[3,"CASTAGNOLI_TABLE","","",null,null],[3,"KOOPMAN_TABLE","","",null,null],[3,"Digest","","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_ieee","","",null,null],[5,"checksum_castagnoli","","",null,null],[5,"checksum_koopman","","",null,null],[17,"CASTAGNOLI","","",null,null],[17,"IEEE","","",null,null],[17,"KOOPMAN","","",null,null],[8,"Hasher32","","",null,null],[10,"reset","","",0,null],[10,"write","","",0,null],[10,"sum32","","",0,null],[11,"deref","","",1,null],[11,"deref","","",2,null],[11,"deref","","",3,null],[11,"new","","",4,{"inputs":[{"name":"u32"}],"output":{"name":"digest"}}],[11,"new_with_initial","","",4,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"digest"}}],[11,"reset","","",4,null],[11,"write","","",4,null],[11,"sum32","","",4,null],[0,"crc64","crc","",null,null],[3,"ECMA_TABLE","crc::crc64","",null,null],[3,"ISO_TABLE","","",null,null],[3,"Digest","","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_ecma","","",null,null],[5,"checksum_iso","","",null,null],[17,"ECMA","","",null,null],[17,"ISO","","",null,null],[8,"Hasher64","","",null,null],[10,"reset","","",5,null],[10,"write","","",5,null],[10,"sum64","","",5,null],[11,"deref","","",6,null],[11,"deref","","",7,null],[11,"new","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"digest"}}],[11,"new_with_initial","","",8,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"digest"}}],[11,"reset","","",8,null],[11,"write","","",8,null],[11,"sum64","","",8,null]],"paths":[[8,"Hasher32"],[3,"IEEE_TABLE"],[3,"CASTAGNOLI_TABLE"],[3,"KOOPMAN_TABLE"],[3,"Digest"],[8,"Hasher64"],[3,"ECMA_TABLE"],[3,"ISO_TABLE"],[3,"Digest"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[11,"clone","libc::unix","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","libc::unix::notbsd","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","libc::unix::notbsd::linux","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","libc::unix::notbsd::linux::other","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",61,null],[11,"clone","","",62,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",63,null],[11,"clone","","",64,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"clone","","",68,null],[11,"clone","","",69,null],[11,"clone","","",70,null],[11,"clone","","",71,null],[11,"clone","","",72,null],[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",73,null],[13,"EPERM","","",73,null],[13,"ENOENT","","",73,null],[13,"ESRCH","","",73,null],[13,"EINTR","","",73,null],[13,"EIO","","",73,null],[13,"ENXIO","","",73,null],[13,"E2BIG","","",73,null],[13,"ENOEXEC","","",73,null],[13,"EBADF","","",73,null],[13,"ECHILD","","",73,null],[13,"EAGAIN","","",73,null],[13,"ENOMEM","","",73,null],[13,"EACCES","","",73,null],[13,"EFAULT","","",73,null],[13,"ENOTBLK","","",73,null],[13,"EBUSY","","",73,null],[13,"EEXIST","","",73,null],[13,"EXDEV","","",73,null],[13,"ENODEV","","",73,null],[13,"ENOTDIR","","",73,null],[13,"EISDIR","","",73,null],[13,"EINVAL","","",73,null],[13,"ENFILE","","",73,null],[13,"EMFILE","","",73,null],[13,"ENOTTY","","",73,null],[13,"ETXTBSY","","",73,null],[13,"EFBIG","","",73,null],[13,"ENOSPC","","",73,null],[13,"ESPIPE","","",73,null],[13,"EROFS","","",73,null],[13,"EMLINK","","",73,null],[13,"EPIPE","","",73,null],[13,"EDOM","","",73,null],[13,"ERANGE","","",73,null],[13,"EDEADLK","","",73,null],[13,"ENAMETOOLONG","","",73,null],[13,"ENOLCK","","",73,null],[13,"ENOSYS","","",73,null],[13,"ENOTEMPTY","","",73,null],[13,"ELOOP","","",73,null],[13,"ENOMSG","","",73,null],[13,"EIDRM","","",73,null],[13,"ECHRNG","","",73,null],[13,"EL2NSYNC","","",73,null],[13,"EL3HLT","","",73,null],[13,"EL3RST","","",73,null],[13,"ELNRNG","","",73,null],[13,"EUNATCH","","",73,null],[13,"ENOCSI","","",73,null],[13,"EL2HLT","","",73,null],[13,"EBADE","","",73,null],[13,"EBADR","","",73,null],[13,"EXFULL","","",73,null],[13,"ENOANO","","",73,null],[13,"EBADRQC","","",73,null],[13,"EBADSLT","","",73,null],[13,"EBFONT","","",73,null],[13,"ENOSTR","","",73,null],[13,"ENODATA","","",73,null],[13,"ETIME","","",73,null],[13,"ENOSR","","",73,null],[13,"ENONET","","",73,null],[13,"ENOPKG","","",73,null],[13,"EREMOTE","","",73,null],[13,"ENOLINK","","",73,null],[13,"EADV","","",73,null],[13,"ESRMNT","","",73,null],[13,"ECOMM","","",73,null],[13,"EPROTO","","",73,null],[13,"EMULTIHOP","","",73,null],[13,"EDOTDOT","","",73,null],[13,"EBADMSG","","",73,null],[13,"EOVERFLOW","","",73,null],[13,"ENOTUNIQ","","",73,null],[13,"EBADFD","","",73,null],[13,"EREMCHG","","",73,null],[13,"ELIBACC","","",73,null],[13,"ELIBBAD","","",73,null],[13,"ELIBSCN","","",73,null],[13,"ELIBMAX","","",73,null],[13,"ELIBEXEC","","",73,null],[13,"EILSEQ","","",73,null],[13,"ERESTART","","",73,null],[13,"ESTRPIPE","","",73,null],[13,"EUSERS","","",73,null],[13,"ENOTSOCK","","",73,null],[13,"EDESTADDRREQ","","",73,null],[13,"EMSGSIZE","","",73,null],[13,"EPROTOTYPE","","",73,null],[13,"ENOPROTOOPT","","",73,null],[13,"EPROTONOSUPPORT","","",73,null],[13,"ESOCKTNOSUPPORT","","",73,null],[13,"EOPNOTSUPP","","",73,null],[13,"EPFNOSUPPORT","","",73,null],[13,"EAFNOSUPPORT","","",73,null],[13,"EADDRINUSE","","",73,null],[13,"EADDRNOTAVAIL","","",73,null],[13,"ENETDOWN","","",73,null],[13,"ENETUNREACH","","",73,null],[13,"ENETRESET","","",73,null],[13,"ECONNABORTED","","",73,null],[13,"ECONNRESET","","",73,null],[13,"ENOBUFS","","",73,null],[13,"EISCONN","","",73,null],[13,"ENOTCONN","","",73,null],[13,"ESHUTDOWN","","",73,null],[13,"ETOOMANYREFS","","",73,null],[13,"ETIMEDOUT","","",73,null],[13,"ECONNREFUSED","","",73,null],[13,"EHOSTDOWN","","",73,null],[13,"EHOSTUNREACH","","",73,null],[13,"EALREADY","","",73,null],[13,"EINPROGRESS","","",73,null],[13,"ESTALE","","",73,null],[13,"EUCLEAN","","",73,null],[13,"ENOTNAM","","",73,null],[13,"ENAVAIL","","",73,null],[13,"EISNAM","","",73,null],[13,"EREMOTEIO","","",73,null],[13,"EDQUOT","","",73,null],[13,"ENOMEDIUM","","",73,null],[13,"EMEDIUMTYPE","","",73,null],[13,"ECANCELED","","",73,null],[13,"ENOKEY","","",73,null],[13,"EKEYEXPIRED","","",73,null],[13,"EKEYREVOKED","","",73,null],[13,"EKEYREJECTED","","",73,null],[13,"EOWNERDEAD","","",73,null],[13,"ENOTRECOVERABLE","","",73,null],[13,"ERFKILL","","",73,null],[13,"EHWPOISON","","",73,null],[4,"Error","","",null,null],[13,"Sys","","",74,null],[13,"InvalidPath","","",74,null],[0,"libc","","",null,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",73,null],[13,"EPERM","","",73,null],[13,"ENOENT","","",73,null],[13,"ESRCH","","",73,null],[13,"EINTR","","",73,null],[13,"EIO","","",73,null],[13,"ENXIO","","",73,null],[13,"E2BIG","","",73,null],[13,"ENOEXEC","","",73,null],[13,"EBADF","","",73,null],[13,"ECHILD","","",73,null],[13,"EAGAIN","","",73,null],[13,"ENOMEM","","",73,null],[13,"EACCES","","",73,null],[13,"EFAULT","","",73,null],[13,"ENOTBLK","","",73,null],[13,"EBUSY","","",73,null],[13,"EEXIST","","",73,null],[13,"EXDEV","","",73,null],[13,"ENODEV","","",73,null],[13,"ENOTDIR","","",73,null],[13,"EISDIR","","",73,null],[13,"EINVAL","","",73,null],[13,"ENFILE","","",73,null],[13,"EMFILE","","",73,null],[13,"ENOTTY","","",73,null],[13,"ETXTBSY","","",73,null],[13,"EFBIG","","",73,null],[13,"ENOSPC","","",73,null],[13,"ESPIPE","","",73,null],[13,"EROFS","","",73,null],[13,"EMLINK","","",73,null],[13,"EPIPE","","",73,null],[13,"EDOM","","",73,null],[13,"ERANGE","","",73,null],[13,"EDEADLK","","",73,null],[13,"ENAMETOOLONG","","",73,null],[13,"ENOLCK","","",73,null],[13,"ENOSYS","","",73,null],[13,"ENOTEMPTY","","",73,null],[13,"ELOOP","","",73,null],[13,"ENOMSG","","",73,null],[13,"EIDRM","","",73,null],[13,"ECHRNG","","",73,null],[13,"EL2NSYNC","","",73,null],[13,"EL3HLT","","",73,null],[13,"EL3RST","","",73,null],[13,"ELNRNG","","",73,null],[13,"EUNATCH","","",73,null],[13,"ENOCSI","","",73,null],[13,"EL2HLT","","",73,null],[13,"EBADE","","",73,null],[13,"EBADR","","",73,null],[13,"EXFULL","","",73,null],[13,"ENOANO","","",73,null],[13,"EBADRQC","","",73,null],[13,"EBADSLT","","",73,null],[13,"EBFONT","","",73,null],[13,"ENOSTR","","",73,null],[13,"ENODATA","","",73,null],[13,"ETIME","","",73,null],[13,"ENOSR","","",73,null],[13,"ENONET","","",73,null],[13,"ENOPKG","","",73,null],[13,"EREMOTE","","",73,null],[13,"ENOLINK","","",73,null],[13,"EADV","","",73,null],[13,"ESRMNT","","",73,null],[13,"ECOMM","","",73,null],[13,"EPROTO","","",73,null],[13,"EMULTIHOP","","",73,null],[13,"EDOTDOT","","",73,null],[13,"EBADMSG","","",73,null],[13,"EOVERFLOW","","",73,null],[13,"ENOTUNIQ","","",73,null],[13,"EBADFD","","",73,null],[13,"EREMCHG","","",73,null],[13,"ELIBACC","","",73,null],[13,"ELIBBAD","","",73,null],[13,"ELIBSCN","","",73,null],[13,"ELIBMAX","","",73,null],[13,"ELIBEXEC","","",73,null],[13,"EILSEQ","","",73,null],[13,"ERESTART","","",73,null],[13,"ESTRPIPE","","",73,null],[13,"EUSERS","","",73,null],[13,"ENOTSOCK","","",73,null],[13,"EDESTADDRREQ","","",73,null],[13,"EMSGSIZE","","",73,null],[13,"EPROTOTYPE","","",73,null],[13,"ENOPROTOOPT","","",73,null],[13,"EPROTONOSUPPORT","","",73,null],[13,"ESOCKTNOSUPPORT","","",73,null],[13,"EOPNOTSUPP","","",73,null],[13,"EPFNOSUPPORT","","",73,null],[13,"EAFNOSUPPORT","","",73,null],[13,"EADDRINUSE","","",73,null],[13,"EADDRNOTAVAIL","","",73,null],[13,"ENETDOWN","","",73,null],[13,"ENETUNREACH","","",73,null],[13,"ENETRESET","","",73,null],[13,"ECONNABORTED","","",73,null],[13,"ECONNRESET","","",73,null],[13,"ENOBUFS","","",73,null],[13,"EISCONN","","",73,null],[13,"ENOTCONN","","",73,null],[13,"ESHUTDOWN","","",73,null],[13,"ETOOMANYREFS","","",73,null],[13,"ETIMEDOUT","","",73,null],[13,"ECONNREFUSED","","",73,null],[13,"EHOSTDOWN","","",73,null],[13,"EHOSTUNREACH","","",73,null],[13,"EALREADY","","",73,null],[13,"EINPROGRESS","","",73,null],[13,"ESTALE","","",73,null],[13,"EUCLEAN","","",73,null],[13,"ENOTNAM","","",73,null],[13,"ENAVAIL","","",73,null],[13,"EISNAM","","",73,null],[13,"EREMOTEIO","","",73,null],[13,"EDQUOT","","",73,null],[13,"ENOMEDIUM","","",73,null],[13,"EMEDIUMTYPE","","",73,null],[13,"ECANCELED","","",73,null],[13,"ENOKEY","","",73,null],[13,"EKEYEXPIRED","","",73,null],[13,"EKEYREVOKED","","",73,null],[13,"EKEYREJECTED","","",73,null],[13,"EOWNERDEAD","","",73,null],[13,"ENOTRECOVERABLE","","",73,null],[13,"ERFKILL","","",73,null],[13,"EHWPOISON","","",73,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","nix","",73,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed\ninformation about the error can be found in `errno`",null,null],[10,"sentinel","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",73,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",73,null],[11,"from_i32","","",73,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",73,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This\nshould not be used when `-1` is not the errno sentinel value.",73,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",73,null],[11,"fmt","","",73,null],[11,"from","std::io::error","",76,{"inputs":[{"name":"errno"}],"output":{"name":"self"}}],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",77,null],[13,"F_DUPFD_CLOEXEC","","",77,null],[13,"F_GETFD","","",77,null],[13,"F_SETFD","","",77,null],[13,"F_GETFL","","",77,null],[13,"F_SETFL","","",77,null],[13,"F_SETLK","","",77,null],[13,"F_SETLKW","","",77,null],[13,"F_GETLK","","",77,null],[13,"F_OFD_SETLK","","",77,null],[13,"F_OFD_SETLKW","","",77,null],[13,"F_OFD_GETLK","","",77,null],[13,"F_ADD_SEALS","","",77,null],[13,"F_GET_SEALS","","",77,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",78,null],[13,"LockExclusive","","",78,null],[13,"Unlock","","",78,null],[13,"LockSharedNonblock","","",78,null],[13,"LockExclusiveNonblock","","",78,null],[13,"UnlockNonblock","","",78,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[5,"splice","","",null,{"inputs":[{"name":"rawfd"},{"name":"option"},{"name":"rawfd"},{"name":"option"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"tee","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"vmsplice","","",null,null],[11,"hash","","",79,null],[11,"cmp","","",79,null],[11,"partial_cmp","","",79,null],[11,"lt","","",79,null],[11,"le","","",79,null],[11,"gt","","",79,null],[11,"ge","","",79,null],[11,"clone","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"fmt","","",79,null],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79,{"inputs":[{"name":"c_uint"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,null],[11,"is_all","","Returns `true` if all flags are currently set.",79,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,null],[11,"insert","","Inserts the specified flags in-place.",79,null],[11,"remove","","Removes the specified flags in-place.",79,null],[11,"toggle","","Toggles the specified flags in-place.",79,null],[11,"bitor","","Returns the union of the two sets of flags.",79,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,null],[11,"bitand","","Returns the intersection between the two sets of flags.",79,null],[11,"sub","","Returns the set difference of the two sets of flags.",79,null],[11,"not","","Returns the complement of this set of flags.",79,null],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"hash","","",80,null],[11,"cmp","","",80,null],[11,"partial_cmp","","",80,null],[11,"lt","","",80,null],[11,"le","","",80,null],[11,"gt","","",80,null],[11,"ge","","",80,null],[11,"clone","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"fmt","","",80,null],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",80,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,null],[11,"is_all","","Returns `true` if all flags are currently set.",80,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,null],[11,"insert","","Inserts the specified flags in-place.",80,null],[11,"remove","","Removes the specified flags in-place.",80,null],[11,"toggle","","Toggles the specified flags in-place.",80,null],[11,"bitor","","Returns the union of the two sets of flags.",80,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,null],[11,"bitand","","Returns the intersection between the two sets of flags.",80,null],[11,"sub","","Returns the set difference of the two sets of flags.",80,null],[11,"not","","Returns the complement of this set of flags.",80,null],[11,"from_iter","","",80,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",81,null],[11,"cmp","","",81,null],[11,"partial_cmp","","",81,null],[11,"lt","","",81,null],[11,"le","","",81,null],[11,"gt","","",81,null],[11,"ge","","",81,null],[11,"clone","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"fmt","","",81,null],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,null],[11,"is_all","","Returns `true` if all flags are currently set.",81,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,null],[11,"insert","","Inserts the specified flags in-place.",81,null],[11,"remove","","Removes the specified flags in-place.",81,null],[11,"toggle","","Toggles the specified flags in-place.",81,null],[11,"bitor","","Returns the union of the two sets of flags.",81,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,null],[11,"bitand","","Returns the intersection between the two sets of flags.",81,null],[11,"sub","","Returns the set difference of the two sets of flags.",81,null],[11,"not","","Returns the complement of this set of flags.",81,null],[11,"from_iter","","",81,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",82,null],[11,"cmp","","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"clone","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"fmt","","",82,null],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,null],[11,"is_all","","Returns `true` if all flags are currently set.",82,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,null],[11,"insert","","Inserts the specified flags in-place.",82,null],[11,"remove","","Removes the specified flags in-place.",82,null],[11,"toggle","","Toggles the specified flags in-place.",82,null],[11,"bitor","","Returns the union of the two sets of flags.",82,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,null],[11,"bitand","","Returns the intersection between the two sets of flags.",82,null],[11,"sub","","Returns the set difference of the two sets of flags.",82,null],[11,"not","","Returns the complement of this set of flags.",82,null],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"inputs":[{"name":"option"},{"name":"p2"},{"name":"option"},{"name":"msflags"},{"name":"option"}],"output":{"name":"result"}}],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"hash","","",83,null],[11,"cmp","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"clone","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"fmt","","",83,null],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,null],[11,"is_all","","Returns `true` if all flags are currently set.",83,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,null],[11,"insert","","Inserts the specified flags in-place.",83,null],[11,"remove","","Removes the specified flags in-place.",83,null],[11,"toggle","","Toggles the specified flags in-place.",83,null],[11,"bitor","","Returns the union of the two sets of flags.",83,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,null],[11,"bitand","","Returns the intersection between the two sets of flags.",83,null],[11,"sub","","Returns the set difference of the two sets of flags.",83,null],[11,"not","","Returns the complement of this set of flags.",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",84,null],[11,"cmp","","",84,null],[11,"partial_cmp","","",84,null],[11,"lt","","",84,null],[11,"le","","",84,null],[11,"gt","","",84,null],[11,"ge","","",84,null],[11,"clone","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"fmt","","",84,null],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",84,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,null],[11,"is_all","","Returns `true` if all flags are currently set.",84,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,null],[11,"insert","","Inserts the specified flags in-place.",84,null],[11,"remove","","Removes the specified flags in-place.",84,null],[11,"toggle","","Toggles the specified flags in-place.",84,null],[11,"bitor","","Returns the union of the two sets of flags.",84,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,null],[11,"bitand","","Returns the intersection between the two sets of flags.",84,null],[11,"sub","","Returns the set difference of the two sets of flags.",84,null],[11,"not","","Returns the complement of this set of flags.",84,null],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"name":"option"}],"output":{"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only `O_NONBLOCK` can be set, everything else will be ignored\nReturns the old attributes\nIt is recommend to use the `mq_set_nonblock()` and `mq_remove_nonblock()` convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd_t"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_set_nonblock","","Convenience function.\nSets the `O_NONBLOCK` attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function.\nRemoves `O_NONBLOCK` attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"hash","","",85,null],[11,"cmp","","",85,null],[11,"partial_cmp","","",85,null],[11,"lt","","",85,null],[11,"le","","",85,null],[11,"gt","","",85,null],[11,"ge","","",85,null],[11,"clone","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"fmt","","",85,null],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",85,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,null],[11,"is_all","","Returns `true` if all flags are currently set.",85,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,null],[11,"insert","","Inserts the specified flags in-place.",85,null],[11,"remove","","Removes the specified flags in-place.",85,null],[11,"toggle","","Toggles the specified flags in-place.",85,null],[11,"bitor","","Returns the union of the two sets of flags.",85,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,null],[11,"bitand","","Returns the intersection between the two sets of flags.",85,null],[11,"sub","","Returns the set difference of the two sets of flags.",85,null],[11,"not","","Returns the complement of this set of flags.",85,null],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",86,null],[11,"cmp","","",86,null],[11,"partial_cmp","","",86,null],[11,"lt","","",86,null],[11,"le","","",86,null],[11,"gt","","",86,null],[11,"ge","","",86,null],[11,"clone","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"fmt","","",86,null],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",86,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,null],[11,"is_all","","Returns `true` if all flags are currently set.",86,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,null],[11,"insert","","Inserts the specified flags in-place.",86,null],[11,"remove","","Removes the specified flags in-place.",86,null],[11,"toggle","","Toggles the specified flags in-place.",86,null],[11,"bitor","","Returns the union of the two sets of flags.",86,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,null],[11,"bitand","","Returns the intersection between the two sets of flags.",86,null],[11,"sub","","Returns the set difference of the two sets of flags.",86,null],[11,"not","","Returns the complement of this set of flags.",86,null],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"clone","","",87,null],[11,"eq","","",87,null],[11,"new","","",87,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[11,"flags","","",87,null],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[11,"clone","","",88,null],[11,"new","","",88,{"inputs":[{"name":"c_int"},{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"pollfd"}}],[11,"revents","","",88,null],[11,"hash","","",89,null],[11,"cmp","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"fmt","","",89,null],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",89,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,null],[11,"is_all","","Returns `true` if all flags are currently set.",89,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,null],[11,"insert","","Inserts the specified flags in-place.",89,null],[11,"remove","","Removes the specified flags in-place.",89,null],[11,"toggle","","Toggles the specified flags in-place.",89,null],[11,"bitor","","Returns the union of the two sets of flags.",89,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,null],[11,"bitand","","Returns the intersection between the two sets of flags.",89,null],[11,"sub","","Returns the set difference of the two sets of flags.",89,null],[11,"not","","Returns the complement of this set of flags.",89,null],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[5,"setns","","",null,{"inputs":[{"name":"rawfd"},{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneCb","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"hash","","",90,null],[11,"cmp","","",90,null],[11,"partial_cmp","","",90,null],[11,"lt","","",90,null],[11,"le","","",90,null],[11,"gt","","",90,null],[11,"ge","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"fmt","","",90,null],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",90,{"inputs":[{"name":"c_int"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,null],[11,"is_all","","Returns `true` if all flags are currently set.",90,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,null],[11,"insert","","Inserts the specified flags in-place.",90,null],[11,"remove","","Removes the specified flags in-place.",90,null],[11,"toggle","","Toggles the specified flags in-place.",90,null],[11,"bitor","","Returns the union of the two sets of flags.",90,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,null],[11,"bitand","","Returns the intersection between the two sets of flags.",90,null],[11,"sub","","Returns the set difference of the two sets of flags.",90,null],[11,"not","","Returns the complement of this set of flags.",90,null],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",91,null],[11,"new","","",91,{"inputs":[],"output":{"name":"cpuset"}}],[11,"is_set","","",91,null],[11,"set","","",91,null],[11,"unset","","",91,null],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",92,null],[12,"data","","",92,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",93,null],[13,"EpollCtlDel","","",93,null],[13,"EpollCtlMod","","",93,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"hash","","",94,null],[11,"cmp","","",94,null],[11,"partial_cmp","","",94,null],[11,"lt","","",94,null],[11,"le","","",94,null],[11,"gt","","",94,null],[11,"ge","","",94,null],[11,"clone","","",94,null],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"fmt","","",94,null],[11,"empty","","Returns an empty set of flags.",94,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",94,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",94,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",94,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",94,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",94,null],[11,"is_all","","Returns `true` if all flags are currently set.",94,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",94,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",94,null],[11,"insert","","Inserts the specified flags in-place.",94,null],[11,"remove","","Removes the specified flags in-place.",94,null],[11,"toggle","","Toggles the specified flags in-place.",94,null],[11,"bitor","","Returns the union of the two sets of flags.",94,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",94,null],[11,"bitand","","Returns the intersection between the two sets of flags.",94,null],[11,"sub","","Returns the set difference of the two sets of flags.",94,null],[11,"not","","Returns the complement of this set of flags.",94,null],[11,"from_iter","","",94,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",93,null],[11,"clone","","",92,null],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"hash","","",95,null],[11,"cmp","","",95,null],[11,"partial_cmp","","",95,null],[11,"lt","","",95,null],[11,"le","","",95,null],[11,"gt","","",95,null],[11,"ge","","",95,null],[11,"clone","","",95,null],[11,"eq","","",95,null],[11,"ne","","",95,null],[11,"fmt","","",95,null],[11,"empty","","Returns an empty set of flags.",95,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",95,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",95,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",95,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",95,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,null],[11,"is_all","","Returns `true` if all flags are currently set.",95,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,null],[11,"insert","","Inserts the specified flags in-place.",95,null],[11,"remove","","Removes the specified flags in-place.",95,null],[11,"toggle","","Toggles the specified flags in-place.",95,null],[11,"bitor","","Returns the union of the two sets of flags.",95,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,null],[11,"bitand","","Returns the intersection between the two sets of flags.",95,null],[11,"sub","","Returns the set difference of the two sets of flags.",95,null],[11,"not","","Returns the complement of this set of flags.",95,null],[11,"from_iter","","",95,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the &quot;direction&quot; (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"option"},{"name":"usize"}],"output":{"name":"result"}}],[0,"signal","nix::sys","",null,null],[3,"SignalIterator","nix::sys::signal","",null,null],[3,"SaFlags","","",null,null],[3,"SigFlags","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"Signal","","",null,null],[13,"SIGHUP","","",96,null],[13,"SIGINT","","",96,null],[13,"SIGQUIT","","",96,null],[13,"SIGILL","","",96,null],[13,"SIGTRAP","","",96,null],[13,"SIGABRT","","",96,null],[13,"SIGBUS","","",96,null],[13,"SIGFPE","","",96,null],[13,"SIGKILL","","",96,null],[13,"SIGUSR1","","",96,null],[13,"SIGSEGV","","",96,null],[13,"SIGUSR2","","",96,null],[13,"SIGPIPE","","",96,null],[13,"SIGALRM","","",96,null],[13,"SIGTERM","","",96,null],[13,"SIGSTKFLT","","",96,null],[13,"SIGCHLD","","",96,null],[13,"SIGCONT","","",96,null],[13,"SIGSTOP","","",96,null],[13,"SIGTSTP","","",96,null],[13,"SIGTTIN","","",96,null],[13,"SIGTTOU","","",96,null],[13,"SIGURG","","",96,null],[13,"SIGXCPU","","",96,null],[13,"SIGXFSZ","","",96,null],[13,"SIGVTALRM","","",96,null],[13,"SIGPROF","","",96,null],[13,"SIGWINCH","","",96,null],[13,"SIGIO","","",96,null],[13,"SIGPWR","","",96,null],[13,"SIGSYS","","",96,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",97,null],[13,"SigIgn","","",97,null],[13,"Handler","","",97,null],[13,"SigAction","","",97,null],[5,"sigaction","","",null,{"inputs":[{"name":"signal"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflags"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signal"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signal"}],"output":{"name":"result"}}],[17,"NSIG","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"eq","","",96,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",98,null],[11,"iterator","","",96,{"inputs":[],"output":{"name":"signaliterator"}}],[11,"from_c_int","","",96,{"inputs":[{"name":"c_int"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"cmp","","",99,null],[11,"partial_cmp","","",99,null],[11,"lt","","",99,null],[11,"le","","",99,null],[11,"gt","","",99,null],[11,"ge","","",99,null],[11,"clone","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"fmt","","",99,null],[11,"empty","","Returns an empty set of flags.",99,{"inputs":[],"output":{"name":"saflags"}}],[11,"all","","Returns the set containing all flags.",99,{"inputs":[],"output":{"name":"saflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",99,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",99,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",99,{"inputs":[{"name":"c_int"}],"output":{"name":"saflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",99,null],[11,"is_all","","Returns `true` if all flags are currently set.",99,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",99,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",99,null],[11,"insert","","Inserts the specified flags in-place.",99,null],[11,"remove","","Removes the specified flags in-place.",99,null],[11,"toggle","","Toggles the specified flags in-place.",99,null],[11,"bitor","","Returns the union of the two sets of flags.",99,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",99,null],[11,"bitand","","Returns the intersection between the two sets of flags.",99,null],[11,"sub","","Returns the set difference of the two sets of flags.",99,null],[11,"not","","Returns the complement of this set of flags.",99,null],[11,"from_iter","","",99,{"inputs":[{"name":"t"}],"output":{"name":"saflags"}}],[11,"hash","","",100,null],[11,"cmp","","",100,null],[11,"partial_cmp","","",100,null],[11,"lt","","",100,null],[11,"le","","",100,null],[11,"gt","","",100,null],[11,"ge","","",100,null],[11,"clone","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"fmt","","",100,null],[11,"empty","","Returns an empty set of flags.",100,{"inputs":[],"output":{"name":"sigflags"}}],[11,"all","","Returns the set containing all flags.",100,{"inputs":[],"output":{"name":"sigflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",100,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",100,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",100,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",100,null],[11,"is_all","","Returns `true` if all flags are currently set.",100,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",100,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",100,null],[11,"insert","","Inserts the specified flags in-place.",100,null],[11,"remove","","Removes the specified flags in-place.",100,null],[11,"toggle","","Toggles the specified flags in-place.",100,null],[11,"bitor","","Returns the union of the two sets of flags.",100,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",100,null],[11,"bitand","","Returns the intersection between the two sets of flags.",100,null],[11,"sub","","Returns the set difference of the two sets of flags.",100,null],[11,"not","","Returns the complement of this set of flags.",100,null],[11,"from_iter","","",100,{"inputs":[{"name":"t"}],"output":{"name":"sigflags"}}],[11,"clone","","",101,null],[11,"all","","",101,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",101,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",101,null],[11,"clear","","",101,null],[11,"remove","","",101,null],[11,"contains","","",101,null],[11,"extend","","",101,null],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",101,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",101,null],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",101,null],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",101,null],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",101,null],[11,"wait","","Suspends execution of the calling thread until one of the signals in the\nsignal mask becomes pending, and returns the accepted signal.",101,null],[11,"as_ref","","",101,null],[11,"eq","","",97,null],[11,"ne","","",97,null],[11,"clone","","",97,null],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the\ntype of the `handler` argument.",102,{"inputs":[{"name":"sighandler"},{"name":"saflags"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"UnixAddr","","A wrapper around `sockaddr_un`. We track the length of `sun_path`,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\n`size_of::&lt;sa_family_t&gt;()`.",null,null],[12,"0","","",103,null],[12,"1","","",103,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",104,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",105,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",106,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",107,null],[12,"imr_interface","","",107,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",108,null],[12,"ipv6mr_interface","","",108,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",109,null],[12,"address","","",109,null],[12,"flags","","",109,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",110,null],[12,"l_linger","","",110,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",111,null],[13,"Inet","","",111,null],[13,"Inet6","","",111,null],[13,"Netlink","","",111,null],[13,"Packet","","",111,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",112,null],[13,"Unix","","",112,null],[13,"Netlink","","",112,null],[4,"InetAddr","","",null,null],[13,"V4","","",113,null],[13,"V6","","",113,null],[4,"IpAddr","","",null,null],[13,"V4","","",114,null],[13,"V6","","",114,null],[4,"SockType","","",null,null],[13,"Stream","","",115,null],[13,"Datagram","","",115,null],[13,"SeqPacket","","",115,null],[13,"Raw","","",115,null],[13,"Rdm","","",115,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n&quot;Ancillary messages&quot; section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",116,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",117,null],[13,"Tcp","","",117,null],[13,"Ip","","",117,null],[13,"Ipv6","","",117,null],[13,"Udp","","",117,null],[13,"Netlink","","",117,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",118,null],[13,"Write","","Further  transmissions will be disallowed.",118,null],[13,"Both","","Further receptions and transmissions will be disallowed.",118,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",106,null],[11,"eq","","",106,null],[11,"hash","","",106,null],[11,"new","","",106,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",106,null],[11,"groups","","",106,null],[11,"fmt","","",106,null],[11,"hash","","",111,null],[11,"fmt","","",111,null],[11,"eq","","",111,null],[11,"clone","","",111,null],[11,"from_std","","",113,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",113,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",113,null],[11,"port","","Gets the port number associated with this socket address",113,null],[11,"to_std","","",113,null],[11,"to_str","","",113,null],[11,"eq","","",113,null],[11,"hash","","",113,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",114,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",114,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",114,null],[11,"new","","",104,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",104,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",104,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",104,null],[11,"to_std","","",104,null],[11,"eq","","",104,null],[11,"hash","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",104,null],[11,"clone","","",105,null],[11,"new","","",105,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",105,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",105,null],[11,"to_std","","",105,null],[11,"fmt","","",105,null],[11,"new","","Create a new sockaddr_un representing a filesystem path.",103,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",103,null],[11,"path","","If this address represents a filesystem path, return that path.",103,null],[11,"eq","","",103,null],[11,"hash","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",103,null],[11,"new_inet","","",112,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",112,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_netlink","","",112,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",112,null],[11,"to_str","","",112,null],[11,"as_ffi_pair","","",112,null],[11,"eq","","",112,null],[11,"hash","","",112,null],[11,"clone","","",112,null],[11,"fmt","","",112,null],[11,"hash","","",119,null],[11,"cmp","","",119,null],[11,"partial_cmp","","",119,null],[11,"lt","","",119,null],[11,"le","","",119,null],[11,"gt","","",119,null],[11,"ge","","",119,null],[11,"clone","","",119,null],[11,"eq","","",119,null],[11,"ne","","",119,null],[11,"fmt","","",119,null],[11,"empty","","Returns an empty set of flags.",119,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",119,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",119,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",119,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",119,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,null],[11,"is_all","","Returns `true` if all flags are currently set.",119,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,null],[11,"insert","","Inserts the specified flags in-place.",119,null],[11,"remove","","Removes the specified flags in-place.",119,null],[11,"toggle","","Toggles the specified flags in-place.",119,null],[11,"bitor","","Returns the union of the two sets of flags.",119,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,null],[11,"bitand","","Returns the intersection between the two sets of flags.",119,null],[11,"sub","","Returns the set difference of the two sets of flags.",119,null],[11,"not","","Returns the complement of this set of flags.",119,null],[11,"from_iter","","",119,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","",107,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",108,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[3,"OriginalDst","","",null,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"set","","",120,null],[11,"get","","",120,null],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"set","","",121,null],[11,"get","","",121,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"set","","",122,null],[11,"get","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"set","","",123,null],[11,"get","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"set","","",124,null],[11,"fmt","","",125,null],[11,"clone","","",125,null],[11,"set","","",125,null],[11,"fmt","","",126,null],[11,"clone","","",126,null],[11,"set","","",126,null],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"set","","",127,null],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"set","","",128,null],[11,"get","","",128,null],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"set","","",129,null],[11,"get","","",129,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"set","","",130,null],[11,"get","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"set","","",131,null],[11,"get","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"set","","",132,null],[11,"get","","",132,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"set","","",133,null],[11,"get","","",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"get","","",134,null],[11,"fmt","","",135,null],[11,"clone","","",135,null],[11,"set","","",135,null],[11,"get","","",135,null],[11,"fmt","","",136,null],[11,"clone","","",136,null],[11,"get","","",136,null],[11,"fmt","","",137,null],[11,"clone","","",137,null],[11,"set","","",137,null],[11,"get","","",137,null],[11,"fmt","","",138,null],[11,"clone","","",138,null],[11,"set","","",138,null],[11,"get","","",138,null],[11,"fmt","","",139,null],[11,"clone","","",139,null],[11,"set","","",139,null],[11,"get","","",139,null],[11,"fmt","","",140,null],[11,"clone","","",140,null],[11,"set","","",140,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"set","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"get","","",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"get","","",143,null],[11,"fmt","","",144,null],[11,"clone","","",144,null],[11,"get","","",144,null],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",145,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",146,null],[11,"fmt","","",115,null],[11,"eq","","",115,null],[11,"clone","","",115,null],[11,"hash","","",147,null],[11,"cmp","","",147,null],[11,"partial_cmp","","",147,null],[11,"lt","","",147,null],[11,"le","","",147,null],[11,"gt","","",147,null],[11,"ge","","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"fmt","","",147,null],[11,"empty","","Returns an empty set of flags.",147,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",147,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",147,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",147,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",147,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",147,null],[11,"is_all","","Returns `true` if all flags are currently set.",147,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",147,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",147,null],[11,"insert","","Inserts the specified flags in-place.",147,null],[11,"remove","","Removes the specified flags in-place.",147,null],[11,"toggle","","Toggles the specified flags in-place.",147,null],[11,"bitor","","Returns the union of the two sets of flags.",147,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",147,null],[11,"bitand","","Returns the intersection between the two sets of flags.",147,null],[11,"sub","","Returns the set difference of the two sets of flags.",147,null],[11,"not","","Returns the complement of this set of flags.",147,null],[11,"from_iter","","",147,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",148,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",109,null],[11,"next","","",149,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"fmt","","",150,null],[11,"eq","","",150,null],[11,"ne","","",150,null],[11,"clone","","",150,null],[11,"fmt","","",118,null],[11,"eq","","",118,null],[11,"clone","","",118,null],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",63,null],[12,"st_ino","","",63,null],[12,"st_nlink","","",63,null],[12,"st_mode","","",63,null],[12,"st_uid","","",63,null],[12,"st_gid","","",63,null],[12,"st_rdev","","",63,null],[12,"st_size","","",63,null],[12,"st_blksize","","",63,null],[12,"st_blocks","","",63,null],[12,"st_atime","","",63,null],[12,"st_atime_nsec","","",63,null],[12,"st_mtime","","",63,null],[12,"st_mtime_nsec","","",63,null],[12,"st_ctime","","",63,null],[12,"st_ctime_nsec","","",63,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",151,null],[11,"cmp","","",151,null],[11,"partial_cmp","","",151,null],[11,"lt","","",151,null],[11,"le","","",151,null],[11,"gt","","",151,null],[11,"ge","","",151,null],[11,"clone","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"fmt","","",151,null],[11,"empty","","Returns an empty set of flags.",151,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",151,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",151,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",151,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",151,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",151,null],[11,"is_all","","Returns `true` if all flags are currently set.",151,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",151,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",151,null],[11,"insert","","Inserts the specified flags in-place.",151,null],[11,"remove","","Removes the specified flags in-place.",151,null],[11,"toggle","","Toggles the specified flags in-place.",151,null],[11,"bitor","","Returns the union of the two sets of flags.",151,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",151,null],[11,"bitand","","Returns the intersection between the two sets of flags.",151,null],[11,"sub","","Returns the set difference of the two sets of flags.",151,null],[11,"not","","Returns the complement of this set of flags.",151,null],[11,"from_iter","","",151,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",152,null],[11,"cmp","","",152,null],[11,"partial_cmp","","",152,null],[11,"lt","","",152,null],[11,"le","","",152,null],[11,"gt","","",152,null],[11,"ge","","",152,null],[11,"clone","","",152,null],[11,"eq","","",152,null],[11,"ne","","",152,null],[11,"fmt","","",152,null],[11,"empty","","Returns an empty set of flags.",152,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",152,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",152,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",152,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",152,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",152,null],[11,"is_all","","Returns `true` if all flags are currently set.",152,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",152,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",152,null],[11,"insert","","Inserts the specified flags in-place.",152,null],[11,"remove","","Removes the specified flags in-place.",152,null],[11,"toggle","","Toggles the specified flags in-place.",152,null],[11,"bitor","","Returns the union of the two sets of flags.",152,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",152,null],[11,"bitand","","Returns the intersection between the two sets of flags.",152,null],[11,"sub","","Returns the set difference of the two sets of flags.",152,null],[11,"not","","Returns the complement of this set of flags.",152,null],[11,"from_iter","","",152,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"reboot","nix::sys","Reboot/shutdown or enable/disable Ctrl-Alt-Delete.",null,null],[4,"RebootMode","nix::sys::reboot","How exactly should the system be rebooted.",null,null],[13,"RB_HALT_SYSTEM","","",153,null],[13,"RB_KEXEC","","",153,null],[13,"RB_POWER_OFF","","",153,null],[13,"RB_AUTOBOOT","","",153,null],[13,"RB_SW_SUSPEND","","",153,null],[5,"reboot","","",null,{"inputs":[{"name":"rebootmode"}],"output":{"name":"result"}}],[5,"set_cad_enabled","","Enable or disable the reboot keystroke (Ctrl-Alt-Delete).",null,{"inputs":[{"name":"bool"}],"output":{"name":"result"}}],[11,"eq","","",153,null],[11,"fmt","","",153,null],[11,"clone","","",153,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",154,null],[12,"c_oflag","","",154,null],[12,"c_cflag","","",154,null],[12,"c_lflag","","",154,null],[12,"c_line","","",154,null],[12,"c_cc","","",154,null],[12,"c_ispeed","","",154,null],[12,"c_ospeed","","",154,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",155,null],[13,"TCSADRAIN","","",155,null],[13,"TCSAFLUSH","","",155,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",156,null],[13,"TCOFLUSH","","",156,null],[13,"TCIOFLUSH","","",156,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",157,null],[13,"TCOON","","",157,null],[13,"TCIOFF","","",157,null],[13,"TCION","","",157,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",154,null],[11,"hash","","",158,null],[11,"cmp","","",158,null],[11,"partial_cmp","","",158,null],[11,"lt","","",158,null],[11,"le","","",158,null],[11,"gt","","",158,null],[11,"ge","","",158,null],[11,"clone","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"fmt","","",158,null],[11,"empty","","Returns an empty set of flags.",158,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",158,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",158,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",158,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",158,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",158,null],[11,"is_all","","Returns `true` if all flags are currently set.",158,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",158,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",158,null],[11,"insert","","Inserts the specified flags in-place.",158,null],[11,"remove","","Removes the specified flags in-place.",158,null],[11,"toggle","","Toggles the specified flags in-place.",158,null],[11,"bitor","","Returns the union of the two sets of flags.",158,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",158,null],[11,"bitand","","Returns the intersection between the two sets of flags.",158,null],[11,"sub","","Returns the set difference of the two sets of flags.",158,null],[11,"not","","Returns the complement of this set of flags.",158,null],[11,"from_iter","","",158,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",159,null],[11,"cmp","","",159,null],[11,"partial_cmp","","",159,null],[11,"lt","","",159,null],[11,"le","","",159,null],[11,"gt","","",159,null],[11,"ge","","",159,null],[11,"clone","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"fmt","","",159,null],[11,"empty","","Returns an empty set of flags.",159,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",159,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",159,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",159,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",159,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",159,null],[11,"is_all","","Returns `true` if all flags are currently set.",159,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",159,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",159,null],[11,"insert","","Inserts the specified flags in-place.",159,null],[11,"remove","","Removes the specified flags in-place.",159,null],[11,"toggle","","Toggles the specified flags in-place.",159,null],[11,"bitor","","Returns the union of the two sets of flags.",159,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",159,null],[11,"bitand","","Returns the intersection between the two sets of flags.",159,null],[11,"sub","","Returns the set difference of the two sets of flags.",159,null],[11,"not","","Returns the complement of this set of flags.",159,null],[11,"from_iter","","",159,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",160,null],[11,"cmp","","",160,null],[11,"partial_cmp","","",160,null],[11,"lt","","",160,null],[11,"le","","",160,null],[11,"gt","","",160,null],[11,"ge","","",160,null],[11,"clone","","",160,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"fmt","","",160,null],[11,"empty","","Returns an empty set of flags.",160,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",160,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",160,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",160,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",160,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",160,null],[11,"is_all","","Returns `true` if all flags are currently set.",160,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",160,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",160,null],[11,"insert","","Inserts the specified flags in-place.",160,null],[11,"remove","","Removes the specified flags in-place.",160,null],[11,"toggle","","Toggles the specified flags in-place.",160,null],[11,"bitor","","Returns the union of the two sets of flags.",160,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",160,null],[11,"bitand","","Returns the intersection between the two sets of flags.",160,null],[11,"sub","","Returns the set difference of the two sets of flags.",160,null],[11,"not","","Returns the complement of this set of flags.",160,null],[11,"from_iter","","",160,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",161,null],[11,"cmp","","",161,null],[11,"partial_cmp","","",161,null],[11,"lt","","",161,null],[11,"le","","",161,null],[11,"gt","","",161,null],[11,"ge","","",161,null],[11,"clone","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"fmt","","",161,null],[11,"empty","","Returns an empty set of flags.",161,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",161,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",161,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",161,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",161,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",161,null],[11,"is_all","","Returns `true` if all flags are currently set.",161,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",161,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",161,null],[11,"insert","","Inserts the specified flags in-place.",161,null],[11,"remove","","Removes the specified flags in-place.",161,null],[11,"toggle","","Toggles the specified flags in-place.",161,null],[11,"bitor","","Returns the union of the two sets of flags.",161,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",161,null],[11,"bitand","","Returns the intersection between the two sets of flags.",161,null],[11,"sub","","Returns the set difference of the two sets of flags.",161,null],[11,"not","","Returns the complement of this set of flags.",161,null],[11,"from_iter","","",161,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",155,null],[11,"clone","","",156,null],[11,"clone","","",157,null],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",162,null],[11,"sysname","","",162,null],[11,"nodename","","",162,null],[11,"release","","",162,null],[11,"version","","",162,null],[11,"machine","","",162,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",163,null],[13,"Signaled","","",163,null],[13,"Stopped","","",163,null],[13,"Continued","","",163,null],[13,"StillAlive","","",163,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[11,"hash","","",164,null],[11,"cmp","","",164,null],[11,"partial_cmp","","",164,null],[11,"lt","","",164,null],[11,"le","","",164,null],[11,"gt","","",164,null],[11,"ge","","",164,null],[11,"clone","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"fmt","","",164,null],[11,"empty","","Returns an empty set of flags.",164,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",164,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",164,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",164,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",164,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",164,null],[11,"is_all","","Returns `true` if all flags are currently set.",164,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",164,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",164,null],[11,"insert","","Inserts the specified flags in-place.",164,null],[11,"remove","","Removes the specified flags in-place.",164,null],[11,"toggle","","Toggles the specified flags in-place.",164,null],[11,"bitor","","Returns the union of the two sets of flags.",164,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",164,null],[11,"bitand","","Returns the intersection between the two sets of flags.",164,null],[11,"sub","","Returns the set difference of the two sets of flags.",164,null],[11,"not","","Returns the complement of this set of flags.",164,null],[11,"from_iter","","",164,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",163,null],[11,"clone","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap&#39;d region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"cmp","","",165,null],[11,"partial_cmp","","",165,null],[11,"lt","","",165,null],[11,"le","","",165,null],[11,"gt","","",165,null],[11,"ge","","",165,null],[11,"clone","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"fmt","","",165,null],[11,"empty","","Returns an empty set of flags.",165,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",165,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",165,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",165,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",165,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",165,null],[11,"is_all","","Returns `true` if all flags are currently set.",165,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",165,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",165,null],[11,"insert","","Inserts the specified flags in-place.",165,null],[11,"remove","","Removes the specified flags in-place.",165,null],[11,"toggle","","Toggles the specified flags in-place.",165,null],[11,"bitor","","Returns the union of the two sets of flags.",165,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",165,null],[11,"bitand","","Returns the intersection between the two sets of flags.",165,null],[11,"sub","","Returns the set difference of the two sets of flags.",165,null],[11,"not","","Returns the complement of this set of flags.",165,null],[11,"from_iter","","",165,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"hash","","",166,null],[11,"cmp","","",166,null],[11,"partial_cmp","","",166,null],[11,"lt","","",166,null],[11,"le","","",166,null],[11,"gt","","",166,null],[11,"ge","","",166,null],[11,"clone","","",166,null],[11,"eq","","",166,null],[11,"ne","","",166,null],[11,"fmt","","",166,null],[11,"empty","","Returns an empty set of flags.",166,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",166,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",166,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",166,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",166,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",166,null],[11,"is_all","","Returns `true` if all flags are currently set.",166,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",166,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",166,null],[11,"insert","","Inserts the specified flags in-place.",166,null],[11,"remove","","Removes the specified flags in-place.",166,null],[11,"toggle","","Toggles the specified flags in-place.",166,null],[11,"bitor","","Returns the union of the two sets of flags.",166,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",166,null],[11,"bitand","","Returns the intersection between the two sets of flags.",166,null],[11,"sub","","Returns the set difference of the two sets of flags.",166,null],[11,"not","","Returns the complement of this set of flags.",166,null],[11,"from_iter","","",166,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"hash","","",167,null],[11,"cmp","","",167,null],[11,"partial_cmp","","",167,null],[11,"lt","","",167,null],[11,"le","","",167,null],[11,"gt","","",167,null],[11,"ge","","",167,null],[11,"clone","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"fmt","","",167,null],[11,"empty","","Returns an empty set of flags.",167,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",167,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",167,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",167,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",167,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",167,null],[11,"is_all","","Returns `true` if all flags are currently set.",167,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",167,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",167,null],[11,"insert","","Inserts the specified flags in-place.",167,null],[11,"remove","","Removes the specified flags in-place.",167,null],[11,"toggle","","Toggles the specified flags in-place.",167,null],[11,"bitor","","Returns the union of the two sets of flags.",167,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",167,null],[11,"bitand","","Returns the intersection between the two sets of flags.",167,null],[11,"sub","","Returns the set difference of the two sets of flags.",167,null],[11,"not","","Returns the complement of this set of flags.",167,null],[11,"from_iter","","",167,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",168,null],[11,"from_slice","","",168,null],[11,"from_mut_slice","","",168,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",169,null],[12,"tv_usec","","",169,null],[11,"fmt","","",169,null],[11,"cmp","","",169,null],[11,"partial_cmp","","",169,null],[11,"lt","","",169,null],[11,"le","","",169,null],[11,"gt","","",169,null],[11,"ge","","",169,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"clone","","",169,null],[11,"zero","","",169,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",169,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",169,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",169,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",169,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",169,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",169,null],[11,"num_minutes","","",169,null],[11,"num_seconds","","",169,null],[11,"num_milliseconds","","",169,null],[11,"num_microseconds","","",169,null],[11,"neg","","",169,null],[11,"add","","",169,null],[11,"sub","","",169,null],[11,"mul","","",169,null],[11,"div","","",169,null],[11,"fmt","","",169,null],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with `ptrace(PTRACE_SETOPTIONS,...)`.",null,{"inputs":[{"name":"pid_t"},{"name":"ptraceoptions"}],"output":{"name":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",170,null],[11,"new","","",170,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",170,null],[11,"remove","","",170,null],[11,"contains","","",170,null],[11,"clear","","",170,null],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",171,null],[12,"1","","",171,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",172,null],[12,"bsoftlimit","","",172,null],[12,"curspace","","",172,null],[12,"ihardlimit","","",172,null],[12,"isoftlimit","","",172,null],[12,"curinodes","","",172,null],[12,"btime","","",172,null],[12,"itime","","",172,null],[12,"valid","","",172,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",171,null],[11,"hash","","",173,null],[11,"cmp","","",173,null],[11,"partial_cmp","","",173,null],[11,"lt","","",173,null],[11,"le","","",173,null],[11,"gt","","",173,null],[11,"ge","","",173,null],[11,"clone","","",173,null],[11,"eq","","",173,null],[11,"ne","","",173,null],[11,"default","","",173,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",173,null],[11,"empty","","Returns an empty set of flags.",173,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",173,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",173,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",173,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",173,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",173,null],[11,"is_all","","Returns `true` if all flags are currently set.",173,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",173,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",173,null],[11,"insert","","Inserts the specified flags in-place.",173,null],[11,"remove","","Removes the specified flags in-place.",173,null],[11,"toggle","","Toggles the specified flags in-place.",173,null],[11,"bitor","","Returns the union of the two sets of flags.",173,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",173,null],[11,"bitand","","Returns the intersection between the two sets of flags.",173,null],[11,"sub","","Returns the set difference of the two sets of flags.",173,null],[11,"not","","Returns the complement of this set of flags.",173,null],[11,"from_iter","","",173,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",172,null],[11,"fmt","","",172,null],[11,"default","","",172,{"inputs":[],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",174,null],[12,"f_bsize","","",174,null],[12,"f_blocks","","",174,null],[12,"f_bfree","","",174,null],[12,"f_bavail","","",174,null],[12,"f_files","","",174,null],[12,"f_ffree","","",174,null],[12,"f_fsid","","",174,null],[12,"f_namelen","","",174,null],[12,"f_frsize","","",174,null],[12,"f_spare","","",174,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"clone","","",174,null],[11,"fmt","","",174,null],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",175,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",175,null],[12,"f_blocks","","Total number of blocks on the filesystem",175,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",175,null],[12,"f_bavail","","Number of blocks available to non-root users",175,null],[12,"f_files","","Total number of inodes available on the filesystem",175,null],[12,"f_ffree","","Number of inodes available on the filesystem",175,null],[12,"f_favail","","Number of inodes available to non-root users",175,null],[12,"f_fsid","","File System ID",175,null],[12,"f_flag","","Mount Flags",175,null],[12,"f_namemax","","Maximum filename length",175,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"hash","","",176,null],[11,"cmp","","",176,null],[11,"partial_cmp","","",176,null],[11,"lt","","",176,null],[11,"le","","",176,null],[11,"gt","","",176,null],[11,"ge","","",176,null],[11,"clone","","",176,null],[11,"eq","","",176,null],[11,"ne","","",176,null],[11,"default","","",176,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",176,null],[11,"empty","","Returns an empty set of flags.",176,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",176,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",176,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",176,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",176,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",176,null],[11,"is_all","","Returns `true` if all flags are currently set.",176,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",176,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",176,null],[11,"insert","","Inserts the specified flags in-place.",176,null],[11,"remove","","Removes the specified flags in-place.",176,null],[11,"toggle","","Toggles the specified flags in-place.",176,null],[11,"bitor","","Returns the union of the two sets of flags.",176,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",176,null],[11,"bitand","","Returns the intersection between the two sets of flags.",176,null],[11,"sub","","Returns the set difference of the two sets of flags.",176,null],[11,"not","","Returns the complement of this set of flags.",176,null],[11,"from_iter","","",176,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",175,null],[11,"fmt","","",175,null],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",175,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",175,null],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",175,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",175,null],[11,"default","","Create a statvfs object initialized to all zeros",175,{"inputs":[],"output":{"name":"self"}}],[0,"ucontext","nix","",null,null],[3,"UContext","nix::ucontext","",null,null],[11,"clone","","",177,null],[11,"get","","",177,{"inputs":[],"output":{"name":"result"}}],[11,"set","","",177,null],[11,"sigmask_mut","","",177,null],[11,"sigmask","","",177,null],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"ForkResult","nix::unistd","",null,null],[13,"Parent","","",178,null],[12,"child","nix::unistd::ForkResult","",178,null],[13,"Child","nix::unistd","",178,null],[4,"Whence","","",null,null],[13,"SeekSet","","",179,null],[13,"SeekCur","","",179,null],[13,"SeekEnd","","",179,null],[13,"SeekData","","",179,null],[13,"SeekHole","","",179,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"gettid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"mkdir","","Creates new directory `path` with access rights `mode`.",null,{"inputs":[{"name":"p"},{"name":"mode"}],"output":{"name":"result"}}],[5,"getcwd","","Returns the current directory as a PathBuf",null,{"inputs":[],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"},{"name":"whence"}],"output":{"name":"result"}}],[5,"lseek64","","",null,{"inputs":[{"name":"rawfd"},{"name":"off64_t"},{"name":"whence"}],"output":{"name":"result"}}],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[5,"pause","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"sleep","","",null,{"inputs":[{"name":"c_uint"}],"output":{"name":"c_uint"}}],[11,"clone","","",178,null],[11,"is_child","","",178,null],[11,"is_parent","","",178,null],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",180,null],[10,"with_nix_path","","",180,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"from_errno","","",74,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",74,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",74,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",74,null],[11,"from","","",74,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",74,null],[11,"fmt","","",74,null],[11,"from","std::io::error","",76,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"len","std::ffi::os_str","",181,null],[11,"with_nix_path","","",181,null],[11,"len","std::ffi::c_str","",182,null],[11,"with_nix_path","","",182,null],[11,"len","std::path","",183,null],[11,"with_nix_path","","",183,null],[11,"len","","",184,null],[11,"with_nix_path","","",184,null],[11,"len","core::option","",185,null],[11,"with_nix_path","","",185,null],[14,"ioc!","nix","Encode an ioctl command.",null,null],[14,"io!","","Encode an ioctl command that has no associated data.",null,null],[14,"ior!","","Encode an ioctl command that reads.",null,null],[14,"iow!","","Encode an ioctl command that writes.",null,null],[14,"iorw!","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res!","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl!","","Declare a wrapper function around an ioctl.",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"if_nameindex"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sem_t"],[3,"sigset_t"],[3,"sysinfo"],[3,"FileStat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"Error"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[4,"Signal"],[4,"SigHandler"],[3,"SignalIterator"],[3,"SaFlags"],[3,"SigFlags"],[3,"SigSet"],[3,"SigAction"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[3,"OriginalDst"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"SFlag"],[3,"Mode"],[4,"RebootMode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[3,"UContext"],[4,"ForkResult"],[4,"Whence"],[8,"NixPath"],[3,"OsStr"],[3,"CStr"],[3,"Path"],[3,"PathBuf"],[4,"Option"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["glob"] = {"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular\npattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner.\nThis currently only considers upper/lower case relationships between\nASCII characters, but in future this might be extended to work with\nUnicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on\nPosix) must be matched by a literal `/`, rather than by `*` or `?` or\n`[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.`\nwill not match unless the `.` appears literally in the pattern: `*`, `?`, `**`,\nor `[...]` will not match. This is useful because such files are\nconventionally considered hidden on Unix systems and it might be\ndesirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,null],[11,"path","","The Path that the error corresponds to.",2,null],[11,"error","","The error in question.",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"fmt","","",2,null],[11,"next","","",3,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"pattern"}}],[11,"hash","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",4,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",4,null],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,null],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified\nmatch options.",4,null],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the specified match options.",4,null],[11,"as_str","","Access the original glob pattern.",4,null],[11,"default","","",1,{"inputs":[],"output":{"name":"matchoptions"}}],[11,"hash","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions`\nparameter.",1,{"inputs":[],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"cmp","","",6,null],[11,"clone","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,null],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,null],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,null],[11,"split_off","","Splits the collection into two at the given index.",7,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"drop","collections::binary_heap","",8,null],[11,"deref","","",8,null],[11,"deref_mut","","",8,null],[11,"clone","","",9,null],[11,"clone_from","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",9,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",9,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",9,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",9,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",9,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",9,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",9,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",9,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",9,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",9,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",9,null],[11,"push","","Pushes an item onto the binary heap.",9,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",9,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",9,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",9,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",9,null],[11,"len","","Returns the length of the binary heap.",9,null],[11,"is_empty","","Checks if the binary heap is empty.",9,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",9,null],[11,"clear","","Drops all items from the binary heap.",9,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",9,null],[11,"clone","","",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"clone","","",11,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"next_back","","",12,null],[11,"from","","",9,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",9,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",9,null],[11,"extend","","",9,null],[11,"extend","","",9,null],[11,"drop","collections::btree::map","",13,null],[11,"clone","","",13,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",13,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",13,null],[11,"get","","Returns a reference to the value corresponding to the key.",13,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",13,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",13,null],[11,"insert","","Inserts a key-value pair into the map.",13,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",13,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",13,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",13,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",13,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",13,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",13,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next_back","","",14,null],[11,"len","","",14,null],[11,"clone","","",14,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"len","","",15,null],[11,"into_iter","","",13,null],[11,"drop","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"next_back","","",16,null],[11,"len","","",16,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"next_back","","",17,null],[11,"len","","",17,null],[11,"clone","","",17,null],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"next_back","","",18,null],[11,"len","","",18,null],[11,"clone","","",18,null],[11,"next","","",19,null],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"next_back","","",20,null],[11,"len","","",20,null],[11,"next_back","","",19,null],[11,"clone","","",19,null],[11,"next","","",21,null],[11,"next_back","","",21,null],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",13,null],[11,"extend","","",13,null],[11,"hash","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",13,null],[11,"partial_cmp","","",13,null],[11,"cmp","","",13,null],[11,"fmt","","",13,null],[11,"index","","",13,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",13,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",13,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",13,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",13,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",13,null],[11,"len","","Returns the number of elements in the map.",13,null],[11,"is_empty","","Returns true if the map contains no elements.",13,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",22,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",22,null],[11,"key","","Returns a reference to this entry&#39;s key.",22,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",23,null],[11,"into_key","","Take ownership of the key.",23,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",23,null],[11,"key","","Gets a reference to the key in the entry.",24,null],[11,"remove_pair","","Take ownership of the key and value from the map.",24,null],[11,"get","","Gets a reference to the value in the entry.",24,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",24,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",24,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",24,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",24,null],[11,"partial_cmp","collections::btree::set","",25,null],[11,"lt","","",25,null],[11,"le","","",25,null],[11,"gt","","",25,null],[11,"ge","","",25,null],[11,"cmp","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"hash","","",25,null],[11,"clone","","",25,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",25,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",25,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",25,null],[11,"difference","","Visits the values representing the difference, in ascending order.",25,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",25,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",25,null],[11,"union","","Visits the values representing the union, in ascending order.",25,null],[11,"len","","Returns the number of elements in the set.",25,null],[11,"is_empty","","Returns true if the set contains no elements.",25,null],[11,"clear","","Clears the set, removing all values.",25,null],[11,"contains","","Returns `true` if the set contains a value.",25,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",25,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",25,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",25,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",25,null],[11,"insert","","Adds a value to the set.",25,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",25,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",25,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",25,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",25,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",25,null],[11,"from_iter","","",25,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",25,null],[11,"extend","","",25,null],[11,"extend","","",25,null],[11,"default","","",25,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",25,null],[11,"clone","","",26,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"next_back","","",26,null],[11,"len","","",26,null],[11,"next","","",27,null],[11,"size_hint","","",27,null],[11,"next_back","","",27,null],[11,"len","","",27,null],[11,"clone","","",28,null],[11,"next","","",28,null],[11,"next_back","","",28,null],[11,"clone","","",29,null],[11,"next","","",29,null],[11,"size_hint","","",29,null],[11,"clone","","",30,null],[11,"next","","",30,null],[11,"size_hint","","",30,null],[11,"clone","","",31,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"clone","","",32,null],[11,"next","","",32,null],[11,"size_hint","","",32,null],[11,"borrow","collections::borrow","",33,null],[11,"clone","","",33,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",33,null],[11,"into_owned","","Extracts the owned data.",33,null],[11,"deref","","",33,null],[11,"cmp","","",33,null],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"fmt","","",33,null],[11,"fmt","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",33,null],[11,"as_ref","","",33,null],[11,"hash","collections::enum_set","",34,null],[11,"cmp","","",34,null],[11,"partial_cmp","","",34,null],[11,"lt","","",34,null],[11,"le","","",34,null],[11,"gt","","",34,null],[11,"ge","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"new","","Returns an empty `EnumSet`.",34,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",34,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",34,null],[11,"clear","","",34,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",34,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",34,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",34,null],[11,"union","","Returns the union of both `EnumSets`.",34,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",34,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",34,null],[11,"remove","","Removes an enum from the EnumSet",34,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",34,null],[11,"iter","","Returns an iterator over an `EnumSet`.",34,null],[11,"sub","","",34,null],[11,"bitor","","",34,null],[11,"bitand","","",34,null],[11,"bitxor","","",34,null],[11,"clone","","",35,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"from_iter","","",34,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",34,null],[11,"extend","","",34,null],[11,"clone","collections::linked_list","",36,null],[11,"clone","","",37,null],[11,"default","","",38,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",38,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",38,null],[11,"iter","","Provides a forward iterator.",38,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",38,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",38,null],[11,"len","","Returns the length of the `LinkedList`.",38,null],[11,"clear","","Removes all elements from the `LinkedList`.",38,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",38,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",38,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",38,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",38,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",38,null],[11,"push_front","","Adds an element first in the list.",38,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",38,null],[11,"push_back","","Appends an element to the back of a list",38,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",38,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",38,null],[11,"front_place","","Returns a place for insertion at the front of the list.",38,null],[11,"back_place","","Returns a place for insertion at the back of the list.",38,null],[11,"drop","","",38,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"next_back","","",36,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"next_back","","",39,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",39,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",39,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"from_iter","","",38,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",38,null],[11,"extend","","",38,null],[11,"extend","","",38,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"partial_cmp","","",38,null],[11,"cmp","","",38,null],[11,"clone","","",38,null],[11,"fmt","","",38,null],[11,"hash","","",38,null],[11,"make_place","","",40,null],[11,"pointer","","",40,null],[11,"finalize","","",40,null],[11,"make_place","","",41,null],[11,"pointer","","",41,null],[11,"finalize","","",41,null],[11,"start","core::ops","",42,null],[11,"end","","",43,null],[11,"start","","",44,null],[11,"end","","",44,null],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"borrow","collections::string","",46,null],[11,"fmt","core::str::pattern","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"haystack","","",48,null],[11,"next","","",48,null],[11,"next_match","","",48,null],[11,"next_reject","","",48,null],[11,"next_back","","",48,null],[11,"next_match_back","","",48,null],[11,"next_reject_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"haystack","","",49,null],[11,"next","","",49,null],[11,"next_match","","",49,null],[11,"next_reject","","",49,null],[11,"next_back","","",49,null],[11,"next_match_back","","",49,null],[11,"next_reject_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"haystack","","",50,null],[11,"next","","",50,null],[11,"next_match","","",50,null],[11,"next_reject","","",50,null],[11,"next_back","","",50,null],[11,"next_match_back","","",50,null],[11,"next_reject_back","","",50,null],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"haystack","","",51,null],[11,"next","","",51,null],[11,"next_match","","",51,null],[11,"next_back","","",51,null],[11,"next_match_back","","",51,null],[11,"cmp","collections::string","",46,null],[11,"partial_cmp","","",46,null],[11,"lt","","",46,null],[11,"le","","",46,null],[11,"gt","","",46,null],[11,"ge","","",46,null],[11,"fmt","","",52,null],[11,"fmt","","",53,null],[11,"new","","Creates a new empty `String`.",46,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",46,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",46,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",46,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",46,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",46,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",46,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",46,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",46,null],[11,"as_str","","Extracts a string slice containing the entire string.",46,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",46,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",46,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",46,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",46,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",46,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",46,null],[11,"push","","Appends the given `char` to the end of this `String`.",46,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",46,null],[11,"truncate","","Shortens this `String` to the specified length.",46,null],[11,"pop","","Removes the last character from the string buffer and returns it.",46,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",46,null],[11,"insert","","Inserts a character into this `String` at a byte position.",46,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",46,null],[11,"len","","Returns the length of this `String`, in bytes.",46,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",46,null],[11,"clear","","Truncates this `String`, removing all contents.",46,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",46,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",46,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",52,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",52,null],[11,"fmt","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",46,null],[11,"clone_from","","",46,null],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","collections::borrow","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","collections::string","",46,null],[11,"ne","","",46,null],[11,"default","","",46,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",46,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"add","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"from_str","","",46,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"fmt","","",54,null],[11,"eq","","",54,null],[11,"as_ref","","",46,null],[11,"as_ref","","",46,null],[11,"from","","",46,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",33,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",33,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",46,null],[11,"write_str","","",46,null],[11,"write_char","","",46,null],[11,"drop","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"next_back","","",55,null],[11,"clone","collections::vec","",7,null],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,null],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"cmp","","",7,null],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",33,null],[11,"from","","",33,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",56,null],[11,"size_hint","","",56,null],[11,"count","","",56,null],[11,"next_back","","",56,null],[11,"clone","","",56,null],[11,"drop","","",56,null],[11,"next","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"drop","","",57,null],[11,"clone","collections::vec_deque","",58,null],[11,"drop","","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",58,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",58,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",58,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",58,null],[11,"swap","","Swaps elements at indices `i` and `j`.",58,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",58,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",58,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",58,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",58,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",58,null],[11,"iter","","Returns a front-to-back iterator.",58,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",58,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",58,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",58,null],[11,"len","","Returns the number of elements in the `VecDeque`.",58,null],[11,"is_empty","","Returns true if the buffer contains no elements",58,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",58,null],[11,"clear","","Clears the buffer, removing all values.",58,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",58,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",58,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",58,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",58,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",58,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",58,null],[11,"push_front","","Inserts an element first in the sequence.",58,null],[11,"push_back","","Appends an element to the back of a buffer",58,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",58,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",58,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",58,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",58,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",58,null],[11,"split_off","","Splits the collection into two at the given index.",58,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",58,null],[11,"retain","","Retains only the elements specified by the predicate.",58,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",58,null],[11,"clone","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"next_back","","",59,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"drop","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"eq","","",58,null],[11,"partial_cmp","","",58,null],[11,"cmp","","",58,null],[11,"hash","","",58,null],[11,"index","","",58,null],[11,"index_mut","","",58,null],[11,"from_iter","","",58,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",58,null],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"fmt","","",58,null],[11,"from","","",58,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",63,null],[11,"ne","","",63,null],[11,"hash","","",63,null],[11,"fmt","","",63,null],[11,"clone","","",63,null],[11,"clone","alloc::boxed","",64,null],[11,"pointer","","",65,null],[11,"make_place","","",65,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",65,null],[11,"finalize","","",66,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",64,null],[11,"drop","","",65,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",66,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",66,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",66,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",66,null],[11,"clone","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"partial_cmp","","",66,null],[11,"lt","","",66,null],[11,"le","","",66,null],[11,"ge","","",66,null],[11,"gt","","",66,null],[11,"cmp","","",66,null],[11,"hash","","",66,null],[11,"from","","",66,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",66,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",66,null],[11,"fmt","","",66,null],[11,"fmt","","",66,null],[11,"fmt","","",66,null],[11,"deref","","",66,null],[11,"deref_mut","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"call_once","","",66,null],[11,"call_once","","",66,null],[11,"clone","","",66,null],[11,"borrow","","",66,null],[11,"borrow_mut","","",66,null],[11,"as_ref","","",66,null],[11,"as_mut","","",66,null],[11,"deref","regex_syntax","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"fmt","","",67,null],[11,"clone","","",67,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"new","","Create a new builder for configuring expression parsing.",69,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",69,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",69,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",69,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",69,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",69,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",69,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",69,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",69,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",69,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",67,null],[11,"into_iter","","",67,null],[11,"new","","Create a new class from an existing set of ranges.",67,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",67,null],[11,"remove","","Removes the given character from the class if it exists.",67,null],[11,"negate","","Negates the character class.",67,null],[11,"case_fold","","Apply case folding to this character class.",67,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",68,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",68,null],[11,"remove","","Removes the given byte from the class if it exists.",68,null],[11,"negate","","Negates the byte class.",68,null],[11,"case_fold","","Apply case folding to this byte class.",68,null],[11,"deref","","",68,null],[11,"into_iter","","",68,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",67,null],[11,"fmt","","",0,null],[11,"fmt","","",68,null],[11,"fmt","","",1,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"fmt","","",70,null],[11,"clone","","",70,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",70,null],[11,"kind","","Returns the type of the regex parse error.",70,null],[11,"description","","",70,null],[11,"fmt","","",70,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","serde::core","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"default","core::hash::sip","",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",105,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"write","","",105,null],[11,"finish","","",105,null],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"hash_slice","serde::core::hash","Feeds a slice of this type into the state provided.",118,null],[11,"write_u8","","Write a single `u8` into this hasher",119,null],[11,"write_u16","","Write a single `u16` into this hasher.",119,null],[11,"write_u32","","Write a single `u32` into this hasher.",119,null],[11,"write_u64","","Write a single `u64` into this hasher.",119,null],[11,"write_usize","","Write a single `usize` into this hasher.",119,null],[11,"write_i8","","Write a single `i8` into this hasher.",119,null],[11,"write_i16","","Write a single `i16` into this hasher.",119,null],[11,"write_i32","","Write a single `i32` into this hasher.",119,null],[11,"write_i64","","Write a single `i64` into this hasher.",119,null],[11,"write_isize","","Write a single `isize` into this hasher.",119,null],[11,"write_char","serde::core::fmt","Writes a `char` into this writer, returning whether the write succeeded.",120,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",120,null],[11,"ne","serde::core::cmp","This method tests for `!=`.",121,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",122,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",122,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",122,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",122,null],[11,"clone","rustc_unicode::u_str","",123,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",123,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next","","",124,null],[11,"next_back","","",124,null],[11,"next","rustc_unicode::char","",125,null],[11,"next","","",126,null],[11,"clone","","",127,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"fmt","","",128,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",128,null],[11,"fmt","","",128,null],[11,"drop","collections::binary_heap","",129,null],[11,"deref","","",129,null],[11,"deref_mut","","",129,null],[11,"clone","","",130,null],[11,"clone_from","","",130,null],[11,"default","","",130,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",130,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",130,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",130,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",130,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",130,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",130,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",130,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",130,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",130,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",130,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",130,null],[11,"push","","Pushes an item onto the binary heap.",130,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",130,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",130,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",130,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",130,null],[11,"len","","Returns the length of the binary heap.",130,null],[11,"is_empty","","Checks if the binary heap is empty.",130,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",130,null],[11,"clear","","Drops all items from the binary heap.",130,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",130,null],[11,"clone","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"from","","",130,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",134,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",130,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",130,null],[11,"extend","","",130,null],[11,"extend","","",130,null],[11,"drop","collections::btree::map","",135,null],[11,"clone","","",135,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",135,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",135,null],[11,"get","","Returns a reference to the value corresponding to the key.",135,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",135,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",135,null],[11,"insert","","Inserts a key-value pair into the map.",135,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",135,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",135,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",135,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",135,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",135,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next_back","","",136,null],[11,"len","","",136,null],[11,"clone","","",136,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next_back","","",137,null],[11,"len","","",137,null],[11,"into_iter","","",135,null],[11,"drop","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next_back","","",138,null],[11,"len","","",138,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"next_back","","",139,null],[11,"len","","",139,null],[11,"clone","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"next_back","","",140,null],[11,"len","","",140,null],[11,"clone","","",140,null],[11,"next","","",141,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"next_back","","",142,null],[11,"len","","",142,null],[11,"next_back","","",141,null],[11,"clone","","",141,null],[11,"next","","",143,null],[11,"next_back","","",143,null],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",135,null],[11,"extend","","",135,null],[11,"hash","","",135,null],[11,"default","","",135,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",135,null],[11,"partial_cmp","","",135,null],[11,"cmp","","",135,null],[11,"fmt","","",135,null],[11,"index","","",135,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",135,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",135,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",135,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",135,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",135,null],[11,"len","","Returns the number of elements in the map.",135,null],[11,"is_empty","","Returns true if the map contains no elements.",135,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",144,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",144,null],[11,"key","","Returns a reference to this entry&#39;s key.",144,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",145,null],[11,"into_key","","Take ownership of the key.",145,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",145,null],[11,"key","","Gets a reference to the key in the entry.",146,null],[11,"remove_pair","","Take ownership of the key and value from the map.",146,null],[11,"get","","Gets a reference to the value in the entry.",146,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",146,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",146,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",146,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",146,null],[11,"partial_cmp","collections::btree::set","",147,null],[11,"lt","","",147,null],[11,"le","","",147,null],[11,"gt","","",147,null],[11,"ge","","",147,null],[11,"cmp","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"hash","","",147,null],[11,"clone","","",147,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",147,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",147,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",147,null],[11,"difference","","Visits the values representing the difference, in ascending order.",147,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",147,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",147,null],[11,"union","","Visits the values representing the union, in ascending order.",147,null],[11,"len","","Returns the number of elements in the set.",147,null],[11,"is_empty","","Returns true if the set contains no elements.",147,null],[11,"clear","","Clears the set, removing all values.",147,null],[11,"contains","","Returns `true` if the set contains a value.",147,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",147,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",147,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",147,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",147,null],[11,"insert","","Adds a value to the set.",147,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",147,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",147,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",147,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",147,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",147,null],[11,"from_iter","","",147,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",147,null],[11,"extend","","",147,null],[11,"extend","","",147,null],[11,"default","","",147,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",147,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"len","","",148,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"next_back","","",149,null],[11,"len","","",149,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"next_back","","",150,null],[11,"clone","","",151,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"clone","","",154,null],[11,"next","","",154,null],[11,"size_hint","","",154,null],[11,"borrow","collections::borrow","",155,null],[11,"clone","","",155,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",155,null],[11,"into_owned","","Extracts the owned data.",155,null],[11,"deref","","",155,null],[11,"cmp","","",155,null],[11,"eq","","",155,null],[11,"partial_cmp","","",155,null],[11,"fmt","","",155,null],[11,"fmt","","",155,null],[11,"default","","",155,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",155,null],[11,"as_ref","","",155,null],[11,"hash","collections::enum_set","",156,null],[11,"cmp","","",156,null],[11,"partial_cmp","","",156,null],[11,"lt","","",156,null],[11,"le","","",156,null],[11,"gt","","",156,null],[11,"ge","","",156,null],[11,"eq","","",156,null],[11,"ne","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",156,null],[11,"new","","Returns an empty `EnumSet`.",156,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",156,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",156,null],[11,"clear","","",156,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",156,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",156,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",156,null],[11,"union","","Returns the union of both `EnumSets`.",156,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",156,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",156,null],[11,"remove","","Removes an enum from the EnumSet",156,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",156,null],[11,"iter","","Returns an iterator over an `EnumSet`.",156,null],[11,"sub","","",156,null],[11,"bitor","","",156,null],[11,"bitand","","",156,null],[11,"bitxor","","",156,null],[11,"clone","","",157,null],[11,"next","","",157,null],[11,"size_hint","","",157,null],[11,"from_iter","","",156,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",156,null],[11,"extend","","",156,null],[11,"clone","collections::linked_list","",158,null],[11,"clone","","",159,null],[11,"default","","",160,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",160,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",160,null],[11,"iter","","Provides a forward iterator.",160,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",160,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",160,null],[11,"len","","Returns the length of the `LinkedList`.",160,null],[11,"clear","","Removes all elements from the `LinkedList`.",160,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",160,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",160,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",160,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",160,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",160,null],[11,"push_front","","Adds an element first in the list.",160,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",160,null],[11,"push_back","","Appends an element to the back of a list",160,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",160,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",160,null],[11,"front_place","","Returns a place for insertion at the front of the list.",160,null],[11,"back_place","","Returns a place for insertion at the back of the list.",160,null],[11,"drop","","",160,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next_back","","",158,null],[11,"next","","",161,null],[11,"size_hint","","",161,null],[11,"next_back","","",161,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",161,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",161,null],[11,"next","","",159,null],[11,"size_hint","","",159,null],[11,"next_back","","",159,null],[11,"from_iter","","",160,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",160,null],[11,"extend","","",160,null],[11,"extend","","",160,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"partial_cmp","","",160,null],[11,"cmp","","",160,null],[11,"clone","","",160,null],[11,"fmt","","",160,null],[11,"hash","","",160,null],[11,"make_place","","",162,null],[11,"pointer","","",162,null],[11,"finalize","","",162,null],[11,"make_place","","",163,null],[11,"pointer","","",163,null],[11,"finalize","","",163,null],[11,"start","core::ops","",11,null],[11,"end","","",12,null],[11,"start","","",10,null],[11,"end","","",10,null],[11,"borrow","collections::vec","",134,null],[11,"borrow_mut","","",134,null],[11,"clone","collections::str","",164,null],[11,"next","","",164,null],[11,"size_hint","","",164,null],[11,"borrow","collections::string","",165,null],[11,"cmp","","",165,null],[11,"partial_cmp","","",165,null],[11,"lt","","",165,null],[11,"le","","",165,null],[11,"gt","","",165,null],[11,"ge","","",165,null],[11,"fmt","","",166,null],[11,"fmt","","",167,null],[11,"new","","Creates a new empty `String`.",165,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",165,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",165,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",165,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",165,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",165,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",165,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",165,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",165,null],[11,"as_str","","Extracts a string slice containing the entire string.",165,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",165,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",165,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",165,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",165,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",165,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",165,null],[11,"push","","Appends the given `char` to the end of this `String`.",165,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",165,null],[11,"truncate","","Shortens this `String` to the specified length.",165,null],[11,"pop","","Removes the last character from the string buffer and returns it.",165,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",165,null],[11,"insert","","Inserts a character into this `String` at a byte position.",165,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",165,null],[11,"len","","Returns the length of this `String`, in bytes.",165,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",165,null],[11,"clear","","Truncates this `String`, removing all contents.",165,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",165,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",165,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",166,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",166,null],[11,"fmt","","",166,null],[11,"fmt","","",167,null],[11,"clone","","",165,null],[11,"clone_from","","",165,null],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",165,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",165,null],[11,"extend","","",165,null],[11,"extend","","",165,null],[11,"extend","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"eq","collections::borrow","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","collections::string","",165,null],[11,"ne","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",165,null],[11,"fmt","","",165,null],[11,"hash","","",165,null],[11,"add","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"index_mut","","",165,null],[11,"deref","","",165,null],[11,"deref_mut","","",165,null],[11,"from_str","","",165,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",168,null],[11,"fmt","","",168,null],[11,"fmt","","",168,null],[11,"eq","","",168,null],[11,"as_ref","","",165,null],[11,"as_ref","","",165,null],[11,"from","","",165,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",155,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",155,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",165,null],[11,"write_str","","",165,null],[11,"write_char","","",165,null],[11,"drop","","",169,null],[11,"next","","",169,null],[11,"size_hint","","",169,null],[11,"next_back","","",169,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",134,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",134,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",134,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",134,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",134,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",134,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",134,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",134,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",134,null],[11,"as_slice","","Extracts a slice containing the entire vector.",134,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",134,null],[11,"set_len","","Sets the length of a vector.",134,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",134,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",134,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",134,null],[11,"retain","","Retains only the elements specified by the predicate.",134,null],[11,"push","","Appends an element to the back of a collection.",134,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",134,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",134,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",134,null],[11,"clear","","Clears the vector, removing all values.",134,null],[11,"len","","Returns the number of elements in the vector.",134,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",134,null],[11,"split_off","","Splits the collection into two at the given index.",134,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",134,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",134,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",134,null],[11,"clone","","",134,null],[11,"clone_from","","",134,null],[11,"hash","","",134,null],[11,"index","","",134,null],[11,"index_mut","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"index_mut","","",134,null],[11,"deref","","",134,null],[11,"deref_mut","","",134,null],[11,"from_iter","","",134,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",134,null],[11,"extend","","",134,null],[11,"extend","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","collections::borrow","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"eq","collections::vec","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"partial_cmp","","",134,null],[11,"cmp","","",134,null],[11,"drop","","",134,null],[11,"default","","",134,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",134,null],[11,"as_ref","","",134,null],[11,"as_mut","","",134,null],[11,"as_ref","","",134,null],[11,"as_mut","","",134,null],[11,"from","","",134,null],[11,"from","","",134,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",155,null],[11,"from","","",155,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",155,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",170,null],[11,"size_hint","","",170,null],[11,"count","","",170,null],[11,"next_back","","",170,null],[11,"clone","","",170,null],[11,"drop","","",170,null],[11,"next","","",171,null],[11,"size_hint","","",171,null],[11,"next_back","","",171,null],[11,"drop","","",171,null],[11,"clone","collections::vec_deque","",172,null],[11,"drop","","",172,null],[11,"default","","",172,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",172,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",172,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",172,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",172,null],[11,"swap","","Swaps elements at indices `i` and `j`.",172,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",172,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",172,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",172,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",172,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",172,null],[11,"iter","","Returns a front-to-back iterator.",172,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",172,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",172,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",172,null],[11,"len","","Returns the number of elements in the `VecDeque`.",172,null],[11,"is_empty","","Returns true if the buffer contains no elements",172,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",172,null],[11,"clear","","Clears the buffer, removing all values.",172,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",172,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",172,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",172,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",172,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",172,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",172,null],[11,"push_front","","Inserts an element first in the sequence.",172,null],[11,"push_back","","Appends an element to the back of a buffer",172,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",172,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",172,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",172,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",172,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",172,null],[11,"split_off","","Splits the collection into two at the given index.",172,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",172,null],[11,"retain","","Retains only the elements specified by the predicate.",172,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",172,null],[11,"clone","","",173,null],[11,"next","","",173,null],[11,"size_hint","","",173,null],[11,"next_back","","",173,null],[11,"next","","",174,null],[11,"size_hint","","",174,null],[11,"next_back","","",174,null],[11,"clone","","",175,null],[11,"next","","",175,null],[11,"size_hint","","",175,null],[11,"next_back","","",175,null],[11,"drop","","",176,null],[11,"next","","",176,null],[11,"size_hint","","",176,null],[11,"next_back","","",176,null],[11,"eq","","",172,null],[11,"partial_cmp","","",172,null],[11,"cmp","","",172,null],[11,"hash","","",172,null],[11,"index","","",172,null],[11,"index_mut","","",172,null],[11,"from_iter","","",172,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",172,null],[11,"extend","","",172,null],[11,"extend","","",172,null],[11,"fmt","","",172,null],[11,"from","","",172,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",134,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",177,null],[11,"ne","","",177,null],[11,"hash","","",177,null],[11,"fmt","","",177,null],[11,"clone","","",177,null],[11,"clone","alloc::boxed","",178,null],[11,"pointer","","",179,null],[11,"make_place","","",179,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",179,null],[11,"finalize","","",180,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",178,null],[11,"drop","","",179,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",180,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",180,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",180,null],[11,"default","","",180,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",180,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",180,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",180,null],[11,"clone","","",180,null],[11,"eq","","",180,null],[11,"ne","","",180,null],[11,"partial_cmp","","",180,null],[11,"lt","","",180,null],[11,"le","","",180,null],[11,"ge","","",180,null],[11,"gt","","",180,null],[11,"cmp","","",180,null],[11,"hash","","",180,null],[11,"from","","",180,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",180,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",180,null],[11,"fmt","","",180,null],[11,"fmt","","",180,null],[11,"fmt","","",180,null],[11,"deref","","",180,null],[11,"deref_mut","","",180,null],[11,"next","","",180,null],[11,"size_hint","","",180,null],[11,"next_back","","",180,null],[11,"call_once","","",180,null],[11,"call_once","","",180,null],[11,"clone","","",180,null],[11,"borrow","","",180,null],[11,"borrow_mut","","",180,null],[11,"as_ref","","",180,null],[11,"as_mut","","",180,null],[11,"is_contained_in","serde::core::str::pattern","Checks whether the pattern matches anywhere in the haystack",181,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",181,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",181,null],[11,"next_match","","Find the next `Match` result. See `next()`",182,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",182,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",183,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",183,null],[11,"size_hint","serde::core::iter","Returns the bounds on the remaining length of the iterator.",184,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",184,null],[11,"last","","Consumes the iterator, returning the last element.",184,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",184,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",184,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",184,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",184,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",184,null],[11,"filter_map","","Creates an iterator that both filters and maps.",184,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",184,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",184,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",184,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",184,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",184,null],[11,"take","","Creates an iterator that yields its first `n` elements.",184,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",184,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",184,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",184,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",184,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",184,null],[11,"collect","","Transforms an iterator into a collection.",184,null],[11,"partition","","Consumes an iterator, creating two collections from it.",184,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",184,null],[11,"all","","Tests if every element of the iterator matches a predicate.",184,null],[11,"any","","Tests if any element of the iterator matches a predicate.",184,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",184,null],[11,"position","","Searches for an element in an iterator, returning its index.",184,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",184,null],[11,"max","","Returns the maximum element of an iterator.",184,null],[11,"min","","Returns the minimum element of an iterator.",184,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",184,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",184,null],[11,"rev","","Reverses an iterator&#39;s direction.",184,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",184,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",184,null],[11,"cycle","","Repeats an iterator endlessly.",184,null],[11,"sum","","Sums the elements of an iterator.",184,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",184,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",184,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",184,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",184,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",184,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",184,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",184,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",184,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",184,null],[11,"len","","Returns the exact number of times the iterator will iterate.",185,null],[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"cmp","","",186,null],[11,"partial_cmp","","",186,null],[11,"lt","","",186,null],[11,"le","","",186,null],[11,"gt","","",186,null],[11,"ge","","",186,null],[11,"eq","","",186,null],[11,"ne","","",186,null],[11,"hash","","",186,null],[11,"default","","",186,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"clone","","",186,null],[11,"new","","Construct a new, empty `ByteBuf`.",186,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",186,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",186,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",186,null],[11,"into","","",186,null],[11,"from","","",186,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",186,null],[11,"as_ref","","",186,null],[11,"as_mut","","",186,null],[11,"as_mut","","",186,null],[11,"deref","","",186,null],[11,"deref_mut","","",186,null],[11,"serialize","","",186,null],[11,"visit_unit","","",187,null],[11,"visit_seq","","",187,null],[11,"visit_bytes","","",187,null],[11,"visit_byte_buf","","",187,null],[11,"deserialize","","",186,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"cmp","","",188,null],[11,"partial_cmp","","",188,null],[11,"lt","","",188,null],[11,"le","","",188,null],[11,"gt","","",188,null],[11,"ge","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"hash","","",188,null],[11,"clone","","",188,null],[11,"new","","Wrap an existing `&amp;[u8]`.",188,null],[11,"fmt","","",188,null],[11,"from","","",188,null],[11,"from","","",188,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",188,null],[11,"deref","","",188,null],[11,"serialize","","",188,null],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",189,null],[13,"Usize","","Represents a `usize` type.",189,null],[13,"U8","","Represents a `u8` type.",189,null],[13,"U16","","Represents a `u16` type.",189,null],[13,"U32","","Represents a `u32` type.",189,null],[13,"U64","","Represents a `u64` type.",189,null],[13,"Isize","","Represents a `isize` type.",189,null],[13,"I8","","Represents a `i8` type.",189,null],[13,"I16","","Represents a `i16` type.",189,null],[13,"I32","","Represents a `i32` type.",189,null],[13,"I64","","Represents a `i64` type.",189,null],[13,"F32","","Represents a `f32` type.",189,null],[13,"F64","","Represents a `f64` type.",189,null],[13,"Char","","Represents a `char` type.",189,null],[13,"Str","","Represents a `&amp;str` type.",189,null],[13,"String","","Represents a `String` type.",189,null],[13,"Unit","","Represents a `()` type.",189,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",189,null],[13,"Seq","","Represents a sequence type.",189,null],[13,"Map","","Represents a map type.",189,null],[13,"UnitStruct","","Represents a unit struct type.",189,null],[13,"NewtypeStruct","","Represents a newtype type.",189,null],[13,"TupleStruct","","Represents a tuple struct type.",189,null],[13,"Struct","","Represents a struct type.",189,null],[13,"FieldName","","Represents a struct field name.",189,null],[13,"Tuple","","Represents a tuple type.",189,null],[13,"Enum","","Represents an `enum` type.",189,null],[13,"VariantName","","Represents an enum variant name.",189,null],[13,"StructVariant","","Represents a struct variant.",189,null],[13,"TupleVariant","","Represents a tuple variant.",189,null],[13,"UnitVariant","","Represents a unit variant.",189,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",189,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",190,null],[11,"visit_seq","","",190,null],[11,"visit_bool","","",191,null],[11,"visit_str","","",191,null],[11,"deserialize","collections::string","",165,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",63,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",192,null],[11,"deserialize","core::marker","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",193,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",193,null],[11,"visit_seq","","",193,null],[11,"deserialize","collections::binary_heap","",130,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",194,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",194,null],[11,"visit_seq","","",194,null],[11,"deserialize","collections::btree::set","",147,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",195,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",195,null],[11,"visit_seq","","",195,null],[11,"deserialize","collections::linked_list","",160,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",196,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",196,null],[11,"visit_seq","","",196,null],[11,"deserialize","std::collections::hash::set","",197,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",198,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",198,null],[11,"visit_seq","","",198,null],[11,"deserialize","collections::vec","",134,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",199,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",199,null],[11,"visit_seq","","",199,null],[11,"deserialize","collections::vec_deque","",172,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",200,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",200,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",201,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",201,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",202,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",202,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",203,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",203,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",204,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",204,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",205,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",205,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",206,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",206,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",207,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",207,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",208,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",208,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",209,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",209,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",210,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",210,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",211,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",211,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",212,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",212,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",213,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",213,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",214,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",214,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",215,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",215,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",216,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",216,null],[11,"visit_map","","",216,null],[11,"deserialize","collections::btree::map","",135,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",217,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",217,null],[11,"visit_map","","",217,null],[11,"deserialize","std::collections::hash::map","",218,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",219,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",220,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",221,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",222,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",223,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",224,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",180,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",180,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",180,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",225,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",226,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",155,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::time::duration","",227,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",68,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",228,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",229,null],[13,"InvalidType","","The value had an incorrect type.",229,null],[13,"InvalidLength","","The value had an invalid length.",229,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",229,null],[13,"EndOfStream","","EOF while deserializing a value.",229,null],[13,"UnknownVariant","","Unknown variant in enum.",229,null],[13,"UnknownField","","Unknown field in struct.",229,null],[13,"MissingField","","Struct is missing a field.",229,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",230,null],[10,"into_deserializer","","Convert this value into a deserializer.",230,null],[11,"eq","","",229,null],[11,"ne","","",229,null],[11,"fmt","","",229,null],[11,"clone","","",229,null],[11,"custom","","",229,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",229,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",229,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",229,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",229,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",229,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",229,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",229,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",229,null],[11,"description","","",229,null],[11,"cause","","",229,null],[11,"deserialize_bool","","",231,null],[11,"deserialize_usize","","",231,null],[11,"deserialize_u8","","",231,null],[11,"deserialize_u16","","",231,null],[11,"deserialize_u32","","",231,null],[11,"deserialize_u64","","",231,null],[11,"deserialize_isize","","",231,null],[11,"deserialize_i8","","",231,null],[11,"deserialize_i16","","",231,null],[11,"deserialize_i32","","",231,null],[11,"deserialize_i64","","",231,null],[11,"deserialize_f32","","",231,null],[11,"deserialize_f64","","",231,null],[11,"deserialize_char","","",231,null],[11,"deserialize_str","","",231,null],[11,"deserialize_string","","",231,null],[11,"deserialize_unit","","",231,null],[11,"deserialize_seq","","",231,null],[11,"deserialize_seq_fixed_size","","",231,null],[11,"deserialize_bytes","","",231,null],[11,"deserialize_map","","",231,null],[11,"deserialize_unit_struct","","",231,null],[11,"deserialize_newtype_struct","","",231,null],[11,"deserialize_tuple_struct","","",231,null],[11,"deserialize_struct","","",231,null],[11,"deserialize_struct_field","","",231,null],[11,"deserialize_tuple","","",231,null],[11,"deserialize_enum","","",231,null],[11,"deserialize_ignored_any","","",231,null],[11,"deserialize","","",231,null],[11,"deserialize_option","","",231,null],[11,"deserialize_bool","","",232,null],[11,"deserialize_usize","","",232,null],[11,"deserialize_u8","","",232,null],[11,"deserialize_u16","","",232,null],[11,"deserialize_u32","","",232,null],[11,"deserialize_u64","","",232,null],[11,"deserialize_isize","","",232,null],[11,"deserialize_i8","","",232,null],[11,"deserialize_i16","","",232,null],[11,"deserialize_i32","","",232,null],[11,"deserialize_i64","","",232,null],[11,"deserialize_f32","","",232,null],[11,"deserialize_f64","","",232,null],[11,"deserialize_char","","",232,null],[11,"deserialize_str","","",232,null],[11,"deserialize_string","","",232,null],[11,"deserialize_unit","","",232,null],[11,"deserialize_option","","",232,null],[11,"deserialize_seq","","",232,null],[11,"deserialize_seq_fixed_size","","",232,null],[11,"deserialize_bytes","","",232,null],[11,"deserialize_map","","",232,null],[11,"deserialize_unit_struct","","",232,null],[11,"deserialize_newtype_struct","","",232,null],[11,"deserialize_tuple_struct","","",232,null],[11,"deserialize_struct","","",232,null],[11,"deserialize_struct_field","","",232,null],[11,"deserialize_tuple","","",232,null],[11,"deserialize_enum","","",232,null],[11,"deserialize_ignored_any","","",232,null],[11,"deserialize","","",232,null],[11,"deserialize_bool","","",233,null],[11,"deserialize_usize","","",233,null],[11,"deserialize_u8","","",233,null],[11,"deserialize_u16","","",233,null],[11,"deserialize_u32","","",233,null],[11,"deserialize_u64","","",233,null],[11,"deserialize_isize","","",233,null],[11,"deserialize_i8","","",233,null],[11,"deserialize_i16","","",233,null],[11,"deserialize_i32","","",233,null],[11,"deserialize_i64","","",233,null],[11,"deserialize_f32","","",233,null],[11,"deserialize_f64","","",233,null],[11,"deserialize_char","","",233,null],[11,"deserialize_str","","",233,null],[11,"deserialize_string","","",233,null],[11,"deserialize_unit","","",233,null],[11,"deserialize_option","","",233,null],[11,"deserialize_seq","","",233,null],[11,"deserialize_seq_fixed_size","","",233,null],[11,"deserialize_bytes","","",233,null],[11,"deserialize_map","","",233,null],[11,"deserialize_unit_struct","","",233,null],[11,"deserialize_newtype_struct","","",233,null],[11,"deserialize_tuple_struct","","",233,null],[11,"deserialize_struct","","",233,null],[11,"deserialize_struct_field","","",233,null],[11,"deserialize_tuple","","",233,null],[11,"deserialize_enum","","",233,null],[11,"deserialize_ignored_any","","",233,null],[11,"deserialize","","",233,null],[11,"deserialize_bool","","",234,null],[11,"deserialize_usize","","",234,null],[11,"deserialize_u8","","",234,null],[11,"deserialize_u16","","",234,null],[11,"deserialize_u32","","",234,null],[11,"deserialize_u64","","",234,null],[11,"deserialize_isize","","",234,null],[11,"deserialize_i8","","",234,null],[11,"deserialize_i16","","",234,null],[11,"deserialize_i32","","",234,null],[11,"deserialize_i64","","",234,null],[11,"deserialize_f32","","",234,null],[11,"deserialize_f64","","",234,null],[11,"deserialize_char","","",234,null],[11,"deserialize_str","","",234,null],[11,"deserialize_string","","",234,null],[11,"deserialize_unit","","",234,null],[11,"deserialize_option","","",234,null],[11,"deserialize_seq","","",234,null],[11,"deserialize_seq_fixed_size","","",234,null],[11,"deserialize_bytes","","",234,null],[11,"deserialize_map","","",234,null],[11,"deserialize_unit_struct","","",234,null],[11,"deserialize_newtype_struct","","",234,null],[11,"deserialize_tuple_struct","","",234,null],[11,"deserialize_struct","","",234,null],[11,"deserialize_struct_field","","",234,null],[11,"deserialize_tuple","","",234,null],[11,"deserialize_enum","","",234,null],[11,"deserialize_ignored_any","","",234,null],[11,"deserialize","","",234,null],[11,"deserialize_bool","","",235,null],[11,"deserialize_usize","","",235,null],[11,"deserialize_u8","","",235,null],[11,"deserialize_u16","","",235,null],[11,"deserialize_u32","","",235,null],[11,"deserialize_u64","","",235,null],[11,"deserialize_isize","","",235,null],[11,"deserialize_i8","","",235,null],[11,"deserialize_i16","","",235,null],[11,"deserialize_i32","","",235,null],[11,"deserialize_i64","","",235,null],[11,"deserialize_f32","","",235,null],[11,"deserialize_f64","","",235,null],[11,"deserialize_char","","",235,null],[11,"deserialize_str","","",235,null],[11,"deserialize_string","","",235,null],[11,"deserialize_unit","","",235,null],[11,"deserialize_option","","",235,null],[11,"deserialize_seq","","",235,null],[11,"deserialize_seq_fixed_size","","",235,null],[11,"deserialize_bytes","","",235,null],[11,"deserialize_map","","",235,null],[11,"deserialize_unit_struct","","",235,null],[11,"deserialize_newtype_struct","","",235,null],[11,"deserialize_tuple_struct","","",235,null],[11,"deserialize_struct","","",235,null],[11,"deserialize_struct_field","","",235,null],[11,"deserialize_tuple","","",235,null],[11,"deserialize_enum","","",235,null],[11,"deserialize_ignored_any","","",235,null],[11,"deserialize","","",235,null],[11,"deserialize_bool","","",236,null],[11,"deserialize_usize","","",236,null],[11,"deserialize_u8","","",236,null],[11,"deserialize_u16","","",236,null],[11,"deserialize_u32","","",236,null],[11,"deserialize_u64","","",236,null],[11,"deserialize_isize","","",236,null],[11,"deserialize_i8","","",236,null],[11,"deserialize_i16","","",236,null],[11,"deserialize_i32","","",236,null],[11,"deserialize_i64","","",236,null],[11,"deserialize_f32","","",236,null],[11,"deserialize_f64","","",236,null],[11,"deserialize_char","","",236,null],[11,"deserialize_str","","",236,null],[11,"deserialize_string","","",236,null],[11,"deserialize_unit","","",236,null],[11,"deserialize_option","","",236,null],[11,"deserialize_seq","","",236,null],[11,"deserialize_seq_fixed_size","","",236,null],[11,"deserialize_bytes","","",236,null],[11,"deserialize_map","","",236,null],[11,"deserialize_unit_struct","","",236,null],[11,"deserialize_newtype_struct","","",236,null],[11,"deserialize_tuple_struct","","",236,null],[11,"deserialize_struct","","",236,null],[11,"deserialize_struct_field","","",236,null],[11,"deserialize_tuple","","",236,null],[11,"deserialize_enum","","",236,null],[11,"deserialize_ignored_any","","",236,null],[11,"deserialize","","",236,null],[11,"deserialize_bool","","",237,null],[11,"deserialize_usize","","",237,null],[11,"deserialize_u8","","",237,null],[11,"deserialize_u16","","",237,null],[11,"deserialize_u32","","",237,null],[11,"deserialize_u64","","",237,null],[11,"deserialize_isize","","",237,null],[11,"deserialize_i8","","",237,null],[11,"deserialize_i16","","",237,null],[11,"deserialize_i32","","",237,null],[11,"deserialize_i64","","",237,null],[11,"deserialize_f32","","",237,null],[11,"deserialize_f64","","",237,null],[11,"deserialize_char","","",237,null],[11,"deserialize_str","","",237,null],[11,"deserialize_string","","",237,null],[11,"deserialize_unit","","",237,null],[11,"deserialize_option","","",237,null],[11,"deserialize_seq","","",237,null],[11,"deserialize_seq_fixed_size","","",237,null],[11,"deserialize_bytes","","",237,null],[11,"deserialize_map","","",237,null],[11,"deserialize_unit_struct","","",237,null],[11,"deserialize_newtype_struct","","",237,null],[11,"deserialize_tuple_struct","","",237,null],[11,"deserialize_struct","","",237,null],[11,"deserialize_struct_field","","",237,null],[11,"deserialize_tuple","","",237,null],[11,"deserialize_enum","","",237,null],[11,"deserialize_ignored_any","","",237,null],[11,"deserialize","","",237,null],[11,"deserialize_bool","","",238,null],[11,"deserialize_usize","","",238,null],[11,"deserialize_u8","","",238,null],[11,"deserialize_u16","","",238,null],[11,"deserialize_u32","","",238,null],[11,"deserialize_u64","","",238,null],[11,"deserialize_isize","","",238,null],[11,"deserialize_i8","","",238,null],[11,"deserialize_i16","","",238,null],[11,"deserialize_i32","","",238,null],[11,"deserialize_i64","","",238,null],[11,"deserialize_f32","","",238,null],[11,"deserialize_f64","","",238,null],[11,"deserialize_char","","",238,null],[11,"deserialize_str","","",238,null],[11,"deserialize_string","","",238,null],[11,"deserialize_unit","","",238,null],[11,"deserialize_option","","",238,null],[11,"deserialize_seq","","",238,null],[11,"deserialize_seq_fixed_size","","",238,null],[11,"deserialize_bytes","","",238,null],[11,"deserialize_map","","",238,null],[11,"deserialize_unit_struct","","",238,null],[11,"deserialize_newtype_struct","","",238,null],[11,"deserialize_tuple_struct","","",238,null],[11,"deserialize_struct","","",238,null],[11,"deserialize_struct_field","","",238,null],[11,"deserialize_tuple","","",238,null],[11,"deserialize_enum","","",238,null],[11,"deserialize_ignored_any","","",238,null],[11,"deserialize","","",238,null],[11,"deserialize_bool","","",239,null],[11,"deserialize_usize","","",239,null],[11,"deserialize_u8","","",239,null],[11,"deserialize_u16","","",239,null],[11,"deserialize_u32","","",239,null],[11,"deserialize_u64","","",239,null],[11,"deserialize_isize","","",239,null],[11,"deserialize_i8","","",239,null],[11,"deserialize_i16","","",239,null],[11,"deserialize_i32","","",239,null],[11,"deserialize_i64","","",239,null],[11,"deserialize_f32","","",239,null],[11,"deserialize_f64","","",239,null],[11,"deserialize_char","","",239,null],[11,"deserialize_str","","",239,null],[11,"deserialize_string","","",239,null],[11,"deserialize_unit","","",239,null],[11,"deserialize_option","","",239,null],[11,"deserialize_seq","","",239,null],[11,"deserialize_seq_fixed_size","","",239,null],[11,"deserialize_bytes","","",239,null],[11,"deserialize_map","","",239,null],[11,"deserialize_unit_struct","","",239,null],[11,"deserialize_newtype_struct","","",239,null],[11,"deserialize_tuple_struct","","",239,null],[11,"deserialize_struct","","",239,null],[11,"deserialize_struct_field","","",239,null],[11,"deserialize_tuple","","",239,null],[11,"deserialize_enum","","",239,null],[11,"deserialize_ignored_any","","",239,null],[11,"deserialize","","",239,null],[11,"deserialize_bool","","",240,null],[11,"deserialize_usize","","",240,null],[11,"deserialize_u8","","",240,null],[11,"deserialize_u16","","",240,null],[11,"deserialize_u32","","",240,null],[11,"deserialize_u64","","",240,null],[11,"deserialize_isize","","",240,null],[11,"deserialize_i8","","",240,null],[11,"deserialize_i16","","",240,null],[11,"deserialize_i32","","",240,null],[11,"deserialize_i64","","",240,null],[11,"deserialize_f32","","",240,null],[11,"deserialize_f64","","",240,null],[11,"deserialize_char","","",240,null],[11,"deserialize_str","","",240,null],[11,"deserialize_string","","",240,null],[11,"deserialize_unit","","",240,null],[11,"deserialize_option","","",240,null],[11,"deserialize_seq","","",240,null],[11,"deserialize_seq_fixed_size","","",240,null],[11,"deserialize_bytes","","",240,null],[11,"deserialize_map","","",240,null],[11,"deserialize_unit_struct","","",240,null],[11,"deserialize_newtype_struct","","",240,null],[11,"deserialize_tuple_struct","","",240,null],[11,"deserialize_struct","","",240,null],[11,"deserialize_struct_field","","",240,null],[11,"deserialize_tuple","","",240,null],[11,"deserialize_enum","","",240,null],[11,"deserialize_ignored_any","","",240,null],[11,"deserialize","","",240,null],[11,"deserialize_bool","","",241,null],[11,"deserialize_usize","","",241,null],[11,"deserialize_u8","","",241,null],[11,"deserialize_u16","","",241,null],[11,"deserialize_u32","","",241,null],[11,"deserialize_u64","","",241,null],[11,"deserialize_isize","","",241,null],[11,"deserialize_i8","","",241,null],[11,"deserialize_i16","","",241,null],[11,"deserialize_i32","","",241,null],[11,"deserialize_i64","","",241,null],[11,"deserialize_f32","","",241,null],[11,"deserialize_f64","","",241,null],[11,"deserialize_char","","",241,null],[11,"deserialize_str","","",241,null],[11,"deserialize_string","","",241,null],[11,"deserialize_unit","","",241,null],[11,"deserialize_option","","",241,null],[11,"deserialize_seq","","",241,null],[11,"deserialize_seq_fixed_size","","",241,null],[11,"deserialize_bytes","","",241,null],[11,"deserialize_map","","",241,null],[11,"deserialize_unit_struct","","",241,null],[11,"deserialize_newtype_struct","","",241,null],[11,"deserialize_tuple_struct","","",241,null],[11,"deserialize_struct","","",241,null],[11,"deserialize_struct_field","","",241,null],[11,"deserialize_tuple","","",241,null],[11,"deserialize_enum","","",241,null],[11,"deserialize_ignored_any","","",241,null],[11,"deserialize","","",241,null],[11,"deserialize_bool","","",242,null],[11,"deserialize_usize","","",242,null],[11,"deserialize_u8","","",242,null],[11,"deserialize_u16","","",242,null],[11,"deserialize_u32","","",242,null],[11,"deserialize_u64","","",242,null],[11,"deserialize_isize","","",242,null],[11,"deserialize_i8","","",242,null],[11,"deserialize_i16","","",242,null],[11,"deserialize_i32","","",242,null],[11,"deserialize_i64","","",242,null],[11,"deserialize_f32","","",242,null],[11,"deserialize_f64","","",242,null],[11,"deserialize_char","","",242,null],[11,"deserialize_str","","",242,null],[11,"deserialize_string","","",242,null],[11,"deserialize_unit","","",242,null],[11,"deserialize_option","","",242,null],[11,"deserialize_seq","","",242,null],[11,"deserialize_seq_fixed_size","","",242,null],[11,"deserialize_bytes","","",242,null],[11,"deserialize_map","","",242,null],[11,"deserialize_unit_struct","","",242,null],[11,"deserialize_newtype_struct","","",242,null],[11,"deserialize_tuple_struct","","",242,null],[11,"deserialize_struct","","",242,null],[11,"deserialize_struct_field","","",242,null],[11,"deserialize_tuple","","",242,null],[11,"deserialize_enum","","",242,null],[11,"deserialize_ignored_any","","",242,null],[11,"deserialize","","",242,null],[11,"deserialize_bool","","",243,null],[11,"deserialize_usize","","",243,null],[11,"deserialize_u8","","",243,null],[11,"deserialize_u16","","",243,null],[11,"deserialize_u32","","",243,null],[11,"deserialize_u64","","",243,null],[11,"deserialize_isize","","",243,null],[11,"deserialize_i8","","",243,null],[11,"deserialize_i16","","",243,null],[11,"deserialize_i32","","",243,null],[11,"deserialize_i64","","",243,null],[11,"deserialize_f32","","",243,null],[11,"deserialize_f64","","",243,null],[11,"deserialize_char","","",243,null],[11,"deserialize_str","","",243,null],[11,"deserialize_string","","",243,null],[11,"deserialize_unit","","",243,null],[11,"deserialize_option","","",243,null],[11,"deserialize_seq","","",243,null],[11,"deserialize_seq_fixed_size","","",243,null],[11,"deserialize_bytes","","",243,null],[11,"deserialize_map","","",243,null],[11,"deserialize_unit_struct","","",243,null],[11,"deserialize_newtype_struct","","",243,null],[11,"deserialize_tuple_struct","","",243,null],[11,"deserialize_struct","","",243,null],[11,"deserialize_struct_field","","",243,null],[11,"deserialize_tuple","","",243,null],[11,"deserialize_enum","","",243,null],[11,"deserialize_ignored_any","","",243,null],[11,"deserialize","","",243,null],[11,"deserialize_bool","","",244,null],[11,"deserialize_usize","","",244,null],[11,"deserialize_u8","","",244,null],[11,"deserialize_u16","","",244,null],[11,"deserialize_u32","","",244,null],[11,"deserialize_u64","","",244,null],[11,"deserialize_isize","","",244,null],[11,"deserialize_i8","","",244,null],[11,"deserialize_i16","","",244,null],[11,"deserialize_i32","","",244,null],[11,"deserialize_i64","","",244,null],[11,"deserialize_f32","","",244,null],[11,"deserialize_f64","","",244,null],[11,"deserialize_char","","",244,null],[11,"deserialize_str","","",244,null],[11,"deserialize_string","","",244,null],[11,"deserialize_unit","","",244,null],[11,"deserialize_option","","",244,null],[11,"deserialize_seq","","",244,null],[11,"deserialize_seq_fixed_size","","",244,null],[11,"deserialize_bytes","","",244,null],[11,"deserialize_map","","",244,null],[11,"deserialize_unit_struct","","",244,null],[11,"deserialize_newtype_struct","","",244,null],[11,"deserialize_tuple_struct","","",244,null],[11,"deserialize_struct","","",244,null],[11,"deserialize_struct_field","","",244,null],[11,"deserialize_tuple","","",244,null],[11,"deserialize_enum","","",244,null],[11,"deserialize_ignored_any","","",244,null],[11,"deserialize","","",244,null],[11,"deserialize_bool","","",245,null],[11,"deserialize_usize","","",245,null],[11,"deserialize_u8","","",245,null],[11,"deserialize_u16","","",245,null],[11,"deserialize_u32","","",245,null],[11,"deserialize_u64","","",245,null],[11,"deserialize_isize","","",245,null],[11,"deserialize_i8","","",245,null],[11,"deserialize_i16","","",245,null],[11,"deserialize_i32","","",245,null],[11,"deserialize_i64","","",245,null],[11,"deserialize_f32","","",245,null],[11,"deserialize_f64","","",245,null],[11,"deserialize_char","","",245,null],[11,"deserialize_str","","",245,null],[11,"deserialize_string","","",245,null],[11,"deserialize_unit","","",245,null],[11,"deserialize_option","","",245,null],[11,"deserialize_seq","","",245,null],[11,"deserialize_seq_fixed_size","","",245,null],[11,"deserialize_bytes","","",245,null],[11,"deserialize_map","","",245,null],[11,"deserialize_unit_struct","","",245,null],[11,"deserialize_newtype_struct","","",245,null],[11,"deserialize_tuple_struct","","",245,null],[11,"deserialize_struct","","",245,null],[11,"deserialize_struct_field","","",245,null],[11,"deserialize_tuple","","",245,null],[11,"deserialize_enum","","",245,null],[11,"deserialize_ignored_any","","",245,null],[11,"deserialize","","",245,null],[11,"deserialize","","",246,null],[11,"deserialize_enum","","",246,null],[11,"deserialize_bool","","",246,null],[11,"deserialize_usize","","",246,null],[11,"deserialize_u8","","",246,null],[11,"deserialize_u16","","",246,null],[11,"deserialize_u32","","",246,null],[11,"deserialize_u64","","",246,null],[11,"deserialize_isize","","",246,null],[11,"deserialize_i8","","",246,null],[11,"deserialize_i16","","",246,null],[11,"deserialize_i32","","",246,null],[11,"deserialize_i64","","",246,null],[11,"deserialize_f32","","",246,null],[11,"deserialize_f64","","",246,null],[11,"deserialize_char","","",246,null],[11,"deserialize_str","","",246,null],[11,"deserialize_string","","",246,null],[11,"deserialize_unit","","",246,null],[11,"deserialize_option","","",246,null],[11,"deserialize_seq","","",246,null],[11,"deserialize_seq_fixed_size","","",246,null],[11,"deserialize_bytes","","",246,null],[11,"deserialize_map","","",246,null],[11,"deserialize_unit_struct","","",246,null],[11,"deserialize_newtype_struct","","",246,null],[11,"deserialize_tuple_struct","","",246,null],[11,"deserialize_struct","","",246,null],[11,"deserialize_struct_field","","",246,null],[11,"deserialize_tuple","","",246,null],[11,"deserialize_ignored_any","","",246,null],[11,"visit_variant","","",246,null],[11,"visit_unit","","",246,null],[11,"visit_newtype","","",246,null],[11,"visit_tuple","","",246,null],[11,"visit_struct","","",246,null],[11,"into_deserializer","collections::string","",165,null],[11,"deserialize","serde::de::value","",247,null],[11,"deserialize_enum","","",247,null],[11,"deserialize_bool","","",247,null],[11,"deserialize_usize","","",247,null],[11,"deserialize_u8","","",247,null],[11,"deserialize_u16","","",247,null],[11,"deserialize_u32","","",247,null],[11,"deserialize_u64","","",247,null],[11,"deserialize_isize","","",247,null],[11,"deserialize_i8","","",247,null],[11,"deserialize_i16","","",247,null],[11,"deserialize_i32","","",247,null],[11,"deserialize_i64","","",247,null],[11,"deserialize_f32","","",247,null],[11,"deserialize_f64","","",247,null],[11,"deserialize_char","","",247,null],[11,"deserialize_str","","",247,null],[11,"deserialize_string","","",247,null],[11,"deserialize_unit","","",247,null],[11,"deserialize_option","","",247,null],[11,"deserialize_seq","","",247,null],[11,"deserialize_seq_fixed_size","","",247,null],[11,"deserialize_bytes","","",247,null],[11,"deserialize_map","","",247,null],[11,"deserialize_unit_struct","","",247,null],[11,"deserialize_newtype_struct","","",247,null],[11,"deserialize_tuple_struct","","",247,null],[11,"deserialize_struct","","",247,null],[11,"deserialize_struct_field","","",247,null],[11,"deserialize_tuple","","",247,null],[11,"deserialize_ignored_any","","",247,null],[11,"visit_variant","","",247,null],[11,"visit_unit","","",247,null],[11,"visit_newtype","","",247,null],[11,"visit_tuple","","",247,null],[11,"visit_struct","","",247,null],[11,"into_deserializer","collections::borrow","",155,null],[11,"deserialize","serde::de::value","",248,null],[11,"deserialize_enum","","",248,null],[11,"deserialize_bool","","",248,null],[11,"deserialize_usize","","",248,null],[11,"deserialize_u8","","",248,null],[11,"deserialize_u16","","",248,null],[11,"deserialize_u32","","",248,null],[11,"deserialize_u64","","",248,null],[11,"deserialize_isize","","",248,null],[11,"deserialize_i8","","",248,null],[11,"deserialize_i16","","",248,null],[11,"deserialize_i32","","",248,null],[11,"deserialize_i64","","",248,null],[11,"deserialize_f32","","",248,null],[11,"deserialize_f64","","",248,null],[11,"deserialize_char","","",248,null],[11,"deserialize_str","","",248,null],[11,"deserialize_string","","",248,null],[11,"deserialize_unit","","",248,null],[11,"deserialize_option","","",248,null],[11,"deserialize_seq","","",248,null],[11,"deserialize_seq_fixed_size","","",248,null],[11,"deserialize_bytes","","",248,null],[11,"deserialize_map","","",248,null],[11,"deserialize_unit_struct","","",248,null],[11,"deserialize_newtype_struct","","",248,null],[11,"deserialize_tuple_struct","","",248,null],[11,"deserialize_struct","","",248,null],[11,"deserialize_struct_field","","",248,null],[11,"deserialize_tuple","","",248,null],[11,"deserialize_ignored_any","","",248,null],[11,"visit_variant","","",248,null],[11,"visit_unit","","",248,null],[11,"visit_newtype","","",248,null],[11,"visit_tuple","","",248,null],[11,"visit_struct","","",248,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",249,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",249,null],[11,"deserialize_bool","","",249,null],[11,"deserialize_usize","","",249,null],[11,"deserialize_u8","","",249,null],[11,"deserialize_u16","","",249,null],[11,"deserialize_u32","","",249,null],[11,"deserialize_u64","","",249,null],[11,"deserialize_isize","","",249,null],[11,"deserialize_i8","","",249,null],[11,"deserialize_i16","","",249,null],[11,"deserialize_i32","","",249,null],[11,"deserialize_i64","","",249,null],[11,"deserialize_f32","","",249,null],[11,"deserialize_f64","","",249,null],[11,"deserialize_char","","",249,null],[11,"deserialize_str","","",249,null],[11,"deserialize_string","","",249,null],[11,"deserialize_unit","","",249,null],[11,"deserialize_option","","",249,null],[11,"deserialize_seq","","",249,null],[11,"deserialize_seq_fixed_size","","",249,null],[11,"deserialize_bytes","","",249,null],[11,"deserialize_map","","",249,null],[11,"deserialize_unit_struct","","",249,null],[11,"deserialize_newtype_struct","","",249,null],[11,"deserialize_tuple_struct","","",249,null],[11,"deserialize_struct","","",249,null],[11,"deserialize_struct_field","","",249,null],[11,"deserialize_tuple","","",249,null],[11,"deserialize_enum","","",249,null],[11,"deserialize_ignored_any","","",249,null],[11,"visit","","",249,null],[11,"end","","",249,null],[11,"size_hint","","",249,null],[11,"into_deserializer","collections::vec","",134,null],[11,"into_deserializer","collections::btree::set","",147,null],[11,"into_deserializer","std::collections::hash::set","",197,null],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",250,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",250,null],[11,"deserialize_bool","","",250,null],[11,"deserialize_usize","","",250,null],[11,"deserialize_u8","","",250,null],[11,"deserialize_u16","","",250,null],[11,"deserialize_u32","","",250,null],[11,"deserialize_u64","","",250,null],[11,"deserialize_isize","","",250,null],[11,"deserialize_i8","","",250,null],[11,"deserialize_i16","","",250,null],[11,"deserialize_i32","","",250,null],[11,"deserialize_i64","","",250,null],[11,"deserialize_f32","","",250,null],[11,"deserialize_f64","","",250,null],[11,"deserialize_char","","",250,null],[11,"deserialize_str","","",250,null],[11,"deserialize_string","","",250,null],[11,"deserialize_unit","","",250,null],[11,"deserialize_option","","",250,null],[11,"deserialize_seq","","",250,null],[11,"deserialize_seq_fixed_size","","",250,null],[11,"deserialize_bytes","","",250,null],[11,"deserialize_map","","",250,null],[11,"deserialize_unit_struct","","",250,null],[11,"deserialize_newtype_struct","","",250,null],[11,"deserialize_tuple_struct","","",250,null],[11,"deserialize_struct","","",250,null],[11,"deserialize_struct_field","","",250,null],[11,"deserialize_tuple","","",250,null],[11,"deserialize_enum","","",250,null],[11,"deserialize_ignored_any","","",250,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;` with a specific length.",251,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"unbounded","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;` that is not bounded\nby a specific length and that delegates to `iter` for its size hint.",251,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deserialize","","",251,null],[11,"deserialize_seq","","",251,null],[11,"deserialize_seq_fixed_size","","",251,null],[11,"deserialize_bool","","",251,null],[11,"deserialize_usize","","",251,null],[11,"deserialize_u8","","",251,null],[11,"deserialize_u16","","",251,null],[11,"deserialize_u32","","",251,null],[11,"deserialize_u64","","",251,null],[11,"deserialize_isize","","",251,null],[11,"deserialize_i8","","",251,null],[11,"deserialize_i16","","",251,null],[11,"deserialize_i32","","",251,null],[11,"deserialize_i64","","",251,null],[11,"deserialize_f32","","",251,null],[11,"deserialize_f64","","",251,null],[11,"deserialize_char","","",251,null],[11,"deserialize_str","","",251,null],[11,"deserialize_string","","",251,null],[11,"deserialize_unit","","",251,null],[11,"deserialize_option","","",251,null],[11,"deserialize_bytes","","",251,null],[11,"deserialize_map","","",251,null],[11,"deserialize_unit_struct","","",251,null],[11,"deserialize_newtype_struct","","",251,null],[11,"deserialize_tuple_struct","","",251,null],[11,"deserialize_struct","","",251,null],[11,"deserialize_struct_field","","",251,null],[11,"deserialize_tuple","","",251,null],[11,"deserialize_enum","","",251,null],[11,"deserialize_ignored_any","","",251,null],[11,"visit_key","","",251,null],[11,"visit_value","","",251,null],[11,"end","","",251,null],[11,"size_hint","","",251,null],[11,"visit","","",251,null],[11,"end","","",251,null],[11,"size_hint","","",251,null],[11,"into_deserializer","collections::btree::map","",135,null],[11,"into_deserializer","std::collections::hash::map","",218,null],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",252,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",252,null],[11,"deserialize_bool","","",252,null],[11,"deserialize_usize","","",252,null],[11,"deserialize_u8","","",252,null],[11,"deserialize_u16","","",252,null],[11,"deserialize_u32","","",252,null],[11,"deserialize_u64","","",252,null],[11,"deserialize_isize","","",252,null],[11,"deserialize_i8","","",252,null],[11,"deserialize_i16","","",252,null],[11,"deserialize_i32","","",252,null],[11,"deserialize_i64","","",252,null],[11,"deserialize_f32","","",252,null],[11,"deserialize_f64","","",252,null],[11,"deserialize_char","","",252,null],[11,"deserialize_str","","",252,null],[11,"deserialize_string","","",252,null],[11,"deserialize_unit","","",252,null],[11,"deserialize_option","","",252,null],[11,"deserialize_seq","","",252,null],[11,"deserialize_seq_fixed_size","","",252,null],[11,"deserialize_bytes","","",252,null],[11,"deserialize_map","","",252,null],[11,"deserialize_unit_struct","","",252,null],[11,"deserialize_newtype_struct","","",252,null],[11,"deserialize_tuple_struct","","",252,null],[11,"deserialize_struct","","",252,null],[11,"deserialize_struct_field","","",252,null],[11,"deserialize_tuple","","",252,null],[11,"deserialize_enum","","",252,null],[11,"deserialize_ignored_any","","",252,null],[11,"into_deserializer","serde::bytes","",188,null],[11,"deserialize","serde::de::value","",253,null],[11,"deserialize_bool","","",253,null],[11,"deserialize_usize","","",253,null],[11,"deserialize_u8","","",253,null],[11,"deserialize_u16","","",253,null],[11,"deserialize_u32","","",253,null],[11,"deserialize_u64","","",253,null],[11,"deserialize_isize","","",253,null],[11,"deserialize_i8","","",253,null],[11,"deserialize_i16","","",253,null],[11,"deserialize_i32","","",253,null],[11,"deserialize_i64","","",253,null],[11,"deserialize_f32","","",253,null],[11,"deserialize_f64","","",253,null],[11,"deserialize_char","","",253,null],[11,"deserialize_str","","",253,null],[11,"deserialize_string","","",253,null],[11,"deserialize_unit","","",253,null],[11,"deserialize_option","","",253,null],[11,"deserialize_seq","","",253,null],[11,"deserialize_seq_fixed_size","","",253,null],[11,"deserialize_bytes","","",253,null],[11,"deserialize_map","","",253,null],[11,"deserialize_unit_struct","","",253,null],[11,"deserialize_newtype_struct","","",253,null],[11,"deserialize_tuple_struct","","",253,null],[11,"deserialize_struct","","",253,null],[11,"deserialize_struct_field","","",253,null],[11,"deserialize_tuple","","",253,null],[11,"deserialize_enum","","",253,null],[11,"deserialize_ignored_any","","",253,null],[11,"into_deserializer","serde::bytes","",186,null],[11,"deserialize","serde::de::value","",254,null],[11,"deserialize_bool","","",254,null],[11,"deserialize_usize","","",254,null],[11,"deserialize_u8","","",254,null],[11,"deserialize_u16","","",254,null],[11,"deserialize_u32","","",254,null],[11,"deserialize_u64","","",254,null],[11,"deserialize_isize","","",254,null],[11,"deserialize_i8","","",254,null],[11,"deserialize_i16","","",254,null],[11,"deserialize_i32","","",254,null],[11,"deserialize_i64","","",254,null],[11,"deserialize_f32","","",254,null],[11,"deserialize_f64","","",254,null],[11,"deserialize_char","","",254,null],[11,"deserialize_str","","",254,null],[11,"deserialize_string","","",254,null],[11,"deserialize_unit","","",254,null],[11,"deserialize_option","","",254,null],[11,"deserialize_seq","","",254,null],[11,"deserialize_seq_fixed_size","","",254,null],[11,"deserialize_bytes","","",254,null],[11,"deserialize_map","","",254,null],[11,"deserialize_unit_struct","","",254,null],[11,"deserialize_newtype_struct","","",254,null],[11,"deserialize_tuple_struct","","",254,null],[11,"deserialize_struct","","",254,null],[11,"deserialize_struct_field","","",254,null],[11,"deserialize_tuple","","",254,null],[11,"deserialize_enum","","",254,null],[11,"deserialize_ignored_any","","",254,null],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",255,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",255,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",255,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",255,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",255,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",256,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",257,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",257,null],[10,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",257,null],[10,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.\nA reasonable default is to forward to `deserialize_u64`.",257,null],[10,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.\nA reasonable default is to forward to `deserialize_u64`.",257,null],[10,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.\nA reasonable default is to forward to `deserialize_u64`.",257,null],[10,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.\nA reasonable default is to forward to `deserialize_u64`.",257,null],[10,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",257,null],[10,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.\nA reasonable default is to forward to `deserialize_i64`.",257,null],[10,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.\nA reasonable default is to forward to `deserialize_i64`.",257,null],[10,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.\nA reasonable default is to forward to `deserialize_i64`.",257,null],[10,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.\nA reasonable default is to forward to `deserialize_i64`.",257,null],[10,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",257,null],[10,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.\nA reasonable default is to forward to `deserialize_f64`.",257,null],[10,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",257,null],[10,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",257,null],[10,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",257,null],[10,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",257,null],[10,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",257,null],[10,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",257,null],[10,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",257,null],[10,"deserialize_seq_fixed_size","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",257,null],[10,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",257,null],[10,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",257,null],[10,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",257,null],[10,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.\nA reasonable default is to simply deserialize the expected value directly.",257,null],[10,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",257,null],[10,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",257,null],[10,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",257,null],[10,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",257,null],[10,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",257,null],[10,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",257,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",258,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",258,null],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",258,null],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",258,null],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",258,null],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",258,null],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",258,null],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",258,null],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",258,null],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",258,null],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",258,null],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",258,null],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",258,null],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",258,null],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",258,null],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",258,null],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",258,null],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",258,null],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",258,null],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",258,null],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",258,null],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",258,null],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",258,null],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",258,null],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",258,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",258,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",259,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",259,null],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",259,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",259,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",260,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",260,null],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",260,null],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",260,null],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",260,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",260,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",260,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",261,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",261,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",262,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",262,null],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",262,null],[10,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value.\nA good default is often to use the `visit_tuple` method to deserialize a `(value,)`.",262,null],[10,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.\nIf no tuple variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`",262,null],[10,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.\nIf no struct variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`",262,null],[11,"fmt","","",189,null],[11,"eq","","",189,null],[11,"clone","","",189,null],[11,"fmt","","",189,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",263,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",263,null],[11,"col","","Report the current column inside the iterator.",263,null],[11,"get_ref","","Gets a reference to the underlying iterator.",263,null],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",263,null],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",263,null],[11,"peek","","peeks at the next value",263,null],[11,"next","","",263,null],[0,"ser","serde","Generic serialization framework.\n# For Developers who want to serialize objects\nImplement the `Serialize` trait for the type of objects you want to serialize. Call methods of\nthe `serializer` object. For which methods to call and how to do so, look at the documentation\nof the `Serializer` trait.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types. Tuples implement the `Serialize` trait if they\nhave at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less.\nYou can always forward array serialization to slice serialization, which works for any length.\nLong tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In\nthat case the number of fields is irrelevant.",null,null],[11,"serialize","collections::string","",165,null],[11,"serialize","core::option","",63,null],[11,"serialize","core::marker","",8,null],[11,"serialize","collections::binary_heap","",130,null],[11,"serialize","collections::btree::set","",147,null],[11,"serialize","std::collections::hash::set","",197,null],[11,"serialize","collections::linked_list","",160,null],[11,"serialize","collections::vec","",134,null],[11,"serialize","collections::vec_deque","",172,null],[11,"serialize","collections::btree::map","",135,null],[11,"serialize","std::collections::hash::map","",218,null],[11,"serialize","alloc::boxed","",180,null],[11,"serialize","alloc::rc","",226,null],[11,"serialize","alloc::arc","",225,null],[11,"serialize","collections::borrow","",155,null],[11,"serialize","core::result","",68,null],[11,"serialize","std::time::duration","",227,null],[11,"serialize","std::net::ip","",219,null],[11,"serialize","","",220,null],[11,"serialize","std::net::addr","",221,null],[11,"serialize","","",222,null],[11,"serialize","","",223,null],[11,"serialize","std::path","",264,null],[11,"serialize","","",224,null],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is a general error when serializing a type.",265,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",265,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",266,null],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",267,null],[16,"SeqState","","A state object that is initialized by `serialize_seq`, passed to\n`serialize_seq_elt`, and consumed by `serialize_seq_end`. Use `()` if no\nstate is required.",267,null],[16,"TupleState","","A state object that is initialized by `serialize_tuple`, passed to\n`serialize_tuple_elt`, and consumed by `serialize_tuple_end`. Use `()`\nif no state is required.",267,null],[16,"TupleStructState","","A state object that is initialized by `serialize_tuple_struct`, passed\nto `serialize_tuple_struct_elt`, and consumed by\n`serialize_tuple_struct_end`. Use `()` if no state is required.",267,null],[16,"TupleVariantState","","A state object that is initialized by `serialize_tuple_variant`, passed\nto `serialize_tuple_variant_elt`, and consumed by\n`serialize_tuple_variant_end`. Use `()` if no state is required.",267,null],[16,"MapState","","A state object that is initialized by `serialize_map`, passed to\n`serialize_map_elt`, and consumed by `serialize_map_end`. Use `()` if no\nstate is required.",267,null],[16,"StructState","","A state object that is initialized by `serialize_struct`, passed to\n`serialize_struct_elt`, and consumed by `serialize_struct_end`. Use `()`\nif no state is required.",267,null],[16,"StructVariantState","","A state object that is initialized by `serialize_struct_variant`, passed\nto `serialize_struct_variant_elt`, and consumed by\n`serialize_struct_variant_end`. Use `()` if no state is required.",267,null],[10,"serialize_bool","","Serializes a `bool` value.",267,null],[10,"serialize_isize","","Serializes an `isize` value. If the format does not differentiate\nbetween `isize` and `i64`, a reasonable implementation would be to cast\nthe value to `i64` and forward to `serialize_i64`.",267,null],[10,"serialize_i8","","Serializes an `i8` value. If the format does not differentiate between\n`i8` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",267,null],[10,"serialize_i16","","Serializes an `i16` value. If the format does not differentiate between\n`i16` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",267,null],[10,"serialize_i32","","Serializes an `i32` value. If the format does not differentiate between\n`i32` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",267,null],[10,"serialize_i64","","Serializes an `i64` value.",267,null],[10,"serialize_usize","","Serializes a `usize` value. If the format does not differentiate between\n`usize` and `u64`, a reasonable implementation would be to cast the\nvalue to `u64` and forward to `serialize_u64`.",267,null],[10,"serialize_u8","","Serializes a `u8` value. If the format does not differentiate between\n`u8` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",267,null],[10,"serialize_u16","","Serializes a `u16` value. If the format does not differentiate between\n`u16` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",267,null],[10,"serialize_u32","","Serializes a `u32` value. If the format does not differentiate between\n`u32` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",267,null],[10,"serialize_u64","","`Serializes a `u64` value.",267,null],[10,"serialize_f32","","Serializes an `f32` value. If the format does not differentiate between\n`f32` and `f64`, a reasonable implementation would be to cast the value\nto `f64` and forward to `serialize_f64`.",267,null],[10,"serialize_f64","","Serializes an `f64` value.",267,null],[10,"serialize_char","","Serializes a character. If the format does not support characters,\nit is reasonable to serialize it as a single element `str` or a `u32`.",267,null],[10,"serialize_str","","Serializes a `&amp;str`.",267,null],[10,"serialize_bytes","","Enables serializers to serialize byte slices more compactly or more\nefficiently than other types of slices. If no efficient implementation\nis available, a reasonable implementation would be to forward to\n`serialize_seq`. If forwarded, the implementation looks usually just like this:\n```rust\nlet mut state = try!(self.serialize_seq(value));\nfor b in value {\n    try!(self.serialize_seq_elt(&amp;mut state, b));\n}\nself.serialize_seq_end(state)\n```",267,null],[10,"serialize_unit","","Serializes a `()` value. It&#39;s reasonable to just not serialize anything.",267,null],[10,"serialize_unit_struct","","Serializes a unit struct value. A reasonable implementation would be to\nforward to `serialize_unit`.",267,null],[10,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no\narguments. A reasonable implementation would be to forward to\n`serialize_unit`.",267,null],[10,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtype\nstruct, to be more efficiently serialized than a tuple struct with\nmultiple items. A reasonable implementation would be to forward to\n`serialize_tuple_struct` or to just serialize the inner value without wrapping.",267,null],[10,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized\nthan a variant with multiple items. A reasonable implementation would be\nto forward to `serialize_tuple_variant`.",267,null],[10,"serialize_none","","Serializes a `None` value.",267,null],[10,"serialize_some","","Serializes a `Some(...)` value.",267,null],[10,"serialize_seq","","Begins to serialize a sequence. This call must be followed by zero or\nmore calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.",267,null],[10,"serialize_seq_elt","","Serializes a sequence element. Must have previously called\n`serialize_seq`.",267,null],[10,"serialize_seq_end","","Finishes serializing a sequence.",267,null],[10,"serialize_seq_fixed_size","","Begins to serialize a sequence whose length will be known at\ndeserialization time. This call must be followed by zero or more calls\nto `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable\nimplementation would be to forward to `serialize_seq`.",267,null],[10,"serialize_tuple","","Begins to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A\nreasonable implementation would be to forward to `serialize_seq`.",267,null],[10,"serialize_tuple_elt","","Serializes a tuple element. Must have previously called\n`serialize_tuple`.",267,null],[10,"serialize_tuple_end","","Finishes serializing a tuple.",267,null],[10,"serialize_tuple_struct","","Begins to serialize a tuple struct. This call must be followed by zero\nor more calls to `serialize_tuple_struct_elt`, then a call to\n`serialize_tuple_struct_end`. A reasonable implementation would be to\nforward to `serialize_tuple`.",267,null],[10,"serialize_tuple_struct_elt","","Serializes a tuple struct element. Must have previously called\n`serialize_tuple_struct`.",267,null],[10,"serialize_tuple_struct_end","","Finishes serializing a tuple struct.",267,null],[10,"serialize_tuple_variant","","Begins to serialize a tuple variant. This call must be followed by zero\nor more calls to `serialize_tuple_variant_elt`, then a call to\n`serialize_tuple_variant_end`. A reasonable implementation would be to\nforward to `serialize_tuple_struct`.",267,null],[10,"serialize_tuple_variant_elt","","Serializes a tuple variant element. Must have previously called\n`serialize_tuple_variant`.",267,null],[10,"serialize_tuple_variant_end","","Finishes serializing a tuple variant.",267,null],[10,"serialize_map","","Begins to serialize a map. This call must be followed by zero or more\ncalls to `serialize_map_key` and `serialize_map_value`, then a call to\n`serialize_map_end`.",267,null],[10,"serialize_map_key","","Serialize a map key. Must have previously called `serialize_map`.",267,null],[10,"serialize_map_value","","Serialize a map value. Must have previously called `serialize_map`.",267,null],[10,"serialize_map_end","","Finishes serializing a map.",267,null],[10,"serialize_struct","","Begins to serialize a struct. This call must be followed by zero or more\ncalls to `serialize_struct_elt`, then a call to `serialize_struct_end`.",267,null],[10,"serialize_struct_elt","","Serializes a struct field. Must have previously called\n`serialize_struct`.",267,null],[10,"serialize_struct_end","","Finishes serializing a struct.",267,null],[10,"serialize_struct_variant","","Begins to serialize a struct variant. This call must be followed by zero\nor more calls to `serialize_struct_variant_elt`, then a call to\n`serialize_struct_variant_end`.",267,null],[10,"serialize_struct_variant_elt","","Serialize a struct variant element. Must have previously called\n`serialize_struct_variant`.",267,null],[10,"serialize_struct_variant_end","","Finishes serializing a struct variant.",267,null],[14,"forward_to_deserialize!","serde","Helper to forward `Deserializer` methods to `Deserializer::deserialize`.\nEvery given method ignores all arguments and forwards to `deserialize`.\nNote that `deserialize_enum` simply returns an `Error::invalid_type`; a\nbetter approach is tracked in [serde-rs/serde#521][1].",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Hash"],[8,"Hasher"],[8,"Write"],[8,"PartialEq"],[8,"PartialOrd"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"EncodeUtf16"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"Iterator"],[8,"ExactSizeIterator"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Arc"],[3,"Rc"],[3,"Duration"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,null]],"paths":[[8,"Integer"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",20,null],[12,"ai_family","","",20,null],[12,"ai_socktype","","",20,null],[12,"ai_protocol","","",20,null],[12,"ai_addrlen","","",20,null],[12,"ai_addr","","",20,null],[12,"ai_canonname","","",20,null],[12,"ai_next","","",20,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",21,null],[12,"nl_pid","","",21,null],[12,"nl_groups","","",21,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",22,null],[12,"sll_protocol","","",22,null],[12,"sll_ifindex","","",22,null],[12,"sll_hatype","","",22,null],[12,"sll_pkttype","","",22,null],[12,"sll_halen","","",22,null],[12,"sll_addr","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",24,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",25,null],[12,"dli_fbase","","",25,null],[12,"dli_sname","","",25,null],[12,"dli_saddr","","",25,null],[3,"epoll_event","","",null,null],[12,"events","","",26,null],[12,"u64","","",26,null],[3,"utsname","","",null,null],[12,"sysname","","",27,null],[12,"nodename","","",27,null],[12,"release","","",27,null],[12,"version","","",27,null],[12,"machine","","",27,null],[12,"domainname","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"dirent","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"dirent64","","",null,null],[12,"d_ino","","",30,null],[12,"d_off","","",30,null],[12,"d_reclen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",31,null],[12,"rlim_max","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_pathv","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_flags","","",32,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",33,null],[12,"ifa_name","","",33,null],[12,"ifa_flags","","",33,null],[12,"ifa_addr","","",33,null],[12,"ifa_netmask","","",33,null],[12,"ifa_ifu","","",33,null],[12,"ifa_data","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",34,null],[12,"pw_passwd","","",34,null],[12,"pw_uid","","",34,null],[12,"pw_gid","","",34,null],[12,"pw_gecos","","",34,null],[12,"pw_dir","","",34,null],[12,"pw_shell","","",34,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",35,null],[12,"f_frsize","","",35,null],[12,"f_blocks","","",35,null],[12,"f_bfree","","",35,null],[12,"f_bavail","","",35,null],[12,"f_files","","",35,null],[12,"f_ffree","","",35,null],[12,"f_favail","","",35,null],[12,"f_fsid","","",35,null],[12,"f_flag","","",35,null],[12,"f_namemax","","",35,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",36,null],[12,"dqb_bsoftlimit","","",36,null],[12,"dqb_curspace","","",36,null],[12,"dqb_ihardlimit","","",36,null],[12,"dqb_isoftlimit","","",36,null],[12,"dqb_curinodes","","",36,null],[12,"dqb_btime","","",36,null],[12,"dqb_itime","","",36,null],[12,"dqb_valid","","",36,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",37,null],[12,"ssi_errno","","",37,null],[12,"ssi_code","","",37,null],[12,"ssi_pid","","",37,null],[12,"ssi_uid","","",37,null],[12,"ssi_fd","","",37,null],[12,"ssi_tid","","",37,null],[12,"ssi_band","","",37,null],[12,"ssi_overrun","","",37,null],[12,"ssi_trapno","","",37,null],[12,"ssi_status","","",37,null],[12,"ssi_int","","",37,null],[12,"ssi_ptr","","",37,null],[12,"ssi_utime","","",37,null],[12,"ssi_stime","","",37,null],[12,"ssi_addr","","",37,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",38,null],[12,"mq_maxmsg","","",38,null],[12,"mq_msgsize","","",38,null],[12,"mq_curmsgs","","",38,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",39,null],[12,"if_name","","",39,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",40,null],[12,"e_exit","","",40,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",41,null],[12,"tv_usec","","",41,null],[3,"utmpx","","",null,null],[12,"ut_type","","",42,null],[12,"ut_pid","","",42,null],[12,"ut_line","","",42,null],[12,"ut_id","","",42,null],[12,"ut_user","","",42,null],[12,"ut_host","","",42,null],[12,"ut_exit","","",42,null],[12,"ut_session","","",42,null],[12,"ut_tv","","",42,null],[12,"ut_addr_v6","","",42,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",43,null],[12,"sa_mask","","",43,null],[12,"sa_flags","","",43,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",44,null],[12,"ss_flags","","",44,null],[12,"ss_size","","",44,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",45,null],[12,"si_errno","","",45,null],[12,"si_code","","",45,null],[12,"_pad","","",45,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",46,null],[12,"gl_pathv","","",46,null],[12,"gl_offs","","",46,null],[12,"gl_flags","","",46,null],[3,"ucred","","",null,null],[12,"pid","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[3,"statfs","","",null,null],[12,"f_type","","",48,null],[12,"f_bsize","","",48,null],[12,"f_blocks","","",48,null],[12,"f_bfree","","",48,null],[12,"f_bavail","","",48,null],[12,"f_files","","",48,null],[12,"f_ffree","","",48,null],[12,"f_fsid","","",48,null],[12,"f_namelen","","",48,null],[12,"f_frsize","","",48,null],[3,"msghdr","","",null,null],[12,"msg_name","","",49,null],[12,"msg_namelen","","",49,null],[12,"msg_iov","","",49,null],[12,"msg_iovlen","","",49,null],[12,"msg_control","","",49,null],[12,"msg_controllen","","",49,null],[12,"msg_flags","","",49,null],[3,"termios","","",null,null],[12,"c_iflag","","",50,null],[12,"c_oflag","","",50,null],[12,"c_cflag","","",50,null],[12,"c_lflag","","",50,null],[12,"c_line","","",50,null],[12,"c_cc","","",50,null],[12,"c_ispeed","","",50,null],[12,"c_ospeed","","",50,null],[3,"flock","","",null,null],[12,"l_type","","",51,null],[12,"l_whence","","",51,null],[12,"l_start","","",51,null],[12,"l_len","","",51,null],[12,"l_pid","","",51,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",52,null],[12,"loads","","",52,null],[12,"totalram","","",52,null],[12,"freeram","","",52,null],[12,"sharedram","","",52,null],[12,"bufferram","","",52,null],[12,"totalswap","","",52,null],[12,"freeswap","","",52,null],[12,"procs","","",52,null],[12,"pad","","",52,null],[12,"totalhigh","","",52,null],[12,"freehigh","","",52,null],[12,"mem_unit","","",52,null],[12,"_f","","",52,null],[3,"stat","","",null,null],[12,"st_dev","","",53,null],[12,"st_ino","","",53,null],[12,"st_nlink","","",53,null],[12,"st_mode","","",53,null],[12,"st_uid","","",53,null],[12,"st_gid","","",53,null],[12,"st_rdev","","",53,null],[12,"st_size","","",53,null],[12,"st_blksize","","",53,null],[12,"st_blocks","","",53,null],[12,"st_atime","","",53,null],[12,"st_atime_nsec","","",53,null],[12,"st_mtime","","",53,null],[12,"st_mtime_nsec","","",53,null],[12,"st_ctime","","",53,null],[12,"st_ctime_nsec","","",53,null],[3,"stat64","","",null,null],[12,"st_dev","","",54,null],[12,"st_ino","","",54,null],[12,"st_nlink","","",54,null],[12,"st_mode","","",54,null],[12,"st_uid","","",54,null],[12,"st_gid","","",54,null],[12,"st_rdev","","",54,null],[12,"st_size","","",54,null],[12,"st_blksize","","",54,null],[12,"st_blocks","","",54,null],[12,"st_atime","","",54,null],[12,"st_atime_nsec","","",54,null],[12,"st_mtime","","",54,null],[12,"st_mtime_nsec","","",54,null],[12,"st_ctime","","",54,null],[12,"st_ctime_nsec","","",54,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",55,null],[12,"exponent","","",55,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",56,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",57,null],[12,"swd","","",57,null],[12,"ftw","","",57,null],[12,"fop","","",57,null],[12,"rip","","",57,null],[12,"rdp","","",57,null],[12,"mxcsr","","",57,null],[12,"mxcr_mask","","",57,null],[12,"_st","","",57,null],[12,"_xmm","","",57,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",58,null],[12,"fpregs","","",58,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",59,null],[12,"uc_link","","",59,null],[12,"uc_stack","","",59,null],[12,"uc_mcontext","","",59,null],[12,"uc_sigmask","","",59,null],[3,"ipc_perm","","",null,null],[12,"__key","","",60,null],[12,"uid","","",60,null],[12,"gid","","",60,null],[12,"cuid","","",60,null],[12,"cgid","","",60,null],[12,"mode","","",60,null],[12,"__seq","","",60,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",61,null],[12,"shm_segsz","","",61,null],[12,"shm_atime","","",61,null],[12,"shm_dtime","","",61,null],[12,"shm_ctime","","",61,null],[12,"shm_cpid","","",61,null],[12,"shm_lpid","","",61,null],[12,"shm_nattch","","",61,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",62,null],[11,"is_none","","Returns `true` if the option is a `None` value",62,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",62,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",62,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",62,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",62,null],[11,"unwrap_or","","Returns the contained value or a default.",62,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",62,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",62,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",62,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",62,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",62,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",62,null],[11,"iter","","Returns an iterator over the possibly contained value.",62,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",62,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",62,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",62,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",62,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",62,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",62,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",62,null],[11,"unwrap_or_default","","Returns the contained value or a default",62,null],[11,"hash","core::num","",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"eq","core::num::dec2flt","",64,null],[11,"ne","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",64,null],[11,"fmt","","",64,null],[11,"fmt","core::num","",65,null],[11,"eq","","",65,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"fmt","","",66,null],[11,"fmt","","",66,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"fmt","","",67,null],[11,"hash","core::nonzero","",68,null],[11,"fmt","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"cmp","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",68,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",68,null],[11,"new","core::ptr","Creates a new `Unique`.",69,null],[11,"get","","Dereferences the content.",69,null],[11,"get_mut","","Mutably dereferences the content.",69,null],[11,"deref","","",69,null],[11,"fmt","","",69,null],[11,"new","","Creates a new `Shared`.",70,null],[11,"clone","","",70,null],[11,"deref","","",70,null],[11,"fmt","","",70,null],[11,"hash","core::marker","",71,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"cmp","","",71,null],[11,"clone","","",71,null],[11,"default","","",71,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",72,null],[11,"eq","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"hash","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"contains","","# Examples",73,null],[11,"hash","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",74,null],[11,"contains","","# Examples",74,null],[11,"hash","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",75,null],[11,"contains","","# Examples",75,null],[11,"hash","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",76,null],[11,"contains","","# Examples",76,null],[11,"hash","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",77,null],[11,"contains","","# Examples",77,null],[11,"hash","core::cmp","",78,null],[11,"fmt","","",78,null],[11,"eq","","",78,null],[11,"clone","","",78,null],[11,"reverse","","Reverse the `Ordering`.",78,null],[11,"cmp","","",78,null],[11,"partial_cmp","","",78,null],[11,"fmt","libc","",79,null],[11,"fmt","","",79,null],[11,"is","","Returns true if the boxed type is the same as `T`",79,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",79,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",79,null],[11,"is","","Forwards to the method defined on the type `Any`.",79,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",79,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",79,null],[11,"hash","core::any","",80,null],[11,"fmt","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",80,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",81,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",83,null],[11,"clone","","",83,null],[11,"new","","Creates a new `AtomicBool`.",81,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",81,null],[11,"store","","Stores a value into the bool.",81,null],[11,"swap","","Stores a value into the bool, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",81,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",81,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",81,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",81,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",81,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",81,null],[11,"new","","Creates a new `AtomicPtr`.",82,null],[11,"load","","Loads a value from the pointer.",82,null],[11,"store","","Stores a value into the pointer.",82,null],[11,"swap","","Stores a value into the pointer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",82,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",82,null],[11,"default","","",84,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",84,null],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",84,null],[11,"store","","Stores a value into the atomic integer.",84,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",84,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"fetch_add","","Add to the current value, returning the previous value.",84,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",84,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",84,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",84,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",84,null],[11,"default","","",85,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",85,null],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",85,null],[11,"store","","Stores a value into the atomic integer.",85,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"fetch_add","","Add to the current value, returning the previous value.",85,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",85,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",85,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",85,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",85,null],[11,"default","","",86,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",86,null],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",86,null],[11,"store","","Stores a value into the atomic integer.",86,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",86,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"fetch_add","","Add to the current value, returning the previous value.",86,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",86,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",86,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",86,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",86,null],[11,"default","","",87,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",87,null],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",87,null],[11,"store","","Stores a value into the atomic integer.",87,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",87,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"fetch_add","","Add to the current value, returning the previous value.",87,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",87,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",87,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",87,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",87,null],[11,"default","","",88,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",88,null],[11,"new","","Creates a new atomic integer.",88,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",88,null],[11,"store","","Stores a value into the atomic integer.",88,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",88,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"fetch_add","","Add to the current value, returning the previous value.",88,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",88,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",88,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",88,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",88,null],[11,"default","","",89,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",89,null],[11,"new","","Creates a new atomic integer.",89,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",89,null],[11,"store","","Stores a value into the atomic integer.",89,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",89,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",89,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",89,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",89,null],[11,"fetch_add","","Add to the current value, returning the previous value.",89,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",89,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",89,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",89,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",89,null],[11,"default","","",90,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",90,null],[11,"new","","Creates a new atomic integer.",90,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",90,null],[11,"store","","Stores a value into the atomic integer.",90,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",90,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",90,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",90,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",90,null],[11,"fetch_add","","Add to the current value, returning the previous value.",90,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",90,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",90,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",90,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",90,null],[11,"default","","",91,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",91,null],[11,"new","","Creates a new atomic integer.",91,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",91,null],[11,"store","","Stores a value into the atomic integer.",91,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",91,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",91,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",91,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",91,null],[11,"fetch_add","","Add to the current value, returning the previous value.",91,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",91,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",91,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",91,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",91,null],[11,"default","","",92,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",92,null],[11,"new","","Creates a new atomic integer.",92,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",92,null],[11,"store","","Stores a value into the atomic integer.",92,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",92,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",92,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",92,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",92,null],[11,"fetch_add","","Add to the current value, returning the previous value.",92,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",92,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",92,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",92,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",92,null],[11,"default","","",93,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",93,null],[11,"new","","Creates a new atomic integer.",93,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",93,null],[11,"store","","Stores a value into the atomic integer.",93,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",93,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",93,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",93,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",93,null],[11,"fetch_add","","Add to the current value, returning the previous value.",93,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",93,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",93,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",93,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",93,null],[11,"fmt","","",81,null],[11,"fmt","","",82,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",94,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",94,null],[11,"set","","Sets the contained value.",94,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",94,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",94,null],[11,"clone","","",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",94,null],[11,"partial_cmp","","",94,null],[11,"lt","","",94,null],[11,"le","","",94,null],[11,"gt","","",94,null],[11,"ge","","",94,null],[11,"cmp","","",94,null],[11,"fmt","","",95,null],[11,"eq","","",95,null],[11,"clone","","",95,null],[11,"new","","Creates a new `RefCell` containing `value`.",96,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",96,null],[11,"borrow_state","","Query the current state of this `RefCell`",96,null],[11,"borrow","","Immutably borrows the wrapped value.",96,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",96,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",96,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",96,null],[11,"clone","","",96,null],[11,"default","","",96,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",96,null],[11,"partial_cmp","","",96,null],[11,"lt","","",96,null],[11,"le","","",96,null],[11,"gt","","",96,null],[11,"ge","","",96,null],[11,"cmp","","",96,null],[11,"deref","","",97,null],[11,"clone","","Copies a `Ref`.",97,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",97,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",98,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",98,null],[11,"deref_mut","","",98,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",99,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",99,null],[11,"get","","Gets a mutable pointer to the wrapped value.",99,null],[11,"default","","",99,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",100,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"count","","",100,null],[11,"last","","",100,null],[11,"len","","",100,null],[11,"fmt","","",101,null],[11,"clone","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"count","","",101,null],[11,"nth","","",101,null],[11,"last","","",101,null],[11,"len","","",101,null],[11,"fmt","","",102,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"fmt","","",103,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"fmt","core::iter::range","",104,null],[11,"clone","","",104,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",74,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",73,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",76,null],[11,"next","core::iter::range","",104,null],[11,"size_hint","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next","core::ops","",73,null],[11,"size_hint","","",73,null],[11,"next_back","","",73,null],[11,"next","","",74,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"fmt","core::iter::sources","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"next","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"len","","",106,null],[11,"clone","","",106,null],[11,"default","","",106,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"len","","",107,null],[11,"fmt","core::iter","",108,null],[11,"clone","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"next","","",111,null],[11,"count","","",111,null],[11,"nth","","",111,null],[11,"find","","",111,null],[11,"last","","",111,null],[11,"size_hint","","",111,null],[11,"next_back","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"next","","",112,null],[11,"size_hint","","",112,null],[11,"next_back","","",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"next_back","","",113,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"next_back","","",114,null],[11,"clone","","",115,null],[11,"fmt","","",115,null],[11,"next","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"next","","# Overflow Behavior",116,null],[11,"size_hint","","",116,null],[11,"nth","","",116,null],[11,"count","","",116,null],[11,"next_back","","",116,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"next","","",117,null],[11,"count","","",117,null],[11,"nth","","",117,null],[11,"last","","",117,null],[11,"size_hint","","",117,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",117,null],[11,"is_empty","","Checks if the iterator has finished iterating.",117,null],[11,"clone","","",118,null],[11,"fmt","","",118,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"clone","","",119,null],[11,"fmt","","",119,null],[11,"next","","",119,null],[11,"size_hint","","",119,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"next","","",120,null],[11,"nth","","",120,null],[11,"count","","",120,null],[11,"last","","",120,null],[11,"size_hint","","",120,null],[11,"next_back","","",120,null],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"next","","",121,null],[11,"nth","","",121,null],[11,"size_hint","","",121,null],[11,"clone","","",122,null],[11,"fmt","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"clone","","",123,null],[11,"fmt","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"next","","",124,null],[11,"nth","","",124,null],[11,"last","","",124,null],[11,"count","","",124,null],[11,"size_hint","","",124,null],[11,"next_back","","",124,null],[11,"clone","","",125,null],[11,"fmt","","",125,null],[11,"next","","",125,null],[11,"size_hint","","",125,null],[11,"next_back","","",125,null],[11,"hash","core::option","",62,null],[11,"fmt","","",62,null],[11,"cmp","","",62,null],[11,"partial_cmp","","",62,null],[11,"lt","","",62,null],[11,"le","","",62,null],[11,"gt","","",62,null],[11,"ge","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"default","","",62,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",62,null],[11,"fmt","","",126,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"next_back","","",126,null],[11,"clone","","",126,null],[11,"fmt","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next_back","","",128,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",62,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",129,null],[11,"hash","core::result","",130,null],[11,"fmt","","",130,null],[11,"cmp","","",130,null],[11,"partial_cmp","","",130,null],[11,"lt","","",130,null],[11,"le","","",130,null],[11,"gt","","",130,null],[11,"ge","","",130,null],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"clone","","",130,null],[11,"is_ok","","Returns true if the result is `Ok`",130,null],[11,"is_err","","Returns true if the result is `Err`",130,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",130,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",130,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",130,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",130,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",130,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",130,null],[11,"iter","","Returns an iterator over the possibly contained value.",130,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",130,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",130,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",130,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",130,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",130,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",130,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",130,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",130,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",130,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",130,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",130,null],[11,"fmt","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"clone","","",131,null],[11,"fmt","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"fmt","","",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",130,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",134,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",134,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"count","","",134,null],[11,"nth","","",134,null],[11,"last","","",134,null],[11,"next_back","","",134,null],[11,"clone","","",134,null],[11,"fmt","","",135,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",135,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"count","","",135,null],[11,"nth","","",135,null],[11,"last","","",135,null],[11,"next_back","","",135,null],[11,"fmt","","",136,null],[11,"clone","","",136,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next_back","","",136,null],[11,"fmt","","",137,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next_back","","",137,null],[11,"fmt","","",138,null],[11,"fmt","","",139,null],[11,"fmt","","",140,null],[11,"fmt","","",141,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"next","","",141,null],[11,"size_hint","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"count","","",142,null],[11,"nth","","",142,null],[11,"last","","",142,null],[11,"next_back","","",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"next","","",143,null],[11,"size_hint","","",143,null],[11,"count","","",143,null],[11,"nth","","",143,null],[11,"last","","",143,null],[11,"next_back","","",143,null],[11,"fmt","","",144,null],[11,"next","","",144,null],[11,"size_hint","","",144,null],[11,"count","","",144,null],[11,"nth","","",144,null],[11,"last","","",144,null],[11,"next_back","","",144,null],[11,"fmt","core::str::pattern","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"clone","","",145,null],[11,"fmt","","",146,null],[11,"clone","","",146,null],[11,"haystack","","",146,null],[11,"next","","",146,null],[11,"next_match","","",146,null],[11,"next_reject","","",146,null],[11,"next_back","","",146,null],[11,"next_match_back","","",146,null],[11,"next_reject_back","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"haystack","","",147,null],[11,"next","","",147,null],[11,"next_match","","",147,null],[11,"next_reject","","",147,null],[11,"next_back","","",147,null],[11,"next_match_back","","",147,null],[11,"next_reject_back","","",147,null],[11,"clone","","",148,null],[11,"fmt","","",148,null],[11,"haystack","","",148,null],[11,"next","","",148,null],[11,"next_match","","",148,null],[11,"next_reject","","",148,null],[11,"next_back","","",148,null],[11,"next_match_back","","",148,null],[11,"next_reject_back","","",148,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"haystack","","",149,null],[11,"next","","",149,null],[11,"next_match","","",149,null],[11,"next_back","","",149,null],[11,"next_match_back","","",149,null],[11,"eq","core::str","",150,null],[11,"ne","","",150,null],[11,"clone","","",150,null],[11,"fmt","","",150,null],[11,"fmt","","",150,null],[11,"fmt","","",151,null],[11,"clone","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",151,null],[11,"fmt","","",151,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"next_back","","",152,null],[11,"as_str","","View the underlying data as a subslice of the original data.",152,null],[11,"fmt","","",153,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"next_back","","",153,null],[11,"as_str","","View the underlying data as a subslice of the original data.",153,null],[11,"fmt","","",154,null],[11,"clone","","",154,null],[11,"next","","",154,null],[11,"size_hint","","",154,null],[11,"count","","",154,null],[11,"last","","",154,null],[11,"nth","","",154,null],[11,"next_back","","",154,null],[11,"len","","",154,null],[11,"fmt","","",155,null],[11,"next","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"next","","",156,null],[11,"clone","","",156,null],[11,"next_back","","",155,null],[11,"next_back","","",156,null],[11,"fmt","","",157,null],[11,"next","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"next","","",158,null],[11,"clone","","",158,null],[11,"next_back","","",157,null],[11,"next_back","","",158,null],[11,"fmt","","",159,null],[11,"next","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"next","","",160,null],[11,"clone","","",160,null],[11,"fmt","","",161,null],[11,"next","","",161,null],[11,"clone","","",161,null],[11,"fmt","","",162,null],[11,"next","","",162,null],[11,"clone","","",162,null],[11,"next_back","","",161,null],[11,"next_back","","",162,null],[11,"fmt","","",163,null],[11,"next","","",163,null],[11,"clone","","",163,null],[11,"fmt","","",164,null],[11,"next","","",164,null],[11,"clone","","",164,null],[11,"next_back","","",163,null],[11,"next_back","","",164,null],[11,"fmt","","",165,null],[11,"clone","","",165,null],[11,"next","","",165,null],[11,"size_hint","","",165,null],[11,"next_back","","",165,null],[11,"fmt","","",166,null],[11,"clone","","",166,null],[11,"next","","",166,null],[11,"size_hint","","",166,null],[11,"next_back","","",166,null],[11,"default","core::hash::sip","",167,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",167,null],[11,"fmt","","",167,null],[11,"default","","",168,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",168,null],[11,"fmt","","",168,null],[11,"default","","",169,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",169,null],[11,"fmt","","",169,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",169,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",169,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",167,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",167,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",168,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",168,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",169,null],[11,"finish","","",169,null],[11,"write","","",167,null],[11,"finish","","",167,null],[11,"write","","",168,null],[11,"finish","","",168,null],[11,"fmt","core::hash","",170,null],[11,"build_hasher","","",170,null],[11,"clone","","",170,null],[11,"default","","",170,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",171,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",172,null],[11,"finish","","Finishes output and returns any error encountered.",172,null],[11,"field","","Adds a new field to the generated tuple struct output.",173,null],[11,"finish","","Finishes output and returns any error encountered.",173,null],[11,"entry","","Adds a new entry to the set output.",174,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",174,null],[11,"finish","","Finishes output and returns any error encountered.",174,null],[11,"entry","","Adds a new entry to the list output.",175,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",175,null],[11,"finish","","Finishes output and returns any error encountered.",175,null],[11,"entry","","Adds a new entry to the map output.",176,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",176,null],[11,"finish","","Finishes output and returns any error encountered.",176,null],[11,"partial_cmp","core::fmt","",177,null],[11,"eq","","",177,null],[11,"cmp","","",177,null],[11,"hash","","",177,null],[11,"default","","",177,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",177,null],[11,"clone","","",177,null],[11,"clone","","",178,null],[11,"fmt","","",178,null],[11,"fmt","","",178,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",179,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",179,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",179,null],[11,"write_fmt","","Writes some formatted information into this instance",179,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",179,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",179,null],[11,"align","","Flag indicating what form of alignment was requested",179,null],[11,"width","","Optionally specified integer width that the output should be",179,null],[11,"precision","","Optionally specified precision for numeric types",179,null],[11,"sign_plus","","Determines if the `+` flag was specified.",179,null],[11,"sign_minus","","Determines if the `-` flag was specified.",179,null],[11,"alternate","","Determines if the `#` flag was specified.",179,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",179,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",179,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",179,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",179,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",179,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",179,null],[11,"write_str","","",179,null],[11,"write_char","","",179,null],[11,"write_fmt","","",179,null],[11,"fmt","","",177,null],[11,"fmt","core::marker","",71,null],[11,"fmt","core::cell","",94,null],[11,"fmt","","",96,null],[11,"fmt","","",97,null],[11,"fmt","","",98,null],[11,"fmt","","",99,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",180,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",180,null],[11,"clone","libc","",53,null],[11,"clone","","",54,null],[11,"clone","","",181,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",182,null],[11,"clone","","",52,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",183,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",184,null],[11,"clone","","",185,null],[11,"clone","","",186,null],[11,"clone","","",187,null],[11,"clone","","",188,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",189,null],[11,"clone","","",38,null],[11,"clone","","",190,null],[11,"clone","","",39,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",191,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"default","core::hash::sip","",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",105,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"write","","",105,null],[11,"finish","","",105,null],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",118,null],[10,"deref","","The method called to dereference a value",118,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",119,null],[12,"1","","",119,null],[11,"get","","",119,null],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"__Deref"],[3,"Lazy"]]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to\naccess your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand.\nNote that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This\nsimplifies error handling in the calling code. Invalid type conversion also\nreturns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"hash","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"on_event","","",1,null],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"as_bool","","",0,null],[11,"as_i64","","",0,null],[11,"as_str","","",0,null],[11,"as_hash","","",0,null],[11,"as_vec","","",0,null],[11,"is_null","","",0,null],[11,"is_badvalue","","",0,null],[11,"as_f64","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,null],[11,"index","","",0,null],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",3,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",4,null],[13,"Plain","","",4,null],[13,"SingleQuoted","","",4,null],[13,"DoubleQuoted","","",4,null],[13,"Literal","","",4,null],[13,"Foled","","",4,null],[4,"TokenType","","",null,null],[13,"NoToken","","",5,null],[13,"StreamStart","","",5,null],[13,"StreamEnd","","",5,null],[13,"VersionDirective","","major, minor",5,null],[13,"TagDirective","","handle, prefix",5,null],[13,"DocumentStart","","",5,null],[13,"DocumentEnd","","",5,null],[13,"BlockSequenceStart","","",5,null],[13,"BlockMappingStart","","",5,null],[13,"BlockEnd","","",5,null],[13,"FlowSequenceStart","","",5,null],[13,"FlowSequenceEnd","","",5,null],[13,"FlowMappingStart","","",5,null],[13,"FlowMappingEnd","","",5,null],[13,"BlockEntry","","",5,null],[13,"FlowEntry","","",5,null],[13,"Key","","",5,null],[13,"Value","","",5,null],[13,"Alias","","",5,null],[13,"Anchor","","",5,null],[13,"Tag","","handle, suffix",5,null],[13,"Scalar","","",5,null],[6,"ScanResult","","",null,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"new","","",7,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",7,null],[11,"cause","","",7,null],[11,"fmt","","",7,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",8,null],[11,"next","","",8,null],[11,"new","","Creates the YAML tokenizer.",8,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",8,null],[11,"stream_started","","",8,null],[11,"stream_ended","","",8,null],[11,"mark","","",8,null],[11,"fetch_next_token","","",8,null],[11,"next_token","","",8,null],[11,"fetch_more_tokens","","",8,null],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API,\nsee `EventReceiver` trait.",null,null],[13,"NoEvent","","Reserved for internal use",9,null],[13,"StreamStart","","",9,null],[13,"StreamEnd","","",9,null],[13,"DocumentStart","","",9,null],[13,"DocumentEnd","","",9,null],[13,"Alias","","Refer to an anchor ID",9,null],[13,"Scalar","","Value, style, anchor_id, tag",9,null],[13,"SequenceStart","","Anchor ID",9,null],[13,"SequenceEnd","","",9,null],[13,"MappingStart","","Anchor ID",9,null],[13,"MappingEnd","","",9,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",10,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",11,null],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",11,null],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",12,null],[13,"BadHashmapKey","","",12,null],[6,"EmitResult","","",null,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",13,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",13,null]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
searchIndex["unreachable"] = {"doc":"# unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,{"inputs":[],"output":null}],[8,"UncheckedOptionExt","","An extension trait for `Option&lt;T&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,null],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,null],[8,"UncheckedResultExt","","An extension trait for `Result&lt;T, E&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,null],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,null],[11,"unchecked_unwrap","core::option","",2,null],[11,"unchecked_unwrap_none","","",2,null],[11,"unchecked_unwrap_ok","core::result","",3,null],[11,"unchecked_unwrap_err","","",3,null]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"],[4,"Option"],[4,"Result"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.","items":[[3,"ANSIGenericString","ansi_term","An ANSIGenericString includes a generic string type and a Style to\ndisplay that string.  ANSIString and ANSIByteString are aliases for\nthis type on str and [u8], respectively.",null,null],[3,"Prefix","","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two\nstyles.",null,null],[3,"Style","","A style is a collection of properties that can format a string\nusing ANSI escape codes.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be\nwritten with a minimum of control characters.",null,null],[12,"0","","",0,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",1,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",1,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",1,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",1,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",1,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",1,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",1,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",1,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal\nenvironments.",1,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",1,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it\nin a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use\nANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be\nwritten with a minimum of control characters.",null,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape\nsequences for the associated Style around the bytes.",7,null],[11,"from","","",2,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"normal","","Return a Style with the foreground colour set to this colour.",1,null],[11,"paint","","Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don&#39;t have to use Blue.normal() just\nto get blue text.",1,null],[11,"prefix","","The prefix for this colour.",1,null],[11,"suffix","","The suffix for this colour.",1,null],[11,"infix","","The infix between this colour and another.",1,null],[11,"bold","","Returns a Style with the bold property set.",1,null],[11,"dimmed","","Returns a Style with the dimmed property set.",1,null],[11,"italic","","Returns a Style with the italic property set.",1,null],[11,"underline","","Returns a Style with the underline property set.",1,null],[11,"blink","","Returns a Style with the blink property set.",1,null],[11,"reverse","","Returns a Style with the reverse property set.",1,null],[11,"hidden","","Returns a Style with the hidden property set.",1,null],[11,"strikethrough","","Returns a Style with the strikethrough property set.",1,null],[11,"on","","Returns a Style with the background colour property set.",1,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"new","","Creates a new Style with no differences.",8,{"inputs":[],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",8,null],[11,"prefix","","The prefix for this style.",8,null],[11,"suffix","","The suffix for this style.",8,null],[11,"infix","","The infix between this style and another.",8,null],[11,"bold","","Returns a Style with the bold property set.",8,null],[11,"dimmed","","Returns a Style with the dimmed property set.",8,null],[11,"italic","","Returns a Style with the italic property set.",8,null],[11,"underline","","Returns a Style with the underline property set.",8,null],[11,"blink","","Returns a Style with the blink property set.",8,null],[11,"reverse","","Returns a Style with the reverse property set.",8,null],[11,"hidden","","Returns a Style with the hidden property set.",8,null],[11,"strikethrough","","Returns a Style with the hidden property set.",8,null],[11,"fg","","Returns a Style with the foreground colour property set.",8,null],[11,"on","","Returns a Style with the background colour property set.",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"style"}}],[11,"fmt","","",9,null],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal\nescape sequences for the associated Styles around each set of\nbytes.",10,null]],"paths":[[3,"ANSIGenericStrings"],[4,"Colour"],[3,"ANSIGenericString"],[3,"Prefix"],[3,"Suffix"],[3,"Infix"],[6,"ANSIString"],[6,"ANSIByteString"],[3,"Style"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"fmt","","",21,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"description","","",24,null],[11,"fmt","","",24,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,null],[11,"fmt","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",28,null],[11,"description","","",30,null],[11,"cause","","",30,null],[11,"fmt","","",30,null],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,null],[11,"fmt","","",29,null],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,null],[11,"fmt","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,null],[11,"emit_nil","","",35,null],[11,"emit_usize","","",35,null],[11,"emit_u64","","",35,null],[11,"emit_u32","","",35,null],[11,"emit_u16","","",35,null],[11,"emit_u8","","",35,null],[11,"emit_isize","","",35,null],[11,"emit_i64","","",35,null],[11,"emit_i32","","",35,null],[11,"emit_i16","","",35,null],[11,"emit_i8","","",35,null],[11,"emit_bool","","",35,null],[11,"emit_f64","","",35,null],[11,"emit_f32","","",35,null],[11,"emit_char","","",35,null],[11,"emit_str","","",35,null],[11,"emit_enum","","",35,null],[11,"emit_enum_variant","","",35,null],[11,"emit_enum_variant_arg","","",35,null],[11,"emit_enum_struct_variant","","",35,null],[11,"emit_enum_struct_variant_field","","",35,null],[11,"emit_struct","","",35,null],[11,"emit_struct_field","","",35,null],[11,"emit_tuple","","",35,null],[11,"emit_tuple_arg","","",35,null],[11,"emit_tuple_struct","","",35,null],[11,"emit_tuple_struct_arg","","",35,null],[11,"emit_option","","",35,null],[11,"emit_option_none","","",35,null],[11,"emit_option_some","","",35,null],[11,"emit_seq","","",35,null],[11,"emit_seq_elt","","",35,null],[11,"emit_map","","",35,null],[11,"emit_map_elt_key","","",35,null],[11,"emit_map_elt_val","","",35,null],[11,"encode","","",27,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,null],[11,"is_empty","","Returns true if the stack is empty.",36,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,null],[11,"next","","",37,null],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,null],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,null],[11,"read_usize","","",39,null],[11,"read_u8","","",39,null],[11,"read_u16","","",39,null],[11,"read_u32","","",39,null],[11,"read_u64","","",39,null],[11,"read_isize","","",39,null],[11,"read_i8","","",39,null],[11,"read_i16","","",39,null],[11,"read_i32","","",39,null],[11,"read_i64","","",39,null],[11,"read_f32","","",39,null],[11,"read_f64","","",39,null],[11,"read_bool","","",39,null],[11,"read_char","","",39,null],[11,"read_str","","",39,null],[11,"read_enum","","",39,null],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,null],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,null],[11,"read_struct","","",39,null],[11,"read_struct_field","","",39,null],[11,"read_tuple","","",39,null],[11,"read_tuple_arg","","",39,null],[11,"read_tuple_struct","","",39,null],[11,"read_tuple_struct_arg","","",39,null],[11,"read_option","","",39,null],[11,"read_seq","","",39,null],[11,"read_seq_elt","","",39,null],[11,"read_map","","",39,null],[11,"read_map_elt_key","","",39,null],[11,"read_map_elt_val","","",39,null],[11,"error","","",39,null],[11,"to_json","","",27,null],[11,"to_json","collections::string","",0,null],[11,"to_json","collections::vec","",4,null],[11,"to_json","collections::btree::map","",14,null],[11,"to_json","std::collections::hash::map","",16,null],[11,"to_json","core::option","",5,null],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,null],[11,"fmt","","Encodes a json value into a string",40,null],[11,"fmt","","Encodes a json value into a string",41,null],[11,"indent","","Set the indentation level for the emitted JSON",42,null],[11,"fmt","","Encodes a json value into a string",42,null],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,null],[10,"read_usize","","",43,null],[10,"read_u64","","",43,null],[10,"read_u32","","",43,null],[10,"read_u16","","",43,null],[10,"read_u8","","",43,null],[10,"read_isize","","",43,null],[10,"read_i64","","",43,null],[10,"read_i32","","",43,null],[10,"read_i16","","",43,null],[10,"read_i8","","",43,null],[10,"read_bool","","",43,null],[10,"read_f64","","",43,null],[10,"read_f32","","",43,null],[10,"read_char","","",43,null],[10,"read_str","","",43,null],[10,"read_enum","","",43,null],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,null],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,null],[10,"read_struct","","",43,null],[10,"read_struct_field","","",43,null],[10,"read_tuple","","",43,null],[10,"read_tuple_arg","","",43,null],[10,"read_tuple_struct","","",43,null],[10,"read_tuple_struct_arg","","",43,null],[10,"read_option","","",43,null],[10,"read_seq","","",43,null],[10,"read_seq_elt","","",43,null],[10,"read_map","","",43,null],[10,"read_map_elt_key","","",43,null],[10,"read_map_elt_val","","",43,null],[10,"error","","",43,null],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,null],[10,"emit_usize","","",44,null],[10,"emit_u64","","",44,null],[10,"emit_u32","","",44,null],[10,"emit_u16","","",44,null],[10,"emit_u8","","",44,null],[10,"emit_isize","","",44,null],[10,"emit_i64","","",44,null],[10,"emit_i32","","",44,null],[10,"emit_i16","","",44,null],[10,"emit_i8","","",44,null],[10,"emit_bool","","",44,null],[10,"emit_f64","","",44,null],[10,"emit_f32","","",44,null],[10,"emit_char","","",44,null],[10,"emit_str","","",44,null],[10,"emit_enum","","",44,null],[10,"emit_enum_variant","","",44,null],[10,"emit_enum_variant_arg","","",44,null],[10,"emit_enum_struct_variant","","",44,null],[10,"emit_enum_struct_variant_field","","",44,null],[10,"emit_struct","","",44,null],[10,"emit_struct_field","","",44,null],[10,"emit_tuple","","",44,null],[10,"emit_tuple_arg","","",44,null],[10,"emit_tuple_struct","","",44,null],[10,"emit_tuple_struct_arg","","",44,null],[10,"emit_option","","",44,null],[10,"emit_option_none","","",44,null],[10,"emit_option_some","","",44,null],[10,"emit_seq","","",44,null],[10,"emit_seq_elt","","",44,null],[10,"emit_map","","",44,null],[10,"emit_map_elt_key","","",44,null],[10,"emit_map_elt_val","","",44,null],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["pest"] = {"doc":"# pest. Elegant, efficient grammars","items":[[3,"StringInput","pest","A `struct` useful for matching in-memory `String`s.",null,null],[3,"Token","","A `struct` representing tokens generated by a parser.",null,null],[12,"rule","","matched [`Rule`](macro.impl_rdp!#rule)",0,null],[12,"start","","starting position in `Input`",0,null],[12,"end","","ending position in `Input`",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","","Creates a new `Token`.",0,{"inputs":[{"name":"rule"},{"name":"usize"},{"name":"usize"}],"output":{"name":"token"}}],[11,"new","","Creates a new `StringInput` from a `&amp;str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"stringinput"}}],[11,"len","","",1,null],[11,"is_empty","","",1,null],[11,"pos","","",1,null],[11,"set_pos","","",1,null],[11,"slice","","",1,null],[11,"line_col","","",1,null],[11,"match_string","","",1,null],[11,"match_insensitive","","",1,null],[11,"match_range","","",1,null],[0,"prelude","","A `mod` that contains `pest::Input`, `pest::Parser`, `pest::StringInput`, and `pest::Token`.",null,null],[3,"StringInput","pest::prelude","A `struct` useful for matching in-memory `String`s.",null,null],[3,"Token","","A `struct` representing tokens generated by a parser.",null,null],[12,"rule","","matched [`Rule`](macro.impl_rdp!#rule)",0,null],[12,"start","","starting position in `Input`",0,null],[12,"end","","ending position in `Input`",0,null],[8,"Input","","A `trait` that defines an input for a `Parser`.",null,null],[10,"len","","Returns length of an `Input`.",2,null],[10,"is_empty","","Returns whether an `Input` is empty.",2,null],[10,"pos","","Returns current position of an `Input`.",2,null],[10,"set_pos","","Set current position of an `Input`.",2,null],[10,"slice","","Slices an `Input`.",2,null],[10,"line_col","","Returns the line and column of a position for an `Input`.",2,null],[10,"match_string","","Matches `string` to an `Input`, returns whether it matched, and advances the position with\n`string.len()` in case it did.",2,null],[10,"match_insensitive","","Matches `string` to an `Input` case insensitively, returns whether it matched, and advances\nthe position with `string.len()` in case it did.",2,null],[10,"match_range","","Matches if an `Input`&#39;s current `char` is between `left` and `right`, and advances the\nposition with one `char` in case it did.",2,null],[8,"Parser","","A `trait` that defines a parser.",null,null],[16,"Rule","","",3,null],[16,"Token","","",3,null],[10,"input","","",3,null],[10,"input_mut","","",3,null],[10,"end","","Returns whether a `Parser` has reached its end.",3,null],[10,"eoi_matched","","Returns whether a `Parser` has matched end-of-input.",3,null],[10,"reset","","Reset a `Parser`.",3,null],[10,"queue","","Returns the queue of all matched `Token`s.",3,null],[10,"queue_mut","","Returns the mutable queue of all matched `Token`s.",3,null],[10,"queue_with_captures","","Returns the queue of all matched `(Token, value)`s.",3,null],[10,"queue_index","","Returns the current index within the queue. Used in `process!`.",3,null],[10,"inc_queue_index","","Increments the current index within the queue. Used in `process!`.",3,null],[10,"set_queue_index","","Set the current index within the queue. Used in `process!`.",3,null],[10,"skip","","Skips whitespace and comments.",3,null],[10,"is_atomic","","Returns whether a `Parser` is currently inside an atomic rule.",3,null],[10,"set_atomic","","Sets a `Parser` to atomic rule mode, barring comment &amp; white-space skipping.",3,null],[10,"track","","Keeps track of rule failures. It gets called when a `Rule` fails at `pos`.",3,null],[10,"tracked_len_pos","","Returns the length of the tracked `Rule`s.",3,null],[10,"expected","","Retuns a `Vec` of all expected `Rule`s at the deepest position where the parsing last\nstopped. It only returns leafs from the rule tree. Used for error reporting.",3,null],[10,"stack","","Returns the stack `Vec`.",3,null],[10,"stack_mut","","Returns the mutable stack `Vec`.",3,null],[8,"Input","pest","A `trait` that defines an input for a `Parser`.",null,null],[10,"len","","Returns length of an `Input`.",2,null],[10,"is_empty","","Returns whether an `Input` is empty.",2,null],[10,"pos","","Returns current position of an `Input`.",2,null],[10,"set_pos","","Set current position of an `Input`.",2,null],[10,"slice","","Slices an `Input`.",2,null],[10,"line_col","","Returns the line and column of a position for an `Input`.",2,null],[10,"match_string","","Matches `string` to an `Input`, returns whether it matched, and advances the position with\n`string.len()` in case it did.",2,null],[10,"match_insensitive","","Matches `string` to an `Input` case insensitively, returns whether it matched, and advances\nthe position with `string.len()` in case it did.",2,null],[10,"match_range","","Matches if an `Input`&#39;s current `char` is between `left` and `right`, and advances the\nposition with one `char` in case it did.",2,null],[8,"Parser","","A `trait` that defines a parser.",null,null],[16,"Rule","","",3,null],[16,"Token","","",3,null],[10,"input","","",3,null],[10,"input_mut","","",3,null],[10,"end","","Returns whether a `Parser` has reached its end.",3,null],[10,"eoi_matched","","Returns whether a `Parser` has matched end-of-input.",3,null],[10,"reset","","Reset a `Parser`.",3,null],[10,"queue","","Returns the queue of all matched `Token`s.",3,null],[10,"queue_mut","","Returns the mutable queue of all matched `Token`s.",3,null],[10,"queue_with_captures","","Returns the queue of all matched `(Token, value)`s.",3,null],[10,"queue_index","","Returns the current index within the queue. Used in `process!`.",3,null],[10,"inc_queue_index","","Increments the current index within the queue. Used in `process!`.",3,null],[10,"set_queue_index","","Set the current index within the queue. Used in `process!`.",3,null],[10,"skip","","Skips whitespace and comments.",3,null],[10,"is_atomic","","Returns whether a `Parser` is currently inside an atomic rule.",3,null],[10,"set_atomic","","Sets a `Parser` to atomic rule mode, barring comment &amp; white-space skipping.",3,null],[10,"track","","Keeps track of rule failures. It gets called when a `Rule` fails at `pos`.",3,null],[10,"tracked_len_pos","","Returns the length of the tracked `Rule`s.",3,null],[10,"expected","","Retuns a `Vec` of all expected `Rule`s at the deepest position where the parsing last\nstopped. It only returns leafs from the rule tree. Used for error reporting.",3,null],[10,"stack","","Returns the stack `Vec`.",3,null],[10,"stack_mut","","Returns the mutable stack `Vec`.",3,null],[14,"grammar!","","A `macro` that defines each rule as a method on a `Parser` which parses from the current\nposition. Rules are always defined between braces, with an optional symbol marking the type of\nrule defined.",null,null],[14,"process!","","A `macro` for pattern-matching queued `Token`s generated by a `Parser`. It generates a method\n`process` on `&amp;self` that processes the whole queue of `Token`s, reducing it to one single\nresult.",null,null],[14,"impl_rdp!","","A `macro` useful for implementing the `Parser` `trait` as a recursive descent parser. It only\naccepts `grammar!` and `process!` calls that get implemented on `self`.",null,null]],"paths":[[3,"Token"],[3,"StringInput"],[8,"Input"],[8,"Parser"]]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,{"inputs":[{"name":"void"}],"output":null}],[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","void::coreprovider","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"default","core::hash::sip","",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",105,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"write","","",105,null],[11,"finish","","",105,null],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"write_char","void::coreprovider::fmt","Writes a `char` into this writer, returning whether the write succeeded.",118,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",118,null],[11,"ne","void::coreprovider::cmp","This method tests for `!=`.",119,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",120,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",120,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",120,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",120,null],[11,"is","void::coreprovider","Returns true if the boxed type is the same as `T`",121,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",121,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",121,null],[11,"is","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",121,null],[11,"is","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",121,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",121,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",121,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",122,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",88,null],[11,"description","","",89,null],[11,"description","core::num","",4,null],[11,"description","","",3,null],[11,"description","core::num::dec2flt","",1,null],[11,"description","collections::string","",123,null],[11,"description","","",124,null],[11,"description","","",125,null],[11,"description","rustc_unicode::char","",126,null],[11,"description","alloc::boxed","",122,null],[11,"cause","","",122,null],[11,"description","core::fmt","",115,null],[11,"next","std::ascii","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"clone","std::thread::local","",128,null],[11,"eq","","",128,null],[11,"with","","Acquires a reference to the value in this TLS key.",129,null],[11,"state","","Query the current state of this key.",129,null],[11,"new","std::thread::local::elf","",130,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",130,null],[11,"new","std::thread::local::os","",131,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",131,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",132,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",132,null],[11,"stack_size","","Sets the size of the stack for the new thread.",132,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",132,null],[11,"clone","","",133,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",133,null],[11,"name","","Gets the thread&#39;s name.",133,null],[11,"fmt","","",133,null],[11,"thread","","Extracts a handle to the underlying thread",134,null],[11,"join","","Waits for the associated thread to finish.",134,null],[11,"clone","std::collections::hash::map","",135,null],[11,"new","","Creates an empty HashMap.",135,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",135,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",135,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",135,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",135,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",135,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",135,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",135,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",135,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",135,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",135,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",135,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",135,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",135,null],[11,"len","","Returns the number of elements in the map.",135,null],[11,"is_empty","","Returns true if the map contains no elements.",135,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",135,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",135,null],[11,"get","","Returns a reference to the value corresponding to the key.",135,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",135,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",135,null],[11,"insert","","Inserts a key-value pair into the map.",135,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",135,null],[11,"eq","","",135,null],[11,"fmt","","",135,null],[11,"default","","",135,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",135,null],[11,"clone","","",136,null],[11,"clone","","",137,null],[11,"clone","","",138,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"len","","",136,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"len","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"len","","",140,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"len","","",137,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"len","","",138,null],[11,"next","","",141,null],[11,"size_hint","","",141,null],[11,"len","","",141,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"len","","",142,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",143,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",143,null],[11,"key","","Returns a reference to this entry&#39;s key.",143,null],[11,"key","","Gets a reference to the key in the entry.",144,null],[11,"remove_pair","","Take the ownership of the key and value from the map.",144,null],[11,"get","","Gets a reference to the value in the entry.",144,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",144,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",144,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",144,null],[11,"remove","","Takes the value out of the entry, and returns it",144,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",145,null],[11,"into_key","","Take ownership of the key.",145,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",145,null],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",135,null],[11,"extend","","",135,null],[11,"clone","","",146,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",146,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",146,null],[11,"write","","",147,null],[11,"finish","","",147,null],[11,"default","","",146,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",148,null],[11,"new","","Creates an empty HashSet.",148,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",148,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",148,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",148,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",148,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",148,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",148,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",148,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",148,null],[11,"difference","","Visit the values representing the difference.",148,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",148,null],[11,"intersection","","Visit the values representing the intersection.",148,null],[11,"union","","Visit the values representing the union.",148,null],[11,"len","","Returns the number of elements in the set.",148,null],[11,"is_empty","","Returns true if the set contains no elements.",148,null],[11,"drain","","Clears the set, returning all elements in an iterator.",148,null],[11,"clear","","Clears the set, removing all values.",148,null],[11,"contains","","Returns `true` if the set contains a value.",148,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",148,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",148,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",148,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",148,null],[11,"insert","","Adds a value to the set.",148,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",148,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",148,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",148,null],[11,"eq","","",148,null],[11,"fmt","","",148,null],[11,"from_iter","","",148,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",148,null],[11,"extend","","",148,null],[11,"default","","",148,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",148,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"len","","",149,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"len","","",150,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"len","","",151,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"clone","","",154,null],[11,"next","","",154,null],[11,"size_hint","","",154,null],[11,"clone","","",155,null],[11,"next","","",155,null],[11,"size_hint","","",155,null],[11,"drop","collections::binary_heap","",156,null],[11,"deref","","",156,null],[11,"deref_mut","","",156,null],[11,"clone","","",157,null],[11,"clone_from","","",157,null],[11,"default","","",157,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",157,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",157,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",157,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",157,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",157,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",157,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",157,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",157,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",157,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",157,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",157,null],[11,"push","","Pushes an item onto the binary heap.",157,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",157,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",157,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",157,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",157,null],[11,"len","","Returns the length of the binary heap.",157,null],[11,"is_empty","","Checks if the binary heap is empty.",157,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",157,null],[11,"clear","","Drops all items from the binary heap.",157,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",157,null],[11,"clone","","",158,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next_back","","",158,null],[11,"clone","","",159,null],[11,"next","","",159,null],[11,"size_hint","","",159,null],[11,"next_back","","",159,null],[11,"next","","",160,null],[11,"size_hint","","",160,null],[11,"next_back","","",160,null],[11,"from","","",157,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",161,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",157,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",157,null],[11,"extend","","",157,null],[11,"extend","","",157,null],[11,"clone","collections::vec_deque","",162,null],[11,"drop","","",162,null],[11,"default","","",162,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",162,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",162,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",162,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",162,null],[11,"swap","","Swaps elements at indices `i` and `j`.",162,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",162,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",162,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",162,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",162,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",162,null],[11,"iter","","Returns a front-to-back iterator.",162,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",162,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",162,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",162,null],[11,"len","","Returns the number of elements in the `VecDeque`.",162,null],[11,"is_empty","","Returns true if the buffer contains no elements",162,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",162,null],[11,"clear","","Clears the buffer, removing all values.",162,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",162,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",162,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",162,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",162,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",162,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",162,null],[11,"push_front","","Inserts an element first in the sequence.",162,null],[11,"push_back","","Appends an element to the back of a buffer",162,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",162,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",162,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",162,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",162,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",162,null],[11,"split_off","","Splits the collection into two at the given index.",162,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",162,null],[11,"retain","","Retains only the elements specified by the predicate.",162,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",162,null],[11,"clone","","",163,null],[11,"next","","",163,null],[11,"size_hint","","",163,null],[11,"next_back","","",163,null],[11,"next","","",164,null],[11,"size_hint","","",164,null],[11,"next_back","","",164,null],[11,"clone","","",165,null],[11,"next","","",165,null],[11,"size_hint","","",165,null],[11,"next_back","","",165,null],[11,"drop","","",166,null],[11,"next","","",166,null],[11,"size_hint","","",166,null],[11,"next_back","","",166,null],[11,"eq","","",162,null],[11,"partial_cmp","","",162,null],[11,"cmp","","",162,null],[11,"hash","","",162,null],[11,"index","","",162,null],[11,"index_mut","","",162,null],[11,"from_iter","","",162,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",162,null],[11,"extend","","",162,null],[11,"extend","","",162,null],[11,"fmt","","",162,null],[11,"from","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",161,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"clone","collections::linked_list","",167,null],[11,"clone","","",168,null],[11,"default","","",169,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",169,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",169,null],[11,"iter","","Provides a forward iterator.",169,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",169,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",169,null],[11,"len","","Returns the length of the `LinkedList`.",169,null],[11,"clear","","Removes all elements from the `LinkedList`.",169,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",169,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",169,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",169,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",169,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",169,null],[11,"push_front","","Adds an element first in the list.",169,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",169,null],[11,"push_back","","Appends an element to the back of a list",169,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",169,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",169,null],[11,"front_place","","Returns a place for insertion at the front of the list.",169,null],[11,"back_place","","Returns a place for insertion at the back of the list.",169,null],[11,"drop","","",169,null],[11,"next","","",167,null],[11,"size_hint","","",167,null],[11,"next_back","","",167,null],[11,"next","","",170,null],[11,"size_hint","","",170,null],[11,"next_back","","",170,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",170,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",170,null],[11,"next","","",168,null],[11,"size_hint","","",168,null],[11,"next_back","","",168,null],[11,"from_iter","","",169,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",169,null],[11,"extend","","",169,null],[11,"extend","","",169,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"partial_cmp","","",169,null],[11,"cmp","","",169,null],[11,"clone","","",169,null],[11,"fmt","","",169,null],[11,"hash","","",169,null],[11,"make_place","","",171,null],[11,"pointer","","",171,null],[11,"finalize","","",171,null],[11,"make_place","","",172,null],[11,"pointer","","",172,null],[11,"finalize","","",172,null],[11,"next","std::env","",173,null],[11,"size_hint","","",173,null],[11,"next","","",174,null],[11,"size_hint","","",174,null],[11,"clone","","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"fmt","","",175,null],[11,"fmt","","",175,null],[11,"description","","",175,null],[11,"next","","",176,null],[11,"size_hint","","",176,null],[11,"fmt","","",177,null],[11,"fmt","","",177,null],[11,"description","","",177,null],[11,"next","","",178,null],[11,"size_hint","","",178,null],[11,"len","","",178,null],[11,"next","","",179,null],[11,"size_hint","","",179,null],[11,"len","","",179,null],[11,"clone","std::ffi::c_str","",180,null],[11,"hash","","",180,null],[11,"cmp","","",180,null],[11,"partial_cmp","","",180,null],[11,"lt","","",180,null],[11,"le","","",180,null],[11,"gt","","",180,null],[11,"ge","","",180,null],[11,"eq","","",180,null],[11,"ne","","",180,null],[11,"hash","","",181,null],[11,"fmt","","",182,null],[11,"eq","","",182,null],[11,"ne","","",182,null],[11,"clone","","",182,null],[11,"fmt","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",183,null],[11,"fmt","","",184,null],[11,"eq","","",184,null],[11,"ne","","",184,null],[11,"clone","","",184,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",180,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",180,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",180,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",180,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",180,null],[11,"into_bytes","","Returns the underlying byte buffer.",180,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",180,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",180,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",180,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",181,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",181,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",181,null],[11,"as_ptr","","Returns the inner pointer to this C string.",181,null],[11,"to_bytes","","Converts this C string to a byte slice.",181,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",181,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",181,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",181,null],[11,"deref","","",180,null],[11,"fmt","","",180,null],[11,"from","collections::vec","",161,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",181,null],[11,"default","","",180,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",180,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",182,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",182,null],[11,"description","","",182,null],[11,"fmt","","",182,null],[11,"from","std::io::error","",185,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",184,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",184,null],[11,"description","","",184,null],[11,"cause","","",184,null],[11,"fmt","","",184,null],[11,"eq","","",181,null],[11,"partial_cmp","","",181,null],[11,"cmp","","",181,null],[11,"to_owned","","",181,null],[11,"from","","",180,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",180,null],[11,"as_ref","","",181,null],[11,"as_ref","","",180,null],[11,"clone","std::ffi::os_str","",186,null],[11,"new","","Constructs a new empty `OsString`.",186,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",186,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",186,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",186,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",186,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",186,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",186,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",186,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",186,null],[11,"from","","",186,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",186,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",186,null],[11,"new","","Coerces into an `OsStr` slice.",187,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",187,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",187,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",187,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",187,null],[11,"len","","Returns the length of this `OsStr`.",187,null],[11,"deref","","",186,null],[11,"default","","",186,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",186,null],[11,"eq","","",186,null],[11,"eq","","",186,null],[11,"partial_cmp","","",186,null],[11,"lt","","",186,null],[11,"le","","",186,null],[11,"gt","","",186,null],[11,"ge","","",186,null],[11,"partial_cmp","","",186,null],[11,"cmp","","",186,null],[11,"hash","","",186,null],[11,"eq","","",187,null],[11,"eq","","",187,null],[11,"partial_cmp","","",187,null],[11,"lt","","",187,null],[11,"le","","",187,null],[11,"gt","","",187,null],[11,"ge","","",187,null],[11,"partial_cmp","","",187,null],[11,"cmp","","",187,null],[11,"eq","","",186,null],[11,"eq","","",187,null],[11,"partial_cmp","","",186,null],[11,"partial_cmp","","",187,null],[11,"eq","","",186,null],[11,"partial_cmp","","",186,null],[11,"eq","collections::borrow","",188,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","","",188,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"hash","","",187,null],[11,"fmt","","",187,null],[11,"borrow","","",186,null],[11,"to_owned","","",187,null],[11,"as_ref","","",187,null],[11,"as_ref","","",186,null],[11,"as_ref","collections::string","",189,null],[11,"clone","std::fs","",190,null],[11,"clone","","",191,null],[11,"fmt","","",192,null],[11,"eq","","",192,null],[11,"ne","","",192,null],[11,"clone","","",192,null],[11,"hash","","",193,null],[11,"eq","","",193,null],[11,"ne","","",193,null],[11,"clone","","",193,null],[11,"open","","Attempts to open a file in read-only mode.",194,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",194,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",194,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",194,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",194,null],[11,"metadata","","Queries metadata about the underlying file.",194,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",194,null],[11,"fmt","","",194,null],[11,"read","","",194,null],[11,"read_to_end","","",194,null],[11,"write","","",194,null],[11,"flush","","",194,null],[11,"seek","","",194,null],[11,"new","","Creates a blank new set of options ready for configuration.",191,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",191,null],[11,"write","","Sets the option for write access.",191,null],[11,"append","","Sets the option for the append mode.",191,null],[11,"truncate","","Sets the option for truncating a previous file.",191,null],[11,"create","","Sets the option for creating a new file.",191,null],[11,"create_new","","Sets the option to always create a new file.",191,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",191,null],[11,"file_type","","Returns the file type for this metadata.",190,null],[11,"is_dir","","Returns whether this metadata is for a directory.",190,null],[11,"is_file","","Returns whether this metadata is for a regular file.",190,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",190,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",190,null],[11,"modified","","Returns the last modification time listed in this metadata.",190,null],[11,"accessed","","Returns the last access time of this metadata.",190,null],[11,"created","","Returns the creation time listed in the this metadata.",190,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",192,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",192,null],[11,"is_dir","","Test whether this file type represents a directory.",193,null],[11,"is_file","","Test whether this file type represents a regular file.",193,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",193,null],[11,"next","","",195,null],[11,"path","","Returns the full path to the file that this entry represents.",196,null],[11,"metadata","","Return the metadata for the file that this entry points at.",196,null],[11,"file_type","","Return the file type for the file that this entry points at.",196,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",196,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",197,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",197,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",197,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",198,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",198,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",198,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",198,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",198,null],[11,"read","","",198,null],[11,"fill_buf","","",198,null],[11,"consume","","",198,null],[11,"fmt","","",198,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",198,null],[11,"fmt","","",199,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",200,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",200,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",200,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",200,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",200,null],[11,"write","","",200,null],[11,"flush","","",200,null],[11,"fmt","","",200,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",200,null],[11,"drop","","",200,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",199,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",199,null],[11,"from","std::io::error","",185,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",199,null],[11,"fmt","","",199,null],[11,"new","","Creates a new `LineWriter`.",201,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",201,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",201,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",201,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",201,null],[11,"write","","",201,null],[11,"flush","","",201,null],[11,"fmt","","",201,null],[11,"fmt","std::io::cursor","",202,null],[11,"clone","","",202,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",202,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",202,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",202,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",202,null],[11,"position","","Returns the current position of this cursor.",202,null],[11,"set_position","","Sets the position of this cursor.",202,null],[11,"seek","","",202,null],[11,"read","","",202,null],[11,"fill_buf","","",202,null],[11,"consume","","",202,null],[11,"write","","",202,null],[11,"flush","","",202,null],[11,"write","","",202,null],[11,"flush","","",202,null],[11,"write","","",202,null],[11,"flush","","",202,null],[11,"fmt","std::io::error","",185,null],[11,"fmt","","",203,null],[11,"clone","","",203,null],[11,"eq","","",203,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",185,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",185,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",185,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",185,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",185,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",185,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",185,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",185,null],[11,"fmt","","",185,null],[11,"description","","",185,null],[11,"cause","","",185,null],[11,"read","alloc::boxed","",122,null],[11,"read_to_end","","",122,null],[11,"read_to_string","","",122,null],[11,"read_exact","","",122,null],[11,"write","","",122,null],[11,"flush","","",122,null],[11,"write_all","","",122,null],[11,"write_fmt","","",122,null],[11,"seek","","",122,null],[11,"fill_buf","","",122,null],[11,"consume","","",122,null],[11,"read_until","","",122,null],[11,"read_line","","",122,null],[11,"write","collections::vec","",161,null],[11,"write_all","","",161,null],[11,"flush","","",161,null],[11,"read","std::io::util","",204,null],[11,"fill_buf","","",204,null],[11,"consume","","",204,null],[11,"read","","",205,null],[11,"write","","",206,null],[11,"flush","","",206,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",207,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",207,null],[11,"read","","",207,null],[11,"read_to_end","","",207,null],[11,"read_to_string","","",207,null],[11,"read_exact","","",207,null],[11,"read","","",208,null],[11,"read_to_end","","",208,null],[11,"fill_buf","","",208,null],[11,"consume","","",208,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",209,null],[11,"write","","",209,null],[11,"flush","","",209,null],[11,"write_all","","",209,null],[11,"write_fmt","","",209,null],[11,"write","","",210,null],[11,"flush","","",210,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",211,null],[11,"write","","",211,null],[11,"flush","","",211,null],[11,"write_all","","",211,null],[11,"write_fmt","","",211,null],[11,"write","","",212,null],[11,"flush","","",212,null],[11,"fmt","std::io","",213,null],[11,"clone","","",213,null],[11,"eq","","",213,null],[11,"ne","","",213,null],[11,"read","","",214,null],[11,"fill_buf","","",214,null],[11,"consume","","",214,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",215,null],[11,"read","","",215,null],[11,"fill_buf","","",215,null],[11,"consume","","",215,null],[11,"next","","",216,null],[11,"fmt","","",217,null],[11,"next","","",218,null],[11,"description","","",217,null],[11,"cause","","",217,null],[11,"fmt","","",217,null],[11,"next","","",219,null],[11,"next","","",220,null],[11,"cmp","std::net::ip","",221,null],[11,"partial_cmp","","",221,null],[11,"lt","","",221,null],[11,"le","","",221,null],[11,"gt","","",221,null],[11,"ge","","",221,null],[11,"hash","","",221,null],[11,"fmt","","",221,null],[11,"eq","","",221,null],[11,"ne","","",221,null],[11,"clone","","",221,null],[11,"fmt","","",222,null],[11,"hash","","",222,null],[11,"clone","","",222,null],[11,"eq","","",222,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",223,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",223,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (0.0.0.0).",223,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",223,null],[11,"is_private","","Returns true if this is a private address.",223,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",223,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",223,null],[11,"is_multicast","","Returns true if this is a multicast address (224.0.0.0/4).",223,null],[11,"is_broadcast","","Returns true if this is a broadcast address (255.255.255.255).",223,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",223,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",223,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",223,null],[11,"fmt","","",221,null],[11,"fmt","","",223,null],[11,"fmt","","",223,null],[11,"clone","","",223,null],[11,"eq","","",223,null],[11,"hash","","",223,null],[11,"partial_cmp","","",223,null],[11,"cmp","","",223,null],[11,"from","","",223,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",223,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",224,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",224,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (::).",224,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",224,null],[11,"is_global","","Returns true if the address appears to be globally routable.",224,null],[11,"is_unique_local","","Returns true if this is a unique local address (fc00::/7).",224,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",224,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address\n(fec0::/10).",224,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\n(2001:db8::/32).",224,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",224,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",224,null],[11,"is_multicast","","Returns true if this is a multicast address (ff00::/8).",224,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",224,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",224,null],[11,"fmt","","",224,null],[11,"fmt","","",224,null],[11,"clone","","",224,null],[11,"eq","","",224,null],[11,"hash","","",224,null],[11,"partial_cmp","","",224,null],[11,"cmp","","",224,null],[11,"from","","",224,null],[11,"fmt","std::net::addr","",225,null],[11,"hash","","",225,null],[11,"eq","","",225,null],[11,"ne","","",225,null],[11,"clone","","",225,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",225,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",225,null],[11,"set_ip","","Change the IP address associated with this socket address.",225,null],[11,"port","","Returns the port number associated with this socket address.",225,null],[11,"set_port","","Change the port number associated with this socket address.",225,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",226,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",226,null],[11,"set_ip","","Change the IP address associated with this socket address.",226,null],[11,"port","","Returns the port number associated with this socket address.",226,null],[11,"set_port","","Change the port number associated with this socket address.",226,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",227,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",227,null],[11,"set_ip","","Change the IP address associated with this socket address.",227,null],[11,"port","","Returns the port number associated with this socket address.",227,null],[11,"set_port","","Change the port number associated with this socket address.",227,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",227,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",227,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",227,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",227,null],[11,"fmt","","",225,null],[11,"fmt","","",226,null],[11,"fmt","","",226,null],[11,"fmt","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",226,null],[11,"clone","","",227,null],[11,"eq","","",226,null],[11,"eq","","",227,null],[11,"hash","","",226,null],[11,"hash","","",227,null],[11,"to_socket_addrs","","",225,null],[11,"to_socket_addrs","","",226,null],[11,"to_socket_addrs","","",227,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",228,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",228,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",228,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",228,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",228,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",228,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",228,null],[11,"read_timeout","","Returns the read timeout of this socket.",228,null],[11,"write_timeout","","Returns the write timeout of this socket.",228,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",228,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",228,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",228,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",228,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",228,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",228,null],[11,"read","","",228,null],[11,"read_to_end","","",228,null],[11,"write","","",228,null],[11,"flush","","",228,null],[11,"fmt","","",228,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",229,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",229,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",229,null],[11,"accept","","Accept a new incoming connection from this listener.",229,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",229,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",229,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",229,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",229,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",229,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",229,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",229,null],[11,"next","","",230,null],[11,"fmt","","",229,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",231,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",231,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",231,null],[11,"local_addr","","Returns the socket address that this socket was created from.",231,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",231,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",231,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",231,null],[11,"read_timeout","","Returns the read timeout of this socket.",231,null],[11,"write_timeout","","Returns the write timeout of this socket.",231,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",231,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",231,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",231,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",231,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",231,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",231,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",231,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",231,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",231,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",231,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",231,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",231,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",231,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",231,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",231,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",231,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",231,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",231,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",231,null],[11,"fmt","","",231,null],[11,"from_str","std::net::ip","",221,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",223,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",224,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",226,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",227,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",225,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",232,null],[11,"ne","","",232,null],[11,"clone","","",232,null],[11,"fmt","","",232,null],[11,"fmt","","",232,null],[11,"description","","",232,null],[11,"fmt","std::net","",233,null],[11,"eq","","",233,null],[11,"clone","","",233,null],[11,"next","","",234,null],[11,"clone","std::os::linux::raw::arch","",235,null],[11,"as_raw_stat","std::fs","",190,null],[11,"st_dev","","",190,null],[11,"st_ino","","",190,null],[11,"st_mode","","",190,null],[11,"st_nlink","","",190,null],[11,"st_uid","","",190,null],[11,"st_gid","","",190,null],[11,"st_rdev","","",190,null],[11,"st_size","","",190,null],[11,"st_atime","","",190,null],[11,"st_atime_nsec","","",190,null],[11,"st_mtime","","",190,null],[11,"st_mtime_nsec","","",190,null],[11,"st_ctime","","",190,null],[11,"st_ctime_nsec","","",190,null],[11,"st_blksize","","",190,null],[11,"st_blocks","","",190,null],[11,"as_raw_fd","","",194,null],[11,"from_raw_fd","","",194,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",194,null],[11,"as_raw_fd","std::net::tcp","",228,null],[11,"as_raw_fd","","",229,null],[11,"as_raw_fd","std::net::udp","",231,null],[11,"from_raw_fd","std::net::tcp","",228,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",229,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",231,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",228,null],[11,"into_raw_fd","","",229,null],[11,"into_raw_fd","std::net::udp","",231,null],[11,"from_vec","std::ffi::os_str","",186,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",186,null],[11,"from_bytes","","",187,null],[11,"as_bytes","","",187,null],[11,"mode","std::fs","",192,null],[11,"set_mode","","",192,null],[11,"from_mode","","",192,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",191,null],[11,"custom_flags","","",191,null],[11,"dev","","",190,null],[11,"ino","","",190,null],[11,"mode","","",190,null],[11,"nlink","","",190,null],[11,"uid","","",190,null],[11,"gid","","",190,null],[11,"rdev","","",190,null],[11,"size","","",190,null],[11,"atime","","",190,null],[11,"atime_nsec","","",190,null],[11,"mtime","","",190,null],[11,"mtime_nsec","","",190,null],[11,"ctime","","",190,null],[11,"ctime_nsec","","",190,null],[11,"blksize","","",190,null],[11,"blocks","","",190,null],[11,"is_block_device","","",193,null],[11,"is_char_device","","",193,null],[11,"is_fifo","","",193,null],[11,"is_socket","","",193,null],[11,"ino","","",196,null],[11,"mode","","",197,null],[11,"uid","std::process","",236,null],[11,"gid","","",236,null],[11,"before_exec","","",236,null],[11,"exec","","",236,null],[11,"from_raw","","",237,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",237,null],[11,"from_raw_fd","","",238,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",239,null],[11,"as_raw_fd","","",240,null],[11,"as_raw_fd","","",241,null],[11,"into_raw_fd","","",239,null],[11,"into_raw_fd","","",240,null],[11,"into_raw_fd","","",241,null],[11,"as_pthread_t","std::thread","",134,null],[11,"into_pthread_t","","",134,null],[11,"clone","std::sys::ext::net","",242,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",242,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",242,null],[11,"fmt","","",242,null],[11,"fmt","","",243,null],[11,"connect","","Connects to the socket named by `path`.",243,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",243,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",243,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",243,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",243,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",243,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",243,null],[11,"read_timeout","","Returns the read timeout of this socket.",243,null],[11,"write_timeout","","Returns the write timeout of this socket.",243,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",243,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",243,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",243,null],[11,"read","","",243,null],[11,"read_to_end","","",243,null],[11,"write","","",243,null],[11,"flush","","",243,null],[11,"as_raw_fd","","",243,null],[11,"from_raw_fd","","",243,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",243,null],[11,"fmt","","",244,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",244,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",244,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",244,null],[11,"local_addr","","Returns the local socket address of this listener.",244,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",244,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",244,null],[11,"incoming","","Returns an iterator over incoming connections.",244,null],[11,"as_raw_fd","","",244,null],[11,"from_raw_fd","","",244,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",244,null],[11,"fmt","","",245,null],[11,"next","","",245,null],[11,"size_hint","","",245,null],[11,"fmt","","",246,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",246,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",246,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",246,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",246,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",246,null],[11,"local_addr","","Returns the address of this socket.",246,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",246,null],[11,"recv_from","","Receives data from the socket.",246,null],[11,"recv","","Receives data from the socket.",246,null],[11,"send_to","","Sends data on the socket to the specified address.",246,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",246,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",246,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",246,null],[11,"read_timeout","","Returns the read timeout of this socket.",246,null],[11,"write_timeout","","Returns the write timeout of this socket.",246,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",246,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",246,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",246,null],[11,"as_raw_fd","","",246,null],[11,"from_raw_fd","","",246,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",246,null],[11,"deref","std::panic","",247,null],[11,"deref_mut","","",247,null],[11,"call_once","","",247,null],[11,"eq","std::path","",248,null],[11,"ne","","",248,null],[11,"cmp","","",248,null],[11,"partial_cmp","","",248,null],[11,"lt","","",248,null],[11,"le","","",248,null],[11,"gt","","",248,null],[11,"ge","","",248,null],[11,"hash","","",248,null],[11,"fmt","","",248,null],[11,"clone","","",248,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",248,null],[11,"fmt","","",249,null],[11,"clone","","",249,null],[11,"kind","","The parsed prefix data.",249,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",249,null],[11,"eq","","",249,null],[11,"partial_cmp","","",249,null],[11,"cmp","","",249,null],[11,"hash","","",249,null],[11,"fmt","","",250,null],[11,"hash","","",250,null],[11,"cmp","","",250,null],[11,"partial_cmp","","",250,null],[11,"lt","","",250,null],[11,"le","","",250,null],[11,"gt","","",250,null],[11,"ge","","",250,null],[11,"eq","","",250,null],[11,"ne","","",250,null],[11,"clone","","",250,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",250,null],[11,"as_ref","","",250,null],[11,"clone","","",251,null],[11,"clone","","",252,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",251,null],[11,"as_ref","","",251,null],[11,"as_ref","","",251,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",252,null],[11,"as_ref","","",252,null],[11,"as_ref","","",252,null],[11,"next","","",252,null],[11,"next_back","","",252,null],[11,"next","","",251,null],[11,"next_back","","",251,null],[11,"eq","","",251,null],[11,"partial_cmp","","",251,null],[11,"cmp","","",251,null],[11,"clone","","",253,null],[11,"new","","Allocates an empty `PathBuf`.",253,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",253,null],[11,"push","","Extends `self` with `path`.",253,null],[11,"pop","","Truncate `self` to `self.parent()`.",253,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",253,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",253,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",253,null],[11,"from","","",253,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",253,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",253,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",253,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",253,null],[11,"fmt","","",253,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",254,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",254,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",254,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",254,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",254,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",254,null],[11,"is_relative","","A path is *relative* if it is not absolute.",254,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",254,null],[11,"parent","","The path without its final component, if any.",254,null],[11,"file_name","","The final component of the path, if it is a normal file.",254,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",254,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",254,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",254,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",254,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",254,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",254,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",254,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",254,null],[11,"components","","Produce an iterator over the components of the path.",254,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",254,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",254,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",254,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",254,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",254,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",254,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",254,null],[11,"exists","","Returns whether the path points at an existing entity.",254,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",254,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",254,null],[11,"deref","","",253,null],[11,"borrow","","",253,null],[11,"from","collections::borrow","",188,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",254,null],[11,"eq","","",253,null],[11,"hash","","",253,null],[11,"partial_cmp","","",253,null],[11,"cmp","","",253,null],[11,"as_ref","","",253,null],[11,"into","","",253,null],[11,"eq","","",255,null],[11,"ne","","",255,null],[11,"clone","","",255,null],[11,"fmt","","",255,null],[11,"as_ref","","",254,null],[11,"fmt","","",254,null],[11,"fmt","","",256,null],[11,"fmt","","",256,null],[11,"eq","","",254,null],[11,"hash","","",254,null],[11,"partial_cmp","","",254,null],[11,"cmp","","",254,null],[11,"as_ref","","",254,null],[11,"as_ref","std::ffi::os_str","",187,null],[11,"as_ref","collections::borrow","",188,null],[11,"as_ref","std::ffi::os_str","",186,null],[11,"as_ref","collections::string","",189,null],[11,"as_ref","std::path","",253,null],[11,"eq","","",253,null],[11,"eq","","",254,null],[11,"partial_cmp","","",253,null],[11,"partial_cmp","","",254,null],[11,"eq","","",253,null],[11,"partial_cmp","","",253,null],[11,"eq","collections::borrow","",188,null],[11,"eq","std::path","",254,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::path","",254,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","","",188,null],[11,"eq","std::path","",253,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::path","",253,null],[11,"eq","","",253,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","std::path","",253,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","std::path","",253,null],[11,"partial_cmp","","",253,null],[11,"eq","","",253,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","std::path","",253,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"eq","std::path","",253,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","std::path","",253,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"eq","std::path","",254,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","std::path","",254,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","std::path","",254,null],[11,"partial_cmp","","",254,null],[11,"eq","","",254,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","std::path","",254,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"eq","std::path","",254,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","std::path","",254,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"eq","","",187,null],[11,"partial_cmp","","",187,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","","",186,null],[11,"eq","collections::borrow","",188,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","","",188,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"fmt","std::path","",255,null],[11,"description","","",255,null],[11,"write","std::process","",239,null],[11,"flush","","",239,null],[11,"read","","",240,null],[11,"read_to_end","","",240,null],[11,"read","","",241,null],[11,"read_to_end","","",241,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",236,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",236,null],[11,"args","","Add multiple arguments to pass to the program.",236,null],[11,"env","","Inserts or updates an environment variable mapping.",236,null],[11,"env_remove","","Removes an environment variable mapping.",236,null],[11,"env_clear","","Clears the entire environment map for the child process.",236,null],[11,"current_dir","","Sets the working directory for the child process.",236,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",236,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",236,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",236,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",236,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",236,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",236,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",236,null],[11,"clone","","",257,null],[11,"eq","","",257,null],[11,"ne","","",257,null],[11,"fmt","","",257,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",238,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",238,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",238,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",237,null],[11,"clone","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",237,null],[11,"code","","Returns the exit code of the process, if any.",237,null],[11,"fmt","","",237,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",258,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",258,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",258,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",258,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",259,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",259,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",259,null],[11,"id","","Retrieves the id of this handle.",260,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",260,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",260,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",260,null],[11,"drop","","",259,null],[11,"drop","","",260,null],[11,"fmt","","",259,null],[11,"fmt","","",260,null],[11,"clone","std::sync::mpsc","",261,null],[11,"eq","","",261,null],[11,"ne","","",261,null],[11,"fmt","","",262,null],[11,"clone","","",262,null],[11,"eq","","",262,null],[11,"fmt","","",263,null],[11,"clone","","",263,null],[11,"eq","","",263,null],[11,"fmt","","",264,null],[11,"clone","","",264,null],[11,"eq","","",264,null],[11,"clone","","",265,null],[11,"eq","","",265,null],[11,"ne","","",265,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",266,null],[11,"clone","","",266,null],[11,"drop","","",266,null],[11,"fmt","","",266,null],[11,"send","","Sends a value on this synchronous channel.",267,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",267,null],[11,"clone","","",267,null],[11,"drop","","",267,null],[11,"fmt","","",267,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",268,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",268,null],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up, or if it waits more than `timeout`.",268,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",268,null],[11,"next","","",269,null],[11,"next","","",270,null],[11,"into_iter","","",268,null],[11,"drop","","",268,null],[11,"fmt","","",268,null],[11,"fmt","","",261,null],[11,"fmt","","",261,null],[11,"description","","",261,null],[11,"cause","","",261,null],[11,"fmt","","",265,null],[11,"fmt","","",265,null],[11,"description","","",265,null],[11,"cause","","",265,null],[11,"fmt","","",262,null],[11,"description","","",262,null],[11,"cause","","",262,null],[11,"fmt","","",263,null],[11,"description","","",263,null],[11,"cause","","",263,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",271,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",271,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",272,null],[11,"clone","std::sync::condvar","",273,null],[11,"eq","","",273,null],[11,"ne","","",273,null],[11,"fmt","","",273,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",273,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",274,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",274,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",274,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",274,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",274,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",274,null],[11,"default","","",274,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",274,null],[11,"new","","Creates a new condition variable",275,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",275,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",275,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",275,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",275,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",275,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",275,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",276,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",276,null],[11,"try_lock","","Attempts to acquire this lock.",276,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",276,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",276,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",276,null],[11,"drop","","",276,null],[11,"default","","",276,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",276,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",277,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",277,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",277,null],[11,"destroy","","Deallocates resources associated with this static mutex.",277,null],[11,"deref","","",278,null],[11,"deref_mut","","",278,null],[11,"drop","","",278,null],[11,"new","std::sync::once","Creates a new `Once` value.",279,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",279,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",279,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",280,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",281,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",281,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",281,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",281,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",281,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",281,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",281,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",281,null],[11,"drop","","",281,null],[11,"fmt","","",281,null],[11,"default","","",281,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",282,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",282,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",282,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",282,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",282,null],[11,"destroy","","Deallocates all resources associated with this static lock.",282,null],[11,"deref","","",283,null],[11,"deref","","",284,null],[11,"deref_mut","","",284,null],[11,"drop","","",283,null],[11,"drop","","",284,null],[11,"hash","std::time::duration","",285,null],[11,"fmt","","",285,null],[11,"cmp","","",285,null],[11,"partial_cmp","","",285,null],[11,"lt","","",285,null],[11,"le","","",285,null],[11,"gt","","",285,null],[11,"ge","","",285,null],[11,"eq","","",285,null],[11,"ne","","",285,null],[11,"clone","","",285,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",285,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",285,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",285,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",285,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",285,null],[11,"add","","",285,null],[11,"add_assign","","",285,null],[11,"sub","","",285,null],[11,"sub_assign","","",285,null],[11,"mul","","",285,null],[11,"mul_assign","","",285,null],[11,"div","","",285,null],[11,"div_assign","","",285,null],[11,"cmp","std::time","",286,null],[11,"partial_cmp","","",286,null],[11,"lt","","",286,null],[11,"le","","",286,null],[11,"gt","","",286,null],[11,"ge","","",286,null],[11,"eq","","",286,null],[11,"ne","","",286,null],[11,"clone","","",286,null],[11,"cmp","","",287,null],[11,"partial_cmp","","",287,null],[11,"lt","","",287,null],[11,"le","","",287,null],[11,"gt","","",287,null],[11,"ge","","",287,null],[11,"eq","","",287,null],[11,"ne","","",287,null],[11,"clone","","",287,null],[11,"fmt","","",288,null],[11,"clone","","",288,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",286,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",286,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",286,null],[11,"add","","",286,null],[11,"add_assign","","",286,null],[11,"sub","","",286,null],[11,"sub_assign","","",286,null],[11,"sub","","",286,null],[11,"fmt","","",286,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",287,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",287,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",287,null],[11,"add","","",287,null],[11,"add_assign","","",287,null],[11,"sub","","",287,null],[11,"sub_assign","","",287,null],[11,"fmt","","",287,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",288,null],[11,"description","","",288,null],[11,"fmt","","",288,null],[11,"fmt","std::sys_common::poison","",289,null],[11,"fmt","","",289,null],[11,"description","","",289,null],[11,"new","","Creates a `PoisonError`.",289,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",289,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",289,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",289,null],[11,"from","","",290,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",290,null],[11,"fmt","","",290,null],[11,"description","","",290,null],[11,"cause","","",290,null],[11,"clone","libc::unix","",291,null],[11,"clone","","",292,null],[11,"clone","","",293,null],[11,"clone","","",294,null],[11,"clone","","",295,null],[11,"clone","","",296,null],[11,"clone","","",297,null],[11,"clone","","",298,null],[11,"clone","","",299,null],[11,"clone","","",300,null],[11,"clone","","",301,null],[11,"clone","","",302,null],[11,"clone","","",303,null],[11,"clone","libc::unix::notbsd","",304,null],[11,"clone","","",305,null],[11,"clone","","",306,null],[11,"clone","","",307,null],[11,"clone","","",308,null],[11,"clone","","",309,null],[11,"clone","","",310,null],[11,"clone","","",311,null],[11,"clone","","",312,null],[11,"clone","","",313,null],[11,"clone","","",314,null],[11,"clone","","",315,null],[11,"clone","","",316,null],[11,"clone","","",317,null],[11,"clone","","",318,null],[11,"clone","libc::unix::notbsd::linux","",319,null],[11,"clone","","",320,null],[11,"clone","","",321,null],[11,"clone","","",322,null],[11,"clone","","",323,null],[11,"clone","","",324,null],[11,"clone","","",325,null],[11,"clone","","",326,null],[11,"clone","","",327,null],[11,"clone","","",328,null],[11,"clone","","",329,null],[11,"clone","","",330,null],[11,"clone","","",331,null],[11,"clone","","",332,null],[11,"clone","","",333,null],[11,"clone","","",334,null],[11,"clone","libc::unix::notbsd::linux::other","",335,null],[11,"clone","","",336,null],[11,"clone","","",337,null],[11,"clone","","",338,null],[11,"clone","","",339,null],[11,"clone","","",340,null],[11,"clone","","",341,null],[11,"clone","","",342,null],[11,"clone","","",343,null],[11,"clone","","",344,null],[11,"clone","","",345,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",346,null],[11,"clone","","",347,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",348,null],[11,"clone","","",349,null],[11,"clone","","",350,null],[11,"clone","","",351,null],[11,"clone","","",352,null],[11,"clone","","",353,null],[11,"clone","","",354,null],[11,"clone","","",355,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",356,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",356,null],[11,"file","","Returns the name of the source file from which the panic originated.",357,null],[11,"line","","Returns the line number from which the panic originated.",357,null],[11,"next","rustc_unicode::char","",358,null],[11,"next","","",359,null],[11,"clone","","",360,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"fmt","","",126,null],[11,"next","","",360,null],[11,"size_hint","","",360,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",126,null],[11,"fmt","","",126,null],[11,"borrow","collections::borrow","",188,null],[11,"clone","","",188,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",188,null],[11,"into_owned","","Extracts the owned data.",188,null],[11,"deref","","",188,null],[11,"cmp","","",188,null],[11,"eq","","",188,null],[11,"partial_cmp","","",188,null],[11,"fmt","","",188,null],[11,"fmt","","",188,null],[11,"default","","",188,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",188,null],[11,"as_ref","","",188,null],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",361,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",361,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",361,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Creates a new `Weak&lt;T&gt;` reference from this value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",361,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",361,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",361,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",361,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",361,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",361,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",361,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",361,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"hash","","",361,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"from","","",361,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",362,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",362,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",362,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",362,null],[11,"fmt","","",362,null],[11,"default","","",362,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",361,null],[11,"as_ref","","",361,null],[11,"clone","alloc::boxed","",363,null],[11,"pointer","","",364,null],[11,"make_place","","",364,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",364,null],[11,"finalize","","",122,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",363,null],[11,"drop","","",364,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",122,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",122,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",122,null],[11,"default","","",122,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",122,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",122,null],[11,"clone","","",122,null],[11,"eq","","",122,null],[11,"ne","","",122,null],[11,"partial_cmp","","",122,null],[11,"lt","","",122,null],[11,"le","","",122,null],[11,"ge","","",122,null],[11,"gt","","",122,null],[11,"cmp","","",122,null],[11,"hash","","",122,null],[11,"from","","",122,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",122,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"deref","","",122,null],[11,"deref_mut","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"call_once","","",122,null],[11,"call_once","","",122,null],[11,"clone","","",122,null],[11,"borrow","","",122,null],[11,"borrow_mut","","",122,null],[11,"as_ref","","",122,null],[11,"as_mut","","",122,null],[11,"clone","collections::str","",365,null],[11,"next","","",365,null],[11,"size_hint","","",365,null],[11,"borrow","collections::string","",189,null],[11,"borrow","collections::vec","",161,null],[11,"borrow_mut","","",161,null],[11,"cmp","collections::string","",189,null],[11,"partial_cmp","","",189,null],[11,"lt","","",189,null],[11,"le","","",189,null],[11,"gt","","",189,null],[11,"ge","","",189,null],[11,"fmt","","",123,null],[11,"fmt","","",124,null],[11,"new","","Creates a new empty `String`.",189,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",189,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",189,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",189,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",189,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",189,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",189,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",189,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",189,null],[11,"as_str","","Extracts a string slice containing the entire string.",189,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",189,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",189,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",189,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",189,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",189,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",189,null],[11,"push","","Appends the given `char` to the end of this `String`.",189,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",189,null],[11,"truncate","","Shortens this `String` to the specified length.",189,null],[11,"pop","","Removes the last character from the string buffer and returns it.",189,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",189,null],[11,"insert","","Inserts a character into this `String` at a byte position.",189,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",189,null],[11,"len","","Returns the length of this `String`, in bytes.",189,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",189,null],[11,"clear","","Truncates this `String`, removing all contents.",189,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",189,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",189,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",123,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",123,null],[11,"fmt","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",189,null],[11,"clone_from","","",189,null],[11,"from_iter","","",189,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",189,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",189,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"eq","collections::borrow","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","collections::string","",189,null],[11,"ne","","",189,null],[11,"default","","",189,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",189,null],[11,"fmt","","",189,null],[11,"hash","","",189,null],[11,"add","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"from_str","","",189,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",125,null],[11,"fmt","","",125,null],[11,"fmt","","",125,null],[11,"eq","","",125,null],[11,"as_ref","","",189,null],[11,"as_ref","","",189,null],[11,"from","","",189,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",188,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",188,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",189,null],[11,"write_str","","",189,null],[11,"write_char","","",189,null],[11,"drop","","",366,null],[11,"next","","",366,null],[11,"size_hint","","",366,null],[11,"next_back","","",366,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",161,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",161,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",161,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",161,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",161,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",161,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",161,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",161,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",161,null],[11,"as_slice","","Extracts a slice containing the entire vector.",161,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",161,null],[11,"set_len","","Sets the length of a vector.",161,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",161,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",161,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",161,null],[11,"retain","","Retains only the elements specified by the predicate.",161,null],[11,"push","","Appends an element to the back of a collection.",161,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",161,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",161,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",161,null],[11,"clear","","Clears the vector, removing all values.",161,null],[11,"len","","Returns the number of elements in the vector.",161,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",161,null],[11,"split_off","","Splits the collection into two at the given index.",161,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",161,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",161,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",161,null],[11,"clone","","",161,null],[11,"clone_from","","",161,null],[11,"hash","","",161,null],[11,"index","","",161,null],[11,"index_mut","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"deref","","",161,null],[11,"deref_mut","","",161,null],[11,"from_iter","","",161,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",161,null],[11,"extend","","",161,null],[11,"extend","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","collections::borrow","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","collections::vec","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"partial_cmp","","",161,null],[11,"cmp","","",161,null],[11,"drop","","",161,null],[11,"default","","",161,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",161,null],[11,"as_ref","","",161,null],[11,"as_mut","","",161,null],[11,"as_ref","","",161,null],[11,"as_mut","","",161,null],[11,"from","","",161,null],[11,"from","","",161,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",188,null],[11,"from","","",188,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",188,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",367,null],[11,"size_hint","","",367,null],[11,"count","","",367,null],[11,"next_back","","",367,null],[11,"clone","","",367,null],[11,"drop","","",367,null],[11,"next","","",368,null],[11,"size_hint","","",368,null],[11,"next_back","","",368,null],[11,"drop","","",368,null],[11,"cause","void::coreprovider::error","The lower-level cause of this error, if any.",121,null],[8,"ResultVoidExt","void","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",369,null],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",370,null],[11,"clone","","",371,null],[11,"fmt","","",371,null],[11,"fmt","","",371,null],[11,"eq","","",371,null],[11,"partial_cmp","","",371,null],[11,"description","","",371,null],[11,"cause","","",371,null],[11,"void_unwrap","core::result","Get the value out of an always-ok Result.",68,null],[11,"void_unwrap_err","","Get the error out of an always-err Result.",68,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Write"],[8,"PartialEq"],[8,"PartialOrd"],[8,"Error"],[3,"Box"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"DefaultHasher"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"Rc"],[3,"Weak"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"EncodeUtf16"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",16,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",16,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",16,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",16,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",16,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",16,null],[10,"swap_bytes","","Reverses the byte order of the integer.",16,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",16,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",16,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["protobuf"] = {"doc":"","items":[[3,"UnknownFields","protobuf","",null,null],[12,"fields","","",0,null],[3,"UnknownFieldsIter","","",null,null],[3,"UnknownValues","","",null,null],[12,"fixed32","","",1,null],[12,"fixed64","","",1,null],[12,"varint","","",1,null],[12,"length_delimited","","",1,null],[3,"UnknownValuesIter","","",null,null],[4,"UnknownValue","","",null,null],[13,"Fixed32","","",2,null],[13,"Fixed64","","",2,null],[13,"Varint","","",2,null],[13,"LengthDelimited","","",2,null],[4,"UnknownValueRef","","",null,null],[13,"Fixed32","","",3,null],[13,"Fixed64","","",3,null],[13,"Varint","","",3,null],[13,"LengthDelimited","","",3,null],[0,"descriptor","","",null,null],[3,"FileDescriptorSet","protobuf::descriptor","",null,null],[3,"FileDescriptorProto","","",null,null],[3,"DescriptorProto","","",null,null],[3,"DescriptorProto_ExtensionRange","","",null,null],[3,"DescriptorProto_ReservedRange","","",null,null],[3,"FieldDescriptorProto","","",null,null],[3,"OneofDescriptorProto","","",null,null],[3,"EnumDescriptorProto","","",null,null],[3,"EnumValueDescriptorProto","","",null,null],[3,"ServiceDescriptorProto","","",null,null],[3,"MethodDescriptorProto","","",null,null],[3,"FileOptions","","",null,null],[3,"MessageOptions","","",null,null],[3,"FieldOptions","","",null,null],[3,"OneofOptions","","",null,null],[3,"EnumOptions","","",null,null],[3,"EnumValueOptions","","",null,null],[3,"ServiceOptions","","",null,null],[3,"MethodOptions","","",null,null],[3,"UninterpretedOption","","",null,null],[3,"UninterpretedOption_NamePart","","",null,null],[3,"SourceCodeInfo","","",null,null],[3,"SourceCodeInfo_Location","","",null,null],[3,"GeneratedCodeInfo","","",null,null],[3,"GeneratedCodeInfo_Annotation","","",null,null],[4,"FieldDescriptorProto_Type","","",null,null],[13,"TYPE_DOUBLE","","",4,null],[13,"TYPE_FLOAT","","",4,null],[13,"TYPE_INT64","","",4,null],[13,"TYPE_UINT64","","",4,null],[13,"TYPE_INT32","","",4,null],[13,"TYPE_FIXED64","","",4,null],[13,"TYPE_FIXED32","","",4,null],[13,"TYPE_BOOL","","",4,null],[13,"TYPE_STRING","","",4,null],[13,"TYPE_GROUP","","",4,null],[13,"TYPE_MESSAGE","","",4,null],[13,"TYPE_BYTES","","",4,null],[13,"TYPE_UINT32","","",4,null],[13,"TYPE_ENUM","","",4,null],[13,"TYPE_SFIXED32","","",4,null],[13,"TYPE_SFIXED64","","",4,null],[13,"TYPE_SINT32","","",4,null],[13,"TYPE_SINT64","","",4,null],[4,"FieldDescriptorProto_Label","","",null,null],[13,"LABEL_OPTIONAL","","",5,null],[13,"LABEL_REQUIRED","","",5,null],[13,"LABEL_REPEATED","","",5,null],[4,"FileOptions_OptimizeMode","","",null,null],[13,"SPEED","","",6,null],[13,"CODE_SIZE","","",6,null],[13,"LITE_RUNTIME","","",6,null],[4,"FieldOptions_CType","","",null,null],[13,"STRING","","",7,null],[13,"CORD","","",7,null],[13,"STRING_PIECE","","",7,null],[4,"FieldOptions_JSType","","",null,null],[13,"JS_NORMAL","","",8,null],[13,"JS_STRING","","",8,null],[13,"JS_NUMBER","","",8,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"default_instance","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"clear_file","","",9,null],[11,"set_file","","",9,null],[11,"mut_file","","",9,null],[11,"take_file","","",9,null],[11,"get_file","","",9,null],[11,"is_initialized","","",9,null],[11,"merge_from","","",9,null],[11,"compute_size","","",9,null],[11,"write_to_with_cached_sizes","","",9,null],[11,"get_cached_size","","",9,null],[11,"get_unknown_fields","","",9,null],[11,"mut_unknown_fields","","",9,null],[11,"type_id","","",9,null],[11,"as_any","","",9,null],[11,"descriptor","","",9,null],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"descriptor_static","","",9,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",9,null],[11,"eq","","",9,null],[11,"fmt","","",9,null],[11,"default","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"default_instance","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clear_name","","",10,null],[11,"has_name","","",10,null],[11,"set_name","","",10,null],[11,"mut_name","","",10,null],[11,"take_name","","",10,null],[11,"get_name","","",10,null],[11,"clear_package","","",10,null],[11,"has_package","","",10,null],[11,"set_package","","",10,null],[11,"mut_package","","",10,null],[11,"take_package","","",10,null],[11,"get_package","","",10,null],[11,"clear_dependency","","",10,null],[11,"set_dependency","","",10,null],[11,"mut_dependency","","",10,null],[11,"take_dependency","","",10,null],[11,"get_dependency","","",10,null],[11,"clear_public_dependency","","",10,null],[11,"set_public_dependency","","",10,null],[11,"mut_public_dependency","","",10,null],[11,"take_public_dependency","","",10,null],[11,"get_public_dependency","","",10,null],[11,"clear_weak_dependency","","",10,null],[11,"set_weak_dependency","","",10,null],[11,"mut_weak_dependency","","",10,null],[11,"take_weak_dependency","","",10,null],[11,"get_weak_dependency","","",10,null],[11,"clear_message_type","","",10,null],[11,"set_message_type","","",10,null],[11,"mut_message_type","","",10,null],[11,"take_message_type","","",10,null],[11,"get_message_type","","",10,null],[11,"clear_enum_type","","",10,null],[11,"set_enum_type","","",10,null],[11,"mut_enum_type","","",10,null],[11,"take_enum_type","","",10,null],[11,"get_enum_type","","",10,null],[11,"clear_service","","",10,null],[11,"set_service","","",10,null],[11,"mut_service","","",10,null],[11,"take_service","","",10,null],[11,"get_service","","",10,null],[11,"clear_extension","","",10,null],[11,"set_extension","","",10,null],[11,"mut_extension","","",10,null],[11,"take_extension","","",10,null],[11,"get_extension","","",10,null],[11,"clear_options","","",10,null],[11,"has_options","","",10,null],[11,"set_options","","",10,null],[11,"mut_options","","",10,null],[11,"take_options","","",10,null],[11,"get_options","","",10,null],[11,"clear_source_code_info","","",10,null],[11,"has_source_code_info","","",10,null],[11,"set_source_code_info","","",10,null],[11,"mut_source_code_info","","",10,null],[11,"take_source_code_info","","",10,null],[11,"get_source_code_info","","",10,null],[11,"clear_syntax","","",10,null],[11,"has_syntax","","",10,null],[11,"set_syntax","","",10,null],[11,"mut_syntax","","",10,null],[11,"take_syntax","","",10,null],[11,"get_syntax","","",10,null],[11,"is_initialized","","",10,null],[11,"merge_from","","",10,null],[11,"compute_size","","",10,null],[11,"write_to_with_cached_sizes","","",10,null],[11,"get_cached_size","","",10,null],[11,"get_unknown_fields","","",10,null],[11,"mut_unknown_fields","","",10,null],[11,"type_id","","",10,null],[11,"as_any","","",10,null],[11,"descriptor","","",10,null],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"descriptor_static","","",10,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",10,null],[11,"default","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"clone","","",11,null],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"default_instance","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"clear_name","","",11,null],[11,"has_name","","",11,null],[11,"set_name","","",11,null],[11,"mut_name","","",11,null],[11,"take_name","","",11,null],[11,"get_name","","",11,null],[11,"clear_field","","",11,null],[11,"set_field","","",11,null],[11,"mut_field","","",11,null],[11,"take_field","","",11,null],[11,"get_field","","",11,null],[11,"clear_extension","","",11,null],[11,"set_extension","","",11,null],[11,"mut_extension","","",11,null],[11,"take_extension","","",11,null],[11,"get_extension","","",11,null],[11,"clear_nested_type","","",11,null],[11,"set_nested_type","","",11,null],[11,"mut_nested_type","","",11,null],[11,"take_nested_type","","",11,null],[11,"get_nested_type","","",11,null],[11,"clear_enum_type","","",11,null],[11,"set_enum_type","","",11,null],[11,"mut_enum_type","","",11,null],[11,"take_enum_type","","",11,null],[11,"get_enum_type","","",11,null],[11,"clear_extension_range","","",11,null],[11,"set_extension_range","","",11,null],[11,"mut_extension_range","","",11,null],[11,"take_extension_range","","",11,null],[11,"get_extension_range","","",11,null],[11,"clear_oneof_decl","","",11,null],[11,"set_oneof_decl","","",11,null],[11,"mut_oneof_decl","","",11,null],[11,"take_oneof_decl","","",11,null],[11,"get_oneof_decl","","",11,null],[11,"clear_options","","",11,null],[11,"has_options","","",11,null],[11,"set_options","","",11,null],[11,"mut_options","","",11,null],[11,"take_options","","",11,null],[11,"get_options","","",11,null],[11,"clear_reserved_range","","",11,null],[11,"set_reserved_range","","",11,null],[11,"mut_reserved_range","","",11,null],[11,"take_reserved_range","","",11,null],[11,"get_reserved_range","","",11,null],[11,"clear_reserved_name","","",11,null],[11,"set_reserved_name","","",11,null],[11,"mut_reserved_name","","",11,null],[11,"take_reserved_name","","",11,null],[11,"get_reserved_name","","",11,null],[11,"is_initialized","","",11,null],[11,"merge_from","","",11,null],[11,"compute_size","","",11,null],[11,"write_to_with_cached_sizes","","",11,null],[11,"get_cached_size","","",11,null],[11,"get_unknown_fields","","",11,null],[11,"mut_unknown_fields","","",11,null],[11,"type_id","","",11,null],[11,"as_any","","",11,null],[11,"descriptor","","",11,null],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"descriptor_static","","",11,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",11,null],[11,"eq","","",11,null],[11,"fmt","","",11,null],[11,"default","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"clone","","",12,null],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"default_instance","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"clear_start","","",12,null],[11,"has_start","","",12,null],[11,"set_start","","",12,null],[11,"get_start","","",12,null],[11,"clear_end","","",12,null],[11,"has_end","","",12,null],[11,"set_end","","",12,null],[11,"get_end","","",12,null],[11,"is_initialized","","",12,null],[11,"merge_from","","",12,null],[11,"compute_size","","",12,null],[11,"write_to_with_cached_sizes","","",12,null],[11,"get_cached_size","","",12,null],[11,"get_unknown_fields","","",12,null],[11,"mut_unknown_fields","","",12,null],[11,"type_id","","",12,null],[11,"as_any","","",12,null],[11,"descriptor","","",12,null],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"descriptor_static","","",12,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",12,null],[11,"eq","","",12,null],[11,"fmt","","",12,null],[11,"default","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"clone","","",13,null],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"default_instance","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"clear_start","","",13,null],[11,"has_start","","",13,null],[11,"set_start","","",13,null],[11,"get_start","","",13,null],[11,"clear_end","","",13,null],[11,"has_end","","",13,null],[11,"set_end","","",13,null],[11,"get_end","","",13,null],[11,"is_initialized","","",13,null],[11,"merge_from","","",13,null],[11,"compute_size","","",13,null],[11,"write_to_with_cached_sizes","","",13,null],[11,"get_cached_size","","",13,null],[11,"get_unknown_fields","","",13,null],[11,"mut_unknown_fields","","",13,null],[11,"type_id","","",13,null],[11,"as_any","","",13,null],[11,"descriptor","","",13,null],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"descriptor_static","","",13,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",13,null],[11,"eq","","",13,null],[11,"fmt","","",13,null],[11,"default","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"clone","","",14,null],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"default_instance","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"clear_name","","",14,null],[11,"has_name","","",14,null],[11,"set_name","","",14,null],[11,"mut_name","","",14,null],[11,"take_name","","",14,null],[11,"get_name","","",14,null],[11,"clear_number","","",14,null],[11,"has_number","","",14,null],[11,"set_number","","",14,null],[11,"get_number","","",14,null],[11,"clear_label","","",14,null],[11,"has_label","","",14,null],[11,"set_label","","",14,null],[11,"get_label","","",14,null],[11,"clear_field_type","","",14,null],[11,"has_field_type","","",14,null],[11,"set_field_type","","",14,null],[11,"get_field_type","","",14,null],[11,"clear_type_name","","",14,null],[11,"has_type_name","","",14,null],[11,"set_type_name","","",14,null],[11,"mut_type_name","","",14,null],[11,"take_type_name","","",14,null],[11,"get_type_name","","",14,null],[11,"clear_extendee","","",14,null],[11,"has_extendee","","",14,null],[11,"set_extendee","","",14,null],[11,"mut_extendee","","",14,null],[11,"take_extendee","","",14,null],[11,"get_extendee","","",14,null],[11,"clear_default_value","","",14,null],[11,"has_default_value","","",14,null],[11,"set_default_value","","",14,null],[11,"mut_default_value","","",14,null],[11,"take_default_value","","",14,null],[11,"get_default_value","","",14,null],[11,"clear_oneof_index","","",14,null],[11,"has_oneof_index","","",14,null],[11,"set_oneof_index","","",14,null],[11,"get_oneof_index","","",14,null],[11,"clear_json_name","","",14,null],[11,"has_json_name","","",14,null],[11,"set_json_name","","",14,null],[11,"mut_json_name","","",14,null],[11,"take_json_name","","",14,null],[11,"get_json_name","","",14,null],[11,"clear_options","","",14,null],[11,"has_options","","",14,null],[11,"set_options","","",14,null],[11,"mut_options","","",14,null],[11,"take_options","","",14,null],[11,"get_options","","",14,null],[11,"is_initialized","","",14,null],[11,"merge_from","","",14,null],[11,"compute_size","","",14,null],[11,"write_to_with_cached_sizes","","",14,null],[11,"get_cached_size","","",14,null],[11,"get_unknown_fields","","",14,null],[11,"mut_unknown_fields","","",14,null],[11,"type_id","","",14,null],[11,"as_any","","",14,null],[11,"descriptor","","",14,null],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"descriptor_static","","",14,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",14,null],[11,"eq","","",14,null],[11,"fmt","","",14,null],[11,"hash","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"clone","","",4,null],[11,"value","","",4,null],[11,"from_i32","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",4,null],[11,"enum_descriptor_static","","",4,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"clone","","",5,null],[11,"value","","",5,null],[11,"from_i32","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",5,null],[11,"enum_descriptor_static","","",5,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"clone","","",15,null],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"default_instance","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"clear_name","","",15,null],[11,"has_name","","",15,null],[11,"set_name","","",15,null],[11,"mut_name","","",15,null],[11,"take_name","","",15,null],[11,"get_name","","",15,null],[11,"clear_options","","",15,null],[11,"has_options","","",15,null],[11,"set_options","","",15,null],[11,"mut_options","","",15,null],[11,"take_options","","",15,null],[11,"get_options","","",15,null],[11,"is_initialized","","",15,null],[11,"merge_from","","",15,null],[11,"compute_size","","",15,null],[11,"write_to_with_cached_sizes","","",15,null],[11,"get_cached_size","","",15,null],[11,"get_unknown_fields","","",15,null],[11,"mut_unknown_fields","","",15,null],[11,"type_id","","",15,null],[11,"as_any","","",15,null],[11,"descriptor","","",15,null],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"descriptor_static","","",15,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",15,null],[11,"eq","","",15,null],[11,"fmt","","",15,null],[11,"default","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"clone","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"default_instance","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"clear_name","","",16,null],[11,"has_name","","",16,null],[11,"set_name","","",16,null],[11,"mut_name","","",16,null],[11,"take_name","","",16,null],[11,"get_name","","",16,null],[11,"clear_value","","",16,null],[11,"set_value","","",16,null],[11,"mut_value","","",16,null],[11,"take_value","","",16,null],[11,"get_value","","",16,null],[11,"clear_options","","",16,null],[11,"has_options","","",16,null],[11,"set_options","","",16,null],[11,"mut_options","","",16,null],[11,"take_options","","",16,null],[11,"get_options","","",16,null],[11,"is_initialized","","",16,null],[11,"merge_from","","",16,null],[11,"compute_size","","",16,null],[11,"write_to_with_cached_sizes","","",16,null],[11,"get_cached_size","","",16,null],[11,"get_unknown_fields","","",16,null],[11,"mut_unknown_fields","","",16,null],[11,"type_id","","",16,null],[11,"as_any","","",16,null],[11,"descriptor","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"descriptor_static","","",16,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",16,null],[11,"eq","","",16,null],[11,"fmt","","",16,null],[11,"default","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"clone","","",17,null],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"default_instance","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"clear_name","","",17,null],[11,"has_name","","",17,null],[11,"set_name","","",17,null],[11,"mut_name","","",17,null],[11,"take_name","","",17,null],[11,"get_name","","",17,null],[11,"clear_number","","",17,null],[11,"has_number","","",17,null],[11,"set_number","","",17,null],[11,"get_number","","",17,null],[11,"clear_options","","",17,null],[11,"has_options","","",17,null],[11,"set_options","","",17,null],[11,"mut_options","","",17,null],[11,"take_options","","",17,null],[11,"get_options","","",17,null],[11,"is_initialized","","",17,null],[11,"merge_from","","",17,null],[11,"compute_size","","",17,null],[11,"write_to_with_cached_sizes","","",17,null],[11,"get_cached_size","","",17,null],[11,"get_unknown_fields","","",17,null],[11,"mut_unknown_fields","","",17,null],[11,"type_id","","",17,null],[11,"as_any","","",17,null],[11,"descriptor","","",17,null],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"descriptor_static","","",17,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",17,null],[11,"eq","","",17,null],[11,"fmt","","",17,null],[11,"default","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"clone","","",18,null],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"default_instance","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"clear_name","","",18,null],[11,"has_name","","",18,null],[11,"set_name","","",18,null],[11,"mut_name","","",18,null],[11,"take_name","","",18,null],[11,"get_name","","",18,null],[11,"clear_method","","",18,null],[11,"set_method","","",18,null],[11,"mut_method","","",18,null],[11,"take_method","","",18,null],[11,"get_method","","",18,null],[11,"clear_options","","",18,null],[11,"has_options","","",18,null],[11,"set_options","","",18,null],[11,"mut_options","","",18,null],[11,"take_options","","",18,null],[11,"get_options","","",18,null],[11,"is_initialized","","",18,null],[11,"merge_from","","",18,null],[11,"compute_size","","",18,null],[11,"write_to_with_cached_sizes","","",18,null],[11,"get_cached_size","","",18,null],[11,"get_unknown_fields","","",18,null],[11,"mut_unknown_fields","","",18,null],[11,"type_id","","",18,null],[11,"as_any","","",18,null],[11,"descriptor","","",18,null],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"descriptor_static","","",18,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",18,null],[11,"eq","","",18,null],[11,"fmt","","",18,null],[11,"default","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"clone","","",19,null],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"default_instance","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"clear_name","","",19,null],[11,"has_name","","",19,null],[11,"set_name","","",19,null],[11,"mut_name","","",19,null],[11,"take_name","","",19,null],[11,"get_name","","",19,null],[11,"clear_input_type","","",19,null],[11,"has_input_type","","",19,null],[11,"set_input_type","","",19,null],[11,"mut_input_type","","",19,null],[11,"take_input_type","","",19,null],[11,"get_input_type","","",19,null],[11,"clear_output_type","","",19,null],[11,"has_output_type","","",19,null],[11,"set_output_type","","",19,null],[11,"mut_output_type","","",19,null],[11,"take_output_type","","",19,null],[11,"get_output_type","","",19,null],[11,"clear_options","","",19,null],[11,"has_options","","",19,null],[11,"set_options","","",19,null],[11,"mut_options","","",19,null],[11,"take_options","","",19,null],[11,"get_options","","",19,null],[11,"clear_client_streaming","","",19,null],[11,"has_client_streaming","","",19,null],[11,"set_client_streaming","","",19,null],[11,"get_client_streaming","","",19,null],[11,"clear_server_streaming","","",19,null],[11,"has_server_streaming","","",19,null],[11,"set_server_streaming","","",19,null],[11,"get_server_streaming","","",19,null],[11,"is_initialized","","",19,null],[11,"merge_from","","",19,null],[11,"compute_size","","",19,null],[11,"write_to_with_cached_sizes","","",19,null],[11,"get_cached_size","","",19,null],[11,"get_unknown_fields","","",19,null],[11,"mut_unknown_fields","","",19,null],[11,"type_id","","",19,null],[11,"as_any","","",19,null],[11,"descriptor","","",19,null],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"descriptor_static","","",19,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",19,null],[11,"eq","","",19,null],[11,"fmt","","",19,null],[11,"default","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"clone","","",20,null],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"default_instance","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"clear_java_package","","",20,null],[11,"has_java_package","","",20,null],[11,"set_java_package","","",20,null],[11,"mut_java_package","","",20,null],[11,"take_java_package","","",20,null],[11,"get_java_package","","",20,null],[11,"clear_java_outer_classname","","",20,null],[11,"has_java_outer_classname","","",20,null],[11,"set_java_outer_classname","","",20,null],[11,"mut_java_outer_classname","","",20,null],[11,"take_java_outer_classname","","",20,null],[11,"get_java_outer_classname","","",20,null],[11,"clear_java_multiple_files","","",20,null],[11,"has_java_multiple_files","","",20,null],[11,"set_java_multiple_files","","",20,null],[11,"get_java_multiple_files","","",20,null],[11,"clear_java_generate_equals_and_hash","","",20,null],[11,"has_java_generate_equals_and_hash","","",20,null],[11,"set_java_generate_equals_and_hash","","",20,null],[11,"get_java_generate_equals_and_hash","","",20,null],[11,"clear_java_string_check_utf8","","",20,null],[11,"has_java_string_check_utf8","","",20,null],[11,"set_java_string_check_utf8","","",20,null],[11,"get_java_string_check_utf8","","",20,null],[11,"clear_optimize_for","","",20,null],[11,"has_optimize_for","","",20,null],[11,"set_optimize_for","","",20,null],[11,"get_optimize_for","","",20,null],[11,"clear_go_package","","",20,null],[11,"has_go_package","","",20,null],[11,"set_go_package","","",20,null],[11,"mut_go_package","","",20,null],[11,"take_go_package","","",20,null],[11,"get_go_package","","",20,null],[11,"clear_cc_generic_services","","",20,null],[11,"has_cc_generic_services","","",20,null],[11,"set_cc_generic_services","","",20,null],[11,"get_cc_generic_services","","",20,null],[11,"clear_java_generic_services","","",20,null],[11,"has_java_generic_services","","",20,null],[11,"set_java_generic_services","","",20,null],[11,"get_java_generic_services","","",20,null],[11,"clear_py_generic_services","","",20,null],[11,"has_py_generic_services","","",20,null],[11,"set_py_generic_services","","",20,null],[11,"get_py_generic_services","","",20,null],[11,"clear_deprecated","","",20,null],[11,"has_deprecated","","",20,null],[11,"set_deprecated","","",20,null],[11,"get_deprecated","","",20,null],[11,"clear_cc_enable_arenas","","",20,null],[11,"has_cc_enable_arenas","","",20,null],[11,"set_cc_enable_arenas","","",20,null],[11,"get_cc_enable_arenas","","",20,null],[11,"clear_objc_class_prefix","","",20,null],[11,"has_objc_class_prefix","","",20,null],[11,"set_objc_class_prefix","","",20,null],[11,"mut_objc_class_prefix","","",20,null],[11,"take_objc_class_prefix","","",20,null],[11,"get_objc_class_prefix","","",20,null],[11,"clear_csharp_namespace","","",20,null],[11,"has_csharp_namespace","","",20,null],[11,"set_csharp_namespace","","",20,null],[11,"mut_csharp_namespace","","",20,null],[11,"take_csharp_namespace","","",20,null],[11,"get_csharp_namespace","","",20,null],[11,"clear_uninterpreted_option","","",20,null],[11,"set_uninterpreted_option","","",20,null],[11,"mut_uninterpreted_option","","",20,null],[11,"take_uninterpreted_option","","",20,null],[11,"get_uninterpreted_option","","",20,null],[11,"is_initialized","","",20,null],[11,"merge_from","","",20,null],[11,"compute_size","","",20,null],[11,"write_to_with_cached_sizes","","",20,null],[11,"get_cached_size","","",20,null],[11,"get_unknown_fields","","",20,null],[11,"mut_unknown_fields","","",20,null],[11,"type_id","","",20,null],[11,"as_any","","",20,null],[11,"descriptor","","",20,null],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"descriptor_static","","",20,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",20,null],[11,"eq","","",20,null],[11,"fmt","","",20,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"clone","","",6,null],[11,"value","","",6,null],[11,"from_i32","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",6,null],[11,"enum_descriptor_static","","",6,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"clone","","",21,null],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"default_instance","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"clear_message_set_wire_format","","",21,null],[11,"has_message_set_wire_format","","",21,null],[11,"set_message_set_wire_format","","",21,null],[11,"get_message_set_wire_format","","",21,null],[11,"clear_no_standard_descriptor_accessor","","",21,null],[11,"has_no_standard_descriptor_accessor","","",21,null],[11,"set_no_standard_descriptor_accessor","","",21,null],[11,"get_no_standard_descriptor_accessor","","",21,null],[11,"clear_deprecated","","",21,null],[11,"has_deprecated","","",21,null],[11,"set_deprecated","","",21,null],[11,"get_deprecated","","",21,null],[11,"clear_map_entry","","",21,null],[11,"has_map_entry","","",21,null],[11,"set_map_entry","","",21,null],[11,"get_map_entry","","",21,null],[11,"clear_uninterpreted_option","","",21,null],[11,"set_uninterpreted_option","","",21,null],[11,"mut_uninterpreted_option","","",21,null],[11,"take_uninterpreted_option","","",21,null],[11,"get_uninterpreted_option","","",21,null],[11,"is_initialized","","",21,null],[11,"merge_from","","",21,null],[11,"compute_size","","",21,null],[11,"write_to_with_cached_sizes","","",21,null],[11,"get_cached_size","","",21,null],[11,"get_unknown_fields","","",21,null],[11,"mut_unknown_fields","","",21,null],[11,"type_id","","",21,null],[11,"as_any","","",21,null],[11,"descriptor","","",21,null],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"descriptor_static","","",21,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",21,null],[11,"eq","","",21,null],[11,"fmt","","",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"clone","","",22,null],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"default_instance","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"clear_ctype","","",22,null],[11,"has_ctype","","",22,null],[11,"set_ctype","","",22,null],[11,"get_ctype","","",22,null],[11,"clear_packed","","",22,null],[11,"has_packed","","",22,null],[11,"set_packed","","",22,null],[11,"get_packed","","",22,null],[11,"clear_jstype","","",22,null],[11,"has_jstype","","",22,null],[11,"set_jstype","","",22,null],[11,"get_jstype","","",22,null],[11,"clear_lazy","","",22,null],[11,"has_lazy","","",22,null],[11,"set_lazy","","",22,null],[11,"get_lazy","","",22,null],[11,"clear_deprecated","","",22,null],[11,"has_deprecated","","",22,null],[11,"set_deprecated","","",22,null],[11,"get_deprecated","","",22,null],[11,"clear_weak","","",22,null],[11,"has_weak","","",22,null],[11,"set_weak","","",22,null],[11,"get_weak","","",22,null],[11,"clear_uninterpreted_option","","",22,null],[11,"set_uninterpreted_option","","",22,null],[11,"mut_uninterpreted_option","","",22,null],[11,"take_uninterpreted_option","","",22,null],[11,"get_uninterpreted_option","","",22,null],[11,"is_initialized","","",22,null],[11,"merge_from","","",22,null],[11,"compute_size","","",22,null],[11,"write_to_with_cached_sizes","","",22,null],[11,"get_cached_size","","",22,null],[11,"get_unknown_fields","","",22,null],[11,"mut_unknown_fields","","",22,null],[11,"type_id","","",22,null],[11,"as_any","","",22,null],[11,"descriptor","","",22,null],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"descriptor_static","","",22,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",22,null],[11,"eq","","",22,null],[11,"fmt","","",22,null],[11,"hash","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"clone","","",7,null],[11,"value","","",7,null],[11,"from_i32","","",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",7,null],[11,"enum_descriptor_static","","",7,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"hash","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"clone","","",8,null],[11,"value","","",8,null],[11,"from_i32","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",8,null],[11,"enum_descriptor_static","","",8,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"clone","","",23,null],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"default_instance","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"clear_uninterpreted_option","","",23,null],[11,"set_uninterpreted_option","","",23,null],[11,"mut_uninterpreted_option","","",23,null],[11,"take_uninterpreted_option","","",23,null],[11,"get_uninterpreted_option","","",23,null],[11,"is_initialized","","",23,null],[11,"merge_from","","",23,null],[11,"compute_size","","",23,null],[11,"write_to_with_cached_sizes","","",23,null],[11,"get_cached_size","","",23,null],[11,"get_unknown_fields","","",23,null],[11,"mut_unknown_fields","","",23,null],[11,"type_id","","",23,null],[11,"as_any","","",23,null],[11,"descriptor","","",23,null],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"descriptor_static","","",23,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",23,null],[11,"eq","","",23,null],[11,"fmt","","",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"clone","","",24,null],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"default_instance","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"clear_allow_alias","","",24,null],[11,"has_allow_alias","","",24,null],[11,"set_allow_alias","","",24,null],[11,"get_allow_alias","","",24,null],[11,"clear_deprecated","","",24,null],[11,"has_deprecated","","",24,null],[11,"set_deprecated","","",24,null],[11,"get_deprecated","","",24,null],[11,"clear_uninterpreted_option","","",24,null],[11,"set_uninterpreted_option","","",24,null],[11,"mut_uninterpreted_option","","",24,null],[11,"take_uninterpreted_option","","",24,null],[11,"get_uninterpreted_option","","",24,null],[11,"is_initialized","","",24,null],[11,"merge_from","","",24,null],[11,"compute_size","","",24,null],[11,"write_to_with_cached_sizes","","",24,null],[11,"get_cached_size","","",24,null],[11,"get_unknown_fields","","",24,null],[11,"mut_unknown_fields","","",24,null],[11,"type_id","","",24,null],[11,"as_any","","",24,null],[11,"descriptor","","",24,null],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"descriptor_static","","",24,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",24,null],[11,"eq","","",24,null],[11,"fmt","","",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"clone","","",25,null],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"default_instance","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"clear_deprecated","","",25,null],[11,"has_deprecated","","",25,null],[11,"set_deprecated","","",25,null],[11,"get_deprecated","","",25,null],[11,"clear_uninterpreted_option","","",25,null],[11,"set_uninterpreted_option","","",25,null],[11,"mut_uninterpreted_option","","",25,null],[11,"take_uninterpreted_option","","",25,null],[11,"get_uninterpreted_option","","",25,null],[11,"is_initialized","","",25,null],[11,"merge_from","","",25,null],[11,"compute_size","","",25,null],[11,"write_to_with_cached_sizes","","",25,null],[11,"get_cached_size","","",25,null],[11,"get_unknown_fields","","",25,null],[11,"mut_unknown_fields","","",25,null],[11,"type_id","","",25,null],[11,"as_any","","",25,null],[11,"descriptor","","",25,null],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"descriptor_static","","",25,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",25,null],[11,"eq","","",25,null],[11,"fmt","","",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"clone","","",26,null],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"default_instance","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"clear_deprecated","","",26,null],[11,"has_deprecated","","",26,null],[11,"set_deprecated","","",26,null],[11,"get_deprecated","","",26,null],[11,"clear_uninterpreted_option","","",26,null],[11,"set_uninterpreted_option","","",26,null],[11,"mut_uninterpreted_option","","",26,null],[11,"take_uninterpreted_option","","",26,null],[11,"get_uninterpreted_option","","",26,null],[11,"is_initialized","","",26,null],[11,"merge_from","","",26,null],[11,"compute_size","","",26,null],[11,"write_to_with_cached_sizes","","",26,null],[11,"get_cached_size","","",26,null],[11,"get_unknown_fields","","",26,null],[11,"mut_unknown_fields","","",26,null],[11,"type_id","","",26,null],[11,"as_any","","",26,null],[11,"descriptor","","",26,null],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"descriptor_static","","",26,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",26,null],[11,"eq","","",26,null],[11,"fmt","","",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"clone","","",27,null],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"default_instance","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"clear_deprecated","","",27,null],[11,"has_deprecated","","",27,null],[11,"set_deprecated","","",27,null],[11,"get_deprecated","","",27,null],[11,"clear_uninterpreted_option","","",27,null],[11,"set_uninterpreted_option","","",27,null],[11,"mut_uninterpreted_option","","",27,null],[11,"take_uninterpreted_option","","",27,null],[11,"get_uninterpreted_option","","",27,null],[11,"is_initialized","","",27,null],[11,"merge_from","","",27,null],[11,"compute_size","","",27,null],[11,"write_to_with_cached_sizes","","",27,null],[11,"get_cached_size","","",27,null],[11,"get_unknown_fields","","",27,null],[11,"mut_unknown_fields","","",27,null],[11,"type_id","","",27,null],[11,"as_any","","",27,null],[11,"descriptor","","",27,null],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"descriptor_static","","",27,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",27,null],[11,"eq","","",27,null],[11,"fmt","","",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"clone","","",28,null],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"default_instance","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"clear_name","","",28,null],[11,"set_name","","",28,null],[11,"mut_name","","",28,null],[11,"take_name","","",28,null],[11,"get_name","","",28,null],[11,"clear_identifier_value","","",28,null],[11,"has_identifier_value","","",28,null],[11,"set_identifier_value","","",28,null],[11,"mut_identifier_value","","",28,null],[11,"take_identifier_value","","",28,null],[11,"get_identifier_value","","",28,null],[11,"clear_positive_int_value","","",28,null],[11,"has_positive_int_value","","",28,null],[11,"set_positive_int_value","","",28,null],[11,"get_positive_int_value","","",28,null],[11,"clear_negative_int_value","","",28,null],[11,"has_negative_int_value","","",28,null],[11,"set_negative_int_value","","",28,null],[11,"get_negative_int_value","","",28,null],[11,"clear_double_value","","",28,null],[11,"has_double_value","","",28,null],[11,"set_double_value","","",28,null],[11,"get_double_value","","",28,null],[11,"clear_string_value","","",28,null],[11,"has_string_value","","",28,null],[11,"set_string_value","","",28,null],[11,"mut_string_value","","",28,null],[11,"take_string_value","","",28,null],[11,"get_string_value","","",28,null],[11,"clear_aggregate_value","","",28,null],[11,"has_aggregate_value","","",28,null],[11,"set_aggregate_value","","",28,null],[11,"mut_aggregate_value","","",28,null],[11,"take_aggregate_value","","",28,null],[11,"get_aggregate_value","","",28,null],[11,"is_initialized","","",28,null],[11,"merge_from","","",28,null],[11,"compute_size","","",28,null],[11,"write_to_with_cached_sizes","","",28,null],[11,"get_cached_size","","",28,null],[11,"get_unknown_fields","","",28,null],[11,"mut_unknown_fields","","",28,null],[11,"type_id","","",28,null],[11,"as_any","","",28,null],[11,"descriptor","","",28,null],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"descriptor_static","","",28,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",28,null],[11,"eq","","",28,null],[11,"fmt","","",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"clone","","",29,null],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"default_instance","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"clear_name_part","","",29,null],[11,"has_name_part","","",29,null],[11,"set_name_part","","",29,null],[11,"mut_name_part","","",29,null],[11,"take_name_part","","",29,null],[11,"get_name_part","","",29,null],[11,"clear_is_extension","","",29,null],[11,"has_is_extension","","",29,null],[11,"set_is_extension","","",29,null],[11,"get_is_extension","","",29,null],[11,"is_initialized","","",29,null],[11,"merge_from","","",29,null],[11,"compute_size","","",29,null],[11,"write_to_with_cached_sizes","","",29,null],[11,"get_cached_size","","",29,null],[11,"get_unknown_fields","","",29,null],[11,"mut_unknown_fields","","",29,null],[11,"type_id","","",29,null],[11,"as_any","","",29,null],[11,"descriptor","","",29,null],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"descriptor_static","","",29,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"clone","","",30,null],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"default_instance","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"clear_location","","",30,null],[11,"set_location","","",30,null],[11,"mut_location","","",30,null],[11,"take_location","","",30,null],[11,"get_location","","",30,null],[11,"is_initialized","","",30,null],[11,"merge_from","","",30,null],[11,"compute_size","","",30,null],[11,"write_to_with_cached_sizes","","",30,null],[11,"get_cached_size","","",30,null],[11,"get_unknown_fields","","",30,null],[11,"mut_unknown_fields","","",30,null],[11,"type_id","","",30,null],[11,"as_any","","",30,null],[11,"descriptor","","",30,null],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"descriptor_static","","",30,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",30,null],[11,"eq","","",30,null],[11,"fmt","","",30,null],[11,"default","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"clone","","",31,null],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"default_instance","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"clear_path","","",31,null],[11,"set_path","","",31,null],[11,"mut_path","","",31,null],[11,"take_path","","",31,null],[11,"get_path","","",31,null],[11,"clear_span","","",31,null],[11,"set_span","","",31,null],[11,"mut_span","","",31,null],[11,"take_span","","",31,null],[11,"get_span","","",31,null],[11,"clear_leading_comments","","",31,null],[11,"has_leading_comments","","",31,null],[11,"set_leading_comments","","",31,null],[11,"mut_leading_comments","","",31,null],[11,"take_leading_comments","","",31,null],[11,"get_leading_comments","","",31,null],[11,"clear_trailing_comments","","",31,null],[11,"has_trailing_comments","","",31,null],[11,"set_trailing_comments","","",31,null],[11,"mut_trailing_comments","","",31,null],[11,"take_trailing_comments","","",31,null],[11,"get_trailing_comments","","",31,null],[11,"clear_leading_detached_comments","","",31,null],[11,"set_leading_detached_comments","","",31,null],[11,"mut_leading_detached_comments","","",31,null],[11,"take_leading_detached_comments","","",31,null],[11,"get_leading_detached_comments","","",31,null],[11,"is_initialized","","",31,null],[11,"merge_from","","",31,null],[11,"compute_size","","",31,null],[11,"write_to_with_cached_sizes","","",31,null],[11,"get_cached_size","","",31,null],[11,"get_unknown_fields","","",31,null],[11,"mut_unknown_fields","","",31,null],[11,"type_id","","",31,null],[11,"as_any","","",31,null],[11,"descriptor","","",31,null],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"descriptor_static","","",31,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",31,null],[11,"eq","","",31,null],[11,"fmt","","",31,null],[11,"default","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"clone","","",32,null],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"default_instance","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"clear_annotation","","",32,null],[11,"set_annotation","","",32,null],[11,"mut_annotation","","",32,null],[11,"take_annotation","","",32,null],[11,"get_annotation","","",32,null],[11,"is_initialized","","",32,null],[11,"merge_from","","",32,null],[11,"compute_size","","",32,null],[11,"write_to_with_cached_sizes","","",32,null],[11,"get_cached_size","","",32,null],[11,"get_unknown_fields","","",32,null],[11,"mut_unknown_fields","","",32,null],[11,"type_id","","",32,null],[11,"as_any","","",32,null],[11,"descriptor","","",32,null],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"descriptor_static","","",32,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",32,null],[11,"eq","","",32,null],[11,"fmt","","",32,null],[11,"default","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"clone","","",33,null],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"default_instance","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"clear_path","","",33,null],[11,"set_path","","",33,null],[11,"mut_path","","",33,null],[11,"take_path","","",33,null],[11,"get_path","","",33,null],[11,"clear_source_file","","",33,null],[11,"has_source_file","","",33,null],[11,"set_source_file","","",33,null],[11,"mut_source_file","","",33,null],[11,"take_source_file","","",33,null],[11,"get_source_file","","",33,null],[11,"clear_begin","","",33,null],[11,"has_begin","","",33,null],[11,"set_begin","","",33,null],[11,"get_begin","","",33,null],[11,"clear_end","","",33,null],[11,"has_end","","",33,null],[11,"set_end","","",33,null],[11,"get_end","","",33,null],[11,"is_initialized","","",33,null],[11,"merge_from","","",33,null],[11,"compute_size","","",33,null],[11,"write_to_with_cached_sizes","","",33,null],[11,"get_cached_size","","",33,null],[11,"get_unknown_fields","","",33,null],[11,"mut_unknown_fields","","",33,null],[11,"type_id","","",33,null],[11,"as_any","","",33,null],[11,"descriptor","","",33,null],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"descriptor_static","","",33,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",33,null],[11,"eq","","",33,null],[11,"fmt","","",33,null],[0,"plugin","protobuf","",null,null],[3,"CodeGeneratorRequest","protobuf::plugin","",null,null],[3,"CodeGeneratorResponse","","",null,null],[3,"CodeGeneratorResponse_File","","",null,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"clone","","",34,null],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"default_instance","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"clear_file_to_generate","","",34,null],[11,"set_file_to_generate","","",34,null],[11,"mut_file_to_generate","","",34,null],[11,"take_file_to_generate","","",34,null],[11,"get_file_to_generate","","",34,null],[11,"clear_parameter","","",34,null],[11,"has_parameter","","",34,null],[11,"set_parameter","","",34,null],[11,"mut_parameter","","",34,null],[11,"take_parameter","","",34,null],[11,"get_parameter","","",34,null],[11,"clear_proto_file","","",34,null],[11,"set_proto_file","","",34,null],[11,"mut_proto_file","","",34,null],[11,"take_proto_file","","",34,null],[11,"get_proto_file","","",34,null],[11,"is_initialized","","",34,null],[11,"merge_from","","",34,null],[11,"compute_size","","",34,null],[11,"write_to_with_cached_sizes","","",34,null],[11,"get_cached_size","","",34,null],[11,"get_unknown_fields","","",34,null],[11,"mut_unknown_fields","","",34,null],[11,"type_id","","",34,null],[11,"as_any","","",34,null],[11,"descriptor","","",34,null],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"descriptor_static","","",34,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",34,null],[11,"eq","","",34,null],[11,"fmt","","",34,null],[11,"default","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"clone","","",35,null],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"default_instance","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"clear_error","","",35,null],[11,"has_error","","",35,null],[11,"set_error","","",35,null],[11,"mut_error","","",35,null],[11,"take_error","","",35,null],[11,"get_error","","",35,null],[11,"clear_file","","",35,null],[11,"set_file","","",35,null],[11,"mut_file","","",35,null],[11,"take_file","","",35,null],[11,"get_file","","",35,null],[11,"is_initialized","","",35,null],[11,"merge_from","","",35,null],[11,"compute_size","","",35,null],[11,"write_to_with_cached_sizes","","",35,null],[11,"get_cached_size","","",35,null],[11,"get_unknown_fields","","",35,null],[11,"mut_unknown_fields","","",35,null],[11,"type_id","","",35,null],[11,"as_any","","",35,null],[11,"descriptor","","",35,null],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"descriptor_static","","",35,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",35,null],[11,"eq","","",35,null],[11,"fmt","","",35,null],[11,"default","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"clone","","",36,null],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"default_instance","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"clear_name","","",36,null],[11,"has_name","","",36,null],[11,"set_name","","",36,null],[11,"mut_name","","",36,null],[11,"take_name","","",36,null],[11,"get_name","","",36,null],[11,"clear_insertion_point","","",36,null],[11,"has_insertion_point","","",36,null],[11,"set_insertion_point","","",36,null],[11,"mut_insertion_point","","",36,null],[11,"take_insertion_point","","",36,null],[11,"get_insertion_point","","",36,null],[11,"clear_content","","",36,null],[11,"has_content","","",36,null],[11,"set_content","","",36,null],[11,"mut_content","","",36,null],[11,"take_content","","",36,null],[11,"get_content","","",36,null],[11,"is_initialized","","",36,null],[11,"merge_from","","",36,null],[11,"compute_size","","",36,null],[11,"write_to_with_cached_sizes","","",36,null],[11,"get_cached_size","","",36,null],[11,"get_unknown_fields","","",36,null],[11,"mut_unknown_fields","","",36,null],[11,"type_id","","",36,null],[11,"as_any","","",36,null],[11,"descriptor","","",36,null],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"descriptor_static","","",36,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",36,null],[11,"eq","","",36,null],[11,"fmt","","",36,null],[0,"core","protobuf","",null,null],[5,"message_is","protobuf::core","",null,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[5,"message_down_cast","","",null,{"inputs":[{"name":"message"}],"output":{"name":"m"}}],[5,"parse_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_from_bytes","","",null,null],[5,"parse_length_delimited_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_bytes","","",null,null],[8,"MessageStatic","","",null,null],[10,"new","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"descriptor_static","","",37,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[8,"Message","","",null,null],[10,"descriptor","","",38,null],[10,"is_initialized","","",38,null],[10,"merge_from","","",38,null],[10,"write_to_with_cached_sizes","","",38,null],[10,"compute_size","","",38,null],[10,"get_cached_size","","",38,null],[11,"write_to","","",38,null],[11,"write_length_delimited_to","","",38,null],[11,"merge_from_bytes","","",38,null],[11,"check_initialized","","",38,null],[11,"write_to_writer","","",38,null],[11,"write_to_vec","","",38,null],[11,"write_to_bytes","","",38,null],[11,"write_length_delimited_to_writer","","",38,null],[11,"write_length_delimited_to_bytes","","",38,null],[10,"get_unknown_fields","","",38,null],[10,"mut_unknown_fields","","",38,null],[10,"type_id","","",38,null],[10,"as_any","","",38,null],[8,"ProtobufEnum","","",null,null],[10,"value","","",39,null],[10,"from_i32","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",39,null],[11,"descriptor","","",39,null],[11,"enum_descriptor","","",39,null],[11,"enum_descriptor_static","","",39,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[0,"rt","protobuf","",null,null],[5,"compute_raw_varint64_size","protobuf::rt","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[5,"compute_raw_varint32_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"vec_packed_varint_data_size","","",null,null],[5,"vec_packed_varint_zigzag_data_size","","",null,null],[5,"vec_packed_enum_data_size","","",null,null],[5,"vec_packed_varint_size","","",null,null],[5,"vec_packed_varint_zigzag_size","","",null,null],[5,"vec_packed_enum_size","","",null,null],[5,"tag_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"value_size_no_tag","","",null,{"inputs":[{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_size","","",null,{"inputs":[{"name":"u32"},{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size_no_tag","","Length of value when encoded with zigzag encoding",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size","","Length of value when encoding with zigzag encoding with tag",null,{"inputs":[{"name":"u32"},{"name":"t"}],"output":{"name":"u32"}}],[5,"enum_size","","",null,{"inputs":[{"name":"u32"},{"name":"e"}],"output":{"name":"u32"}}],[5,"bytes_size","","",null,null],[5,"string_size","","",null,{"inputs":[{"name":"u32"},{"name":"str"}],"output":{"name":"u32"}}],[5,"unknown_fields_size","","",null,{"inputs":[{"name":"unknownfields"}],"output":{"name":"u32"}}],[5,"read_repeated_int32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_int64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_double_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_float_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bool_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_enum_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularptrfield"}],"output":{"name":"protobufresult"}}],[5,"read_unknown_or_skip_group","","",null,{"inputs":[{"name":"u32"},{"name":"wiretype"},{"name":"codedinputstream"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[5,"unexpected_wire_type","","Create an error for unexpected wire type.",null,{"inputs":[{"name":"wiretype"}],"output":{"name":"protobuferror"}}],[8,"ProtobufVarint","","",null,null],[10,"len_varint","","",40,null],[8,"ProtobufVarintZigzag","","",null,null],[10,"len_varint_zigzag","","",41,null],[0,"lazy","protobuf","",null,null],[3,"Lazy","protobuf::lazy","",null,null],[12,"lock","","",42,null],[12,"ptr","","",42,null],[17,"ONCE_INIT","","",null,null],[11,"get","","",42,null],[0,"code_writer","protobuf","",null,null],[3,"CodeWriter","protobuf::code_writer","",null,null],[11,"new","","",43,{"inputs":[{"name":"write"}],"output":{"name":"codewriter"}}],[11,"write_line","","",43,null],[11,"write_generated","","",43,null],[11,"todo","","",43,null],[11,"indented","","",43,null],[11,"commented","","",43,null],[11,"lazy_static","","",43,null],[11,"lazy_static_decl_get","","",43,null],[11,"block","","",43,null],[11,"expr_block","","",43,null],[11,"stmt_block","","",43,null],[11,"unsafe_expr","","",43,null],[11,"impl_self_block","","",43,null],[11,"impl_for_block","","",43,null],[11,"unsafe_impl","","",43,null],[11,"pub_struct","","",43,null],[11,"def_struct","","",43,null],[11,"pub_enum","","",43,null],[11,"pub_trait","","",43,null],[11,"field_entry","","",43,null],[11,"field_decl","","",43,null],[11,"derive","","",43,null],[11,"allow","","",43,null],[11,"comment","","",43,null],[11,"fn_def","","",43,null],[11,"pub_fn","","",43,null],[11,"def_fn","","",43,null],[11,"while_block","","",43,null],[11,"if_stmt","","",43,null],[11,"if_else_stmt","","",43,null],[11,"if_let_stmt","","",43,null],[11,"if_let_else_stmt","","",43,null],[11,"for_stmt","","",43,null],[11,"match_block","","",43,null],[11,"match_expr","","",43,null],[11,"case_block","","",43,null],[11,"case_expr","","",43,null],[11,"error_unexpected_wire_type","","",43,null],[11,"assert_wire_type","","",43,null],[0,"codegen","protobuf","",null,null],[4,"RustType","protobuf::codegen","",null,null],[13,"Int","","",44,null],[13,"Float","","",44,null],[13,"Bool","","",44,null],[13,"Vec","","",44,null],[13,"String","","",44,null],[13,"Slice","","",44,null],[13,"Str","","",44,null],[13,"Option","","",44,null],[13,"SingularField","","",44,null],[13,"SingularPtrField","","",44,null],[13,"RepeatedField","","",44,null],[13,"Uniq","","",44,null],[13,"Ref","","",44,null],[13,"Message","","",44,null],[13,"Enum","","",44,null],[13,"Oneof","","",44,null],[13,"Group","","",44,null],[5,"gen","","",null,null],[5,"protoc_gen_rust_main","","",null,{"inputs":[],"output":null}],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[0,"compiler_plugin","protobuf","",null,null],[3,"GenResult","protobuf::compiler_plugin","",null,null],[12,"name","","",45,null],[12,"content","","",45,null],[5,"plugin_main","","",null,null],[0,"repeated","protobuf","",null,null],[3,"RepeatedField","protobuf::repeated","",null,null],[11,"clear","","",46,null],[11,"clear","","",46,null],[11,"default","","",46,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"from_vec","","",46,{"inputs":[{"name":"vec"}],"output":{"name":"repeatedfield"}}],[11,"into_vec","","",46,null],[11,"capacity","","",46,null],[11,"as_mut_slice","","",46,null],[11,"slice","","",46,null],[11,"slice_mut","","",46,null],[11,"slice_from","","",46,null],[11,"slice_from_mut","","",46,null],[11,"slice_to","","",46,null],[11,"slice_to_mut","","",46,null],[11,"split_at","","",46,null],[11,"split_at_mut","","",46,null],[11,"tail","","",46,null],[11,"last","","",46,null],[11,"last_mut","","",46,null],[11,"init","","",46,null],[11,"push","","",46,null],[11,"pop","","",46,null],[11,"insert","","",46,null],[11,"remove","","",46,null],[11,"truncate","","",46,null],[11,"reverse","","",46,null],[11,"into_iter","","",46,null],[11,"iter","","",46,null],[11,"iter_mut","","",46,null],[11,"sort_by","","",46,null],[11,"as_ptr","","",46,null],[11,"as_mut_ptr","","",46,null],[11,"push_default","","",46,null],[11,"from_slice","","",46,null],[11,"clone","","",46,null],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"repeatedfield"}}],[11,"eq","","",46,null],[11,"contains","","",46,null],[11,"hash","","",46,null],[11,"as_ref","","",46,null],[11,"borrow","","",46,null],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"fmt","","",46,null],[0,"singular","protobuf","",null,null],[3,"SingularField","protobuf::singular","",null,null],[3,"SingularPtrField","","",null,null],[11,"some","","",47,{"inputs":[{"name":"t"}],"output":{"name":"singularfield"}}],[11,"is_some","","",47,null],[11,"is_none","","",47,null],[11,"into_option","","",47,null],[11,"as_ref","","",47,null],[11,"as_mut","","",47,null],[11,"get_ref","","",47,null],[11,"get_mut_ref","","",47,null],[11,"unwrap","","",47,null],[11,"unwrap_or","","",47,null],[11,"unwrap_or_else","","",47,null],[11,"map","","",47,null],[11,"iter","","",47,null],[11,"mut_iter","","",47,null],[11,"clear","","",47,null],[11,"none","","",47,{"inputs":[],"output":{"name":"singularfield"}}],[11,"from_option","","",47,{"inputs":[{"name":"option"}],"output":{"name":"singularfield"}}],[11,"take","","",47,null],[11,"some","","",48,{"inputs":[{"name":"t"}],"output":{"name":"singularptrfield"}}],[11,"none","","",48,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"from_option","","",48,{"inputs":[{"name":"option"}],"output":{"name":"singularptrfield"}}],[11,"is_some","","",48,null],[11,"is_none","","",48,null],[11,"into_option","","",48,null],[11,"as_ref","","",48,null],[11,"as_mut","","",48,null],[11,"get_ref","","",48,null],[11,"get_mut_ref","","",48,null],[11,"unwrap","","",48,null],[11,"unwrap_or","","",48,null],[11,"unwrap_or_else","","",48,null],[11,"map","","",48,null],[11,"iter","","",48,null],[11,"mut_iter","","",48,null],[11,"take","","",48,null],[11,"clear","","",48,null],[11,"unwrap_or_default","","",47,null],[11,"set_default","","",47,null],[11,"unwrap_or_default","","",48,null],[11,"set_default","","",48,null],[11,"default","","",47,{"inputs":[],"output":{"name":"singularfield"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"fmt","","",47,null],[11,"fmt","","",48,null],[11,"eq","","",47,null],[11,"eq","","",48,null],[11,"hash","","",47,null],[11,"hash","","",48,null],[0,"clear","protobuf","",null,null],[8,"Clear","protobuf::clear","anything that can be cleared",null,null],[10,"clear","","",49,null],[11,"clear","core::option","",50,null],[11,"clear","collections::string","",51,null],[11,"clear","collections::vec","",52,null],[0,"reflect","protobuf","",null,null],[3,"FieldDescriptor","protobuf::reflect","",null,null],[3,"MessageDescriptor","","",null,null],[3,"EnumValueDescriptor","","",null,null],[3,"EnumDescriptor","","",null,null],[0,"accessor","","",null,null],[5,"make_singular_u32_accessor","protobuf::reflect::accessor","",null,null],[5,"make_singular_i32_accessor","","",null,null],[5,"make_singular_u64_accessor","","",null,null],[5,"make_singular_i64_accessor","","",null,null],[5,"make_singular_f32_accessor","","",null,null],[5,"make_singular_f64_accessor","","",null,null],[5,"make_singular_bool_accessor","","",null,null],[5,"make_singular_string_accessor","","",null,null],[5,"make_singular_bytes_accessor","","",null,null],[5,"make_singular_enum_accessor","","",null,null],[5,"make_singular_message_accessor","","",null,null],[5,"make_repeated_u32_accessor","","",null,null],[5,"make_repeated_i32_accessor","","",null,null],[5,"make_repeated_u64_accessor","","",null,null],[5,"make_repeated_i64_accessor","","",null,null],[5,"make_repeated_f32_accessor","","",null,null],[5,"make_repeated_f64_accessor","","",null,null],[5,"make_repeated_bool_accessor","","",null,null],[5,"make_repeated_string_accessor","","",null,null],[5,"make_repeated_bytes_accessor","","",null,null],[5,"make_repeated_enum_accessor","","",null,null],[5,"make_repeated_message_accessor","","",null,null],[8,"FieldAccessor","","this trait should not be used directly, use `FieldDescriptor` instead",null,null],[10,"name_generic","","",53,null],[10,"has_field_generic","","",53,null],[10,"len_field_generic","","",53,null],[10,"get_message_generic","","",53,null],[10,"get_rep_message_item_generic","","",53,null],[10,"get_enum_generic","","",53,null],[10,"get_rep_enum_item_generic","","",53,null],[10,"get_str_generic","","",53,null],[10,"get_rep_str_generic","","",53,null],[10,"get_bytes_generic","","",53,null],[10,"get_rep_bytes_generic","","",53,null],[10,"get_u32_generic","","",53,null],[10,"get_rep_u32_generic","","",53,null],[10,"get_u64_generic","","",53,null],[10,"get_rep_u64_generic","","",53,null],[10,"get_i32_generic","","",53,null],[10,"get_rep_i32_generic","","",53,null],[10,"get_i64_generic","","",53,null],[10,"get_rep_i64_generic","","",53,null],[10,"get_bool_generic","","",53,null],[10,"get_rep_bool_generic","","",53,null],[10,"get_f32_generic","","",53,null],[10,"get_rep_f32_generic","","",53,null],[10,"get_f64_generic","","",53,null],[10,"get_rep_f64_generic","","",53,null],[11,"proto","protobuf::reflect","",54,null],[11,"name","","",54,null],[11,"is_repeated","","",54,null],[11,"has_field","","",54,null],[11,"len_field","","",54,null],[11,"get_message","","",54,null],[11,"get_rep_message_item","","",54,null],[11,"get_enum","","",54,null],[11,"get_rep_enum_item","","",54,null],[11,"get_str","","",54,null],[11,"get_rep_str","","",54,null],[11,"get_rep_str_item","","",54,null],[11,"get_bytes","","",54,null],[11,"get_rep_bytes","","",54,null],[11,"get_rep_bytes_item","","",54,null],[11,"get_u32","","",54,null],[11,"get_rep_u32","","",54,null],[11,"get_u64","","",54,null],[11,"get_rep_u64","","",54,null],[11,"get_i32","","",54,null],[11,"get_rep_i32","","",54,null],[11,"get_i64","","",54,null],[11,"get_rep_i64","","",54,null],[11,"get_bool","","",54,null],[11,"get_rep_bool","","",54,null],[11,"get_f32","","",54,null],[11,"get_rep_f32","","",54,null],[11,"get_f64","","",54,null],[11,"get_rep_f64","","",54,null],[11,"for_type","","",55,{"inputs":[],"output":{"name":"messagedescriptor"}}],[11,"new","","",55,{"inputs":[{"name":"str"},{"name":"vec"},{"name":"filedescriptorproto"}],"output":{"name":"messagedescriptor"}}],[11,"new_instance","","",55,null],[11,"name","","",55,null],[11,"full_name","","",55,null],[11,"fields","","",55,null],[11,"field_by_name","","",55,null],[11,"field_by_number","","",55,null],[11,"clone","","",56,null],[11,"name","","",56,null],[11,"value","","",56,null],[11,"name","","",57,null],[11,"for_type","","",57,{"inputs":[],"output":{"name":"enumdescriptor"}}],[11,"new","","",57,{"inputs":[{"name":"str"},{"name":"filedescriptorproto"}],"output":{"name":"enumdescriptor"}}],[11,"value_by_name","","",57,null],[11,"value_by_number","","",57,null],[0,"text_format","protobuf","",null,null],[5,"print_to","protobuf::text_format","",null,{"inputs":[{"name":"message"},{"name":"string"}],"output":null}],[5,"print_to_string","","",null,{"inputs":[{"name":"message"}],"output":{"name":"string"}}],[5,"fmt","","",null,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","protobuf","",null,null],[3,"CodedInputStream","protobuf::stream","",null,null],[3,"CodedOutputStream","","",null,null],[5,"with_coded_output_stream_to_bytes","","",null,{"inputs":[{"name":"f"}],"output":{"name":"protobufresult"}}],[0,"wire_format","","",null,null],[3,"Tag","protobuf::stream::wire_format","",null,null],[4,"WireType","","",null,null],[13,"WireTypeVarint","","",58,null],[13,"WireTypeFixed64","","",58,null],[13,"WireTypeLengthDelimited","","",58,null],[13,"WireTypeStartGroup","","",58,null],[13,"WireTypeEndGroup","","",58,null],[13,"WireTypeFixed32","","",58,null],[17,"TAG_TYPE_BITS","","",null,null],[17,"TAG_TYPE_MASK","","",null,null],[17,"FIELD_NUMBER_MAX","","",null,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"eq","","",58,null],[11,"new","","",58,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",59,null],[11,"value","","",59,null],[11,"new","","",59,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"make","","",59,{"inputs":[{"name":"u32"},{"name":"wiretype"}],"output":{"name":"tag"}}],[11,"unpack","","",59,null],[11,"field_number","","",59,null],[8,"WithCodedOutputStream","protobuf::stream","",null,null],[10,"with_coded_output_stream","","",60,null],[8,"WithCodedInputStream","","",null,null],[10,"with_coded_input_stream","","",61,null],[11,"new","","",62,{"inputs":[{"name":"read"}],"output":{"name":"codedinputstream"}}],[11,"from_buffered_reader","","",62,{"inputs":[{"name":"bufread"}],"output":{"name":"codedinputstream"}}],[11,"from_bytes","","",62,null],[11,"pos","","",62,null],[11,"bytes_until_limit","","",62,null],[11,"read","","",62,null],[11,"read_raw_byte","","",62,null],[11,"push_limit","","",62,null],[11,"pop_limit","","",62,null],[11,"eof","","",62,null],[11,"check_eof","","",62,null],[11,"read_raw_varint64","","",62,null],[11,"read_raw_varint32","","",62,null],[11,"read_raw_little_endian32","","",62,null],[11,"read_raw_little_endian64","","",62,null],[11,"read_tag","","",62,null],[11,"read_tag_unpack","","",62,null],[11,"read_double","","",62,null],[11,"read_float","","",62,null],[11,"read_int64","","",62,null],[11,"read_int32","","",62,null],[11,"read_uint64","","",62,null],[11,"read_uint32","","",62,null],[11,"read_sint64","","",62,null],[11,"read_sint32","","",62,null],[11,"read_fixed64","","",62,null],[11,"read_fixed32","","",62,null],[11,"read_sfixed64","","",62,null],[11,"read_sfixed32","","",62,null],[11,"read_bool","","",62,null],[11,"read_enum","","",62,null],[11,"read_repeated_packed_double_into","","",62,null],[11,"read_repeated_packed_float_into","","",62,null],[11,"read_repeated_packed_int64_into","","",62,null],[11,"read_repeated_packed_int32_into","","",62,null],[11,"read_repeated_packed_uint64_into","","",62,null],[11,"read_repeated_packed_uint32_into","","",62,null],[11,"read_repeated_packed_sint64_into","","",62,null],[11,"read_repeated_packed_sint32_into","","",62,null],[11,"read_repeated_packed_fixed64_into","","",62,null],[11,"read_repeated_packed_fixed32_into","","",62,null],[11,"read_repeated_packed_sfixed64_into","","",62,null],[11,"read_repeated_packed_sfixed32_into","","",62,null],[11,"read_repeated_packed_bool_into","","",62,null],[11,"read_repeated_packed_enum_into","","",62,null],[11,"read_unknown","","",62,null],[11,"skip_field","","",62,null],[11,"read_raw_bytes_into","","Read raw bytes into the supplied vector.  The vector will be resized as needed and\noverwritten.",62,null],[11,"read_raw_bytes","","Read exact number of bytes",62,null],[11,"skip_raw_bytes","","",62,null],[11,"read_bytes","","",62,null],[11,"read_bytes_into","","",62,null],[11,"read_string","","",62,null],[11,"read_string_into","","",62,null],[11,"merge_message","","",62,null],[11,"read_message","","",62,null],[11,"new","","",63,{"inputs":[{"name":"write"}],"output":{"name":"codedoutputstream"}}],[11,"flush","","",63,null],[11,"write_raw_byte","","",63,null],[11,"write_raw_bytes","","",63,null],[11,"write_tag","","",63,null],[11,"write_raw_varint32","","",63,null],[11,"write_raw_varint64","","",63,null],[11,"write_raw_little_endian32","","",63,null],[11,"write_raw_little_endian64","","",63,null],[11,"write_float_no_tag","","",63,null],[11,"write_double_no_tag","","",63,null],[11,"write_float","","",63,null],[11,"write_double","","",63,null],[11,"write_uint64_no_tag","","",63,null],[11,"write_uint32_no_tag","","",63,null],[11,"write_int64_no_tag","","",63,null],[11,"write_int32_no_tag","","",63,null],[11,"write_sint64_no_tag","","",63,null],[11,"write_sint32_no_tag","","",63,null],[11,"write_fixed64_no_tag","","",63,null],[11,"write_fixed32_no_tag","","",63,null],[11,"write_sfixed64_no_tag","","",63,null],[11,"write_sfixed32_no_tag","","",63,null],[11,"write_bool_no_tag","","",63,null],[11,"write_enum_no_tag","","",63,null],[11,"write_enum_obj_no_tag","","",63,null],[11,"write_unknown_no_tag","","",63,null],[11,"write_uint64","","",63,null],[11,"write_uint32","","",63,null],[11,"write_int64","","",63,null],[11,"write_int32","","",63,null],[11,"write_sint64","","",63,null],[11,"write_sint32","","",63,null],[11,"write_fixed64","","",63,null],[11,"write_fixed32","","",63,null],[11,"write_sfixed64","","",63,null],[11,"write_sfixed32","","",63,null],[11,"write_bool","","",63,null],[11,"write_enum","","",63,null],[11,"write_enum_obj","","",63,null],[11,"write_unknown","","",63,null],[11,"write_unknown_fields","","",63,null],[11,"write_bytes_no_tag","","",63,null],[11,"write_string_no_tag","","",63,null],[11,"write_message_no_tag","","",63,null],[11,"write_bytes","","",63,null],[11,"write_string","","",63,null],[11,"write_message","","",63,null],[0,"error","protobuf","",null,null],[4,"ProtobufError","protobuf::error","",null,null],[13,"IoError","","",64,null],[13,"WireError","","",64,null],[13,"MessageNotInitialized","","",64,null],[12,"message","protobuf::error::ProtobufError","",64,null],[6,"ProtobufResult","protobuf::error","",null,null],[11,"fmt","","",64,null],[11,"message_not_initialized","","",64,{"inputs":[{"name":"str"}],"output":{"name":"protobuferror"}}],[11,"fmt","","",64,null],[11,"description","","",64,null],[11,"cause","","",64,null],[0,"hex","protobuf","",null,null],[5,"decode_hex","protobuf::hex","",null,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[5,"encode_hex","","",null,null],[0,"descriptorx","protobuf","",null,null],[3,"RootScope","protobuf::descriptorx","",null,null],[12,"file_descriptors","","",65,null],[3,"FileScope","","",null,null],[12,"file_descriptor","","",66,null],[3,"Scope","","",null,null],[12,"file_scope","","",67,null],[12,"path","","",67,null],[3,"MessageWithScope","","",null,null],[12,"scope","","",68,null],[12,"message","","",68,null],[3,"EnumWithScope","","",null,null],[12,"scope","","",69,null],[12,"en","","",69,null],[3,"FieldWithContext","","",null,null],[12,"field","","",70,null],[12,"message","","",70,null],[3,"OneofVariantWithContext","","",null,null],[12,"oneof","","",71,null],[12,"field","","",71,null],[3,"OneofWithContext","","",null,null],[12,"oneof","","",72,null],[12,"index","","",72,null],[12,"message","","",72,null],[4,"MessageOrEnumWithScope","","",null,null],[13,"Message","","",73,null],[13,"Enum","","",73,null],[5,"proto_path_to_rust_mod","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"find_message_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"messagewithscope"}}],[5,"find_enum_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"enumwithscope"}}],[8,"WithScope","","",null,null],[10,"get_scope","","",74,null],[11,"get_file_descriptor","","",74,null],[10,"get_name","","",74,null],[11,"name_to_package","","",74,null],[11,"rust_name","","",74,null],[11,"rust_fq_name","","",74,null],[11,"find_enum","","",65,null],[11,"find_message","","",65,null],[11,"find_message_or_enum","","",65,null],[11,"clone","","",66,null],[11,"to_scope","","",66,null],[11,"find_enums","","",66,null],[11,"find_messages","","",66,null],[11,"find_messages_and_enums","","",66,null],[11,"clone","","",67,null],[11,"get_file_descriptor","","",67,null],[11,"get_messages","","",67,null],[11,"get_enums","","",67,null],[11,"get_messages_and_enums","","",67,null],[11,"prefix","","",67,null],[11,"rust_prefix","","",67,null],[11,"clone","","",68,null],[11,"get_scope","","",68,null],[11,"get_name","","",68,null],[11,"into_scope","","",68,null],[11,"to_scope","","",68,null],[11,"fields","","",68,null],[11,"oneofs","","",68,null],[11,"oneof_by_index","","",68,null],[11,"clone","","",69,null],[11,"values","","",69,null],[11,"value_by_name","","",69,null],[11,"get_scope","","",69,null],[11,"get_name","","",69,null],[11,"get_scope","","",73,null],[11,"get_name","","",73,null],[11,"oneof","","",70,null],[11,"rust_name","","",70,null],[11,"clone","","",71,null],[11,"field_name","","",71,null],[11,"clone","","",72,null],[11,"name","","",72,null],[11,"rust_name","","",72,null],[11,"variants","","",72,null],[11,"fmt","protobuf","",2,null],[11,"wire_type","","",2,null],[11,"get_ref","","",2,null],[11,"wire_type","","",3,null],[11,"default","","",1,{"inputs":[],"output":{"name":"unknownvalues"}}],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"add_value","","",1,null],[11,"iter","","",1,null],[11,"next","","",75,null],[11,"default","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"add_fixed32","","",0,null],[11,"add_fixed64","","",0,null],[11,"add_varint","","",0,null],[11,"add_length_delimited","","",0,null],[11,"add_value","","",0,null],[11,"iter","","",0,null],[11,"clear","","",0,null],[11,"next","","",76,null]],"paths":[[3,"UnknownFields"],[3,"UnknownValues"],[4,"UnknownValue"],[4,"UnknownValueRef"],[4,"FieldDescriptorProto_Type"],[4,"FieldDescriptorProto_Label"],[4,"FileOptions_OptimizeMode"],[4,"FieldOptions_CType"],[4,"FieldOptions_JSType"],[3,"FileDescriptorSet"],[3,"FileDescriptorProto"],[3,"DescriptorProto"],[3,"DescriptorProto_ExtensionRange"],[3,"DescriptorProto_ReservedRange"],[3,"FieldDescriptorProto"],[3,"OneofDescriptorProto"],[3,"EnumDescriptorProto"],[3,"EnumValueDescriptorProto"],[3,"ServiceDescriptorProto"],[3,"MethodDescriptorProto"],[3,"FileOptions"],[3,"MessageOptions"],[3,"FieldOptions"],[3,"OneofOptions"],[3,"EnumOptions"],[3,"EnumValueOptions"],[3,"ServiceOptions"],[3,"MethodOptions"],[3,"UninterpretedOption"],[3,"UninterpretedOption_NamePart"],[3,"SourceCodeInfo"],[3,"SourceCodeInfo_Location"],[3,"GeneratedCodeInfo"],[3,"GeneratedCodeInfo_Annotation"],[3,"CodeGeneratorRequest"],[3,"CodeGeneratorResponse"],[3,"CodeGeneratorResponse_File"],[8,"MessageStatic"],[8,"Message"],[8,"ProtobufEnum"],[8,"ProtobufVarint"],[8,"ProtobufVarintZigzag"],[3,"Lazy"],[3,"CodeWriter"],[4,"RustType"],[3,"GenResult"],[3,"RepeatedField"],[3,"SingularField"],[3,"SingularPtrField"],[8,"Clear"],[4,"Option"],[3,"String"],[3,"Vec"],[8,"FieldAccessor"],[3,"FieldDescriptor"],[3,"MessageDescriptor"],[3,"EnumValueDescriptor"],[3,"EnumDescriptor"],[4,"WireType"],[3,"Tag"],[8,"WithCodedOutputStream"],[8,"WithCodedInputStream"],[3,"CodedInputStream"],[3,"CodedOutputStream"],[4,"ProtobufError"],[3,"RootScope"],[3,"FileScope"],[3,"Scope"],[3,"MessageWithScope"],[3,"EnumWithScope"],[3,"FieldWithContext"],[3,"OneofVariantWithContext"],[3,"OneofWithContext"],[4,"MessageOrEnumWithScope"],[8,"WithScope"],[3,"UnknownValuesIter"],[3,"UnknownFieldsIter"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[11,"as_str","","Returns the underlying string that&#39;s being demangled.",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null]],"paths":[[3,"Demangle"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["xdg_basedir"] = {"doc":"xdg-basedir is a utility library to make conforming to the\n[XDG basedir specification](http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html) easier.","items":[[0,"dirs","xdg_basedir","",null,null],[5,"get_data_home_from_env","xdg_basedir::dirs","Get the data home directory given a closure that returns the the value of an environment variable.\nThis method allows having a custom environment.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"get_data_home","","Get the data home directory.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_data_dirs_from_env","","Get the default data directories given a closure that returns the the value of an environment variable.\nThis method allows having a custom environment.",null,{"inputs":[{"name":"f"}],"output":{"name":"vec"}}],[5,"get_data_dirs","","Get the data directories.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"get_config_home_from_env","","Get the config home directory given a closure that returns the the value of an environment variable.\nThis method allows having a custom environment.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"get_config_home","","Get the config home directory.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_config_dirs_from_env","","Get the default config directories given a closure that returns the the value of an environment variable.\nThis method allows having a custom environment.",null,{"inputs":[{"name":"f"}],"output":{"name":"vec"}}],[5,"get_config_dirs","","Get the config directories.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"get_cache_home_from_env","","Get the cache home directory given a closure that returns the the value of an environment variable.\nThis method allows having a custom environment.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"get_cache_home","","Get the cache home directory.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_runtime_dir_from_env","","Get ```$XDG_RUNTIME_DIR``` if found in the environment.\nThis method allows having a custom environment.",null,{"inputs":[{"name":"f"}],"output":{"name":"option"}}],[5,"get_runtime_dir","","Get ```$XDG_RUNTIME_DIR``` if found in the environment.",null,{"inputs":[],"output":{"name":"option"}}],[0,"error","xdg_basedir","",null,null],[3,"Error","xdg_basedir::error","",null,null],[4,"ErrorKind","","",null,null],[13,"Xdg","","",0,null],[13,"Io","","",0,null],[4,"XdgError","","",null,null],[13,"NoHomeDir","","",1,null],[13,"InvalidPath","","",1,null],[13,"IncorrectPermissions","","",1,null],[13,"IncorrectOwner","","",1,null],[6,"Result","","",null,null],[11,"fmt","","",2,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"new","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"from","","",2,{"inputs":[{"name":"xdgerror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"xdgerror"}],"output":{"name":"result"}}]],"paths":[[4,"ErrorKind"],[4,"XdgError"],[3,"Error"],[6,"Result"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if!","cfg_if","",null,null]],"paths":[]};
initSearch(searchIndex);
